import{_ as n,c as s,o as a,a as p}from"./app.dbcd9662.js";const m='{"title":"Windows\u4E0BHook C++ DLL","description":"","frontmatter":{"title":"Windows\u4E0BHook C++ DLL","date":"2020-10-15T03:06:23.000Z","draft":false},"headers":[{"level":2,"title":"DLL \u5BFC\u51FA\u7B26\u53F7","slug":"dll-\u5BFC\u51FA\u7B26\u53F7"},{"level":2,"title":"x86\u4E0B\u7684\u5404\u79CD\u8C03\u7528\u7EA6\u5B9A","slug":"x86\u4E0B\u7684\u5404\u79CD\u8C03\u7528\u7EA6\u5B9A"},{"level":3,"title":"\u8C03\u7528\u8005\u6E05\u7406","slug":"\u8C03\u7528\u8005\u6E05\u7406"},{"level":3,"title":"\u88AB\u8C03\u7528\u8005\u6E05\u7406","slug":"\u88AB\u8C03\u7528\u8005\u6E05\u7406"},{"level":3,"title":"\u8C03\u7528\u8005\u6216\u88AB\u8C03\u7528\u8005\u6E05\u7406","slug":"\u8C03\u7528\u8005\u6216\u88AB\u8C03\u7528\u8005\u6E05\u7406"},{"level":3,"title":"x86-64\u8C03\u7528\u7EA6\u5B9A","slug":"x86-64\u8C03\u7528\u7EA6\u5B9A"},{"level":2,"title":"thiscall \u95EE\u9898","slug":"thiscall-\u95EE\u9898"},{"level":2,"title":"\u7528fastcall \u6A21\u62DFthiscall","slug":"\u7528fastcall-\u6A21\u62DFthiscall"},{"level":2,"title":"\u4F7F\u7528EasyHook\u6765Hook\u4EFB\u610F\u8FDB\u7A0B","slug":"\u4F7F\u7528easyhook\u6765hook\u4EFB\u610F\u8FDB\u7A0B"},{"level":3,"title":"EasyHook\u7684\u4F7F\u7528","slug":"easyhook\u7684\u4F7F\u7528"},{"level":3,"title":"injector","slug":"injector"},{"level":3,"title":"hook.dll","slug":"hook-dll"},{"level":3,"title":"fastcall \u6A21\u62DF thiscall","slug":"fastcall-\u6A21\u62DF-thiscall"}],"relativePath":"other/windows_hook_thiscall.md"}',t={},e=p(`<p>\u5173\u952E\u5B57: Hook windows dll thiscall fastcall</p><h2 id="dll-\u5BFC\u51FA\u7B26\u53F7" tabindex="-1">DLL \u5BFC\u51FA\u7B26\u53F7 <a class="header-anchor" href="#dll-\u5BFC\u51FA\u7B26\u53F7" aria-hidden="true">#</a></h2><p>\u5982\u679C\u5BFC\u51FA\u7684DLL\u662F<code>extern &quot;C&quot;</code>\u7C7B\u578B\u7684\u8BDD,\u90A3\u4E48\u5C31\u53EA\u6709\u51FD\u6570\u540D\u5B57,\u4E0D\u5305\u542B\u4EFB\u4F55\u8FD4\u56DE\u7C7B\u578B\u4EE5\u53CA\u53C2\u6570\u4FE1\u606F.\u6BD4\u5982Kernel32.dll\u4E2D\u7684<code>GetProcAddress</code>. \u4F46\u662F\u5982\u679C\u662F\u5BFC\u51FA\u4E00\u4E2AC++\u7C7B\u7684\u8BDD,\u5BFC\u51FA\u7684\u7B26\u53F7\u5C31\u5F88\u590D\u6742,\u6BD4\u5982\u4E0B\u9762\u8FD9\u79CD\u60C5\u51B5.</p><div class="language-"><pre><code>?Refresh_RequestProcess@CFLRPCApi@@QAEHXZ		@36
?Request@CFLRPCApi@@QAEHHPADH0AAHHHH@Z		@37
\`\`
\u5C55\u5F00\u4EE5\u540E\u5BF9\u5E94\u7684\u5C31\u662F:

\`\`\`cpp
class FLRPCLib_API CFLRPCApi
{
public:
	int	Refresh_RequestProcess(void);
	int	Request(int,char *,int,char *,int &amp;,int,int,int);
}
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="x86\u4E0B\u7684\u5404\u79CD\u8C03\u7528\u7EA6\u5B9A" tabindex="-1">x86\u4E0B\u7684\u5404\u79CD\u8C03\u7528\u7EA6\u5B9A <a class="header-anchor" href="#x86\u4E0B\u7684\u5404\u79CD\u8C03\u7528\u7EA6\u5B9A" aria-hidden="true">#</a></h2><p>\u4EE5\u4E0B\u5217\u5185\u5BB9\u4E3B\u8981\u6765\u81EA<a href="https://zh.wikipedia.org/wiki/X86%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A" target="_blank" rel="noopener noreferrer">\u7EF4\u57FA\u767E\u79D1</a> \u5206\u7C7B\u4F9D\u636E\u4E3B\u8981\u662F\u6E05\u7406\u6808\u7684\u5DE5\u4F5C\u662F\u8C03\u7528\u8005\u8FD8\u662F\u88AB\u8C03\u7528\u8005\u6E05\u7406.</p><h3 id="\u8C03\u7528\u8005\u6E05\u7406" tabindex="-1">\u8C03\u7528\u8005\u6E05\u7406 <a class="header-anchor" href="#\u8C03\u7528\u8005\u6E05\u7406" aria-hidden="true">#</a></h3><p>\u5728\u8FD9\u4E9B\u7EA6\u5B9A\u4E2D\uFF0C\u8C03\u7528\u8005\u81EA\u5DF1\u6E05\u7406\u5806\u6808\u4E0A\u7684\u53C2\u6570(arguments)\uFF0C\u8FD9\u6837\u5C31\u5141\u8BB8\u4E86\u53EF\u53D8\u53C2\u6570\u5217\u8868\u7684\u5B9E\u73B0\uFF0C\u5982printf()\u3002</p><h4 id="cdecl" tabindex="-1">cdecl <a class="header-anchor" href="#cdecl" aria-hidden="true">#</a></h4><p>cdecl(C declaration\uFF0C\u5373C\u58F0\u660E)\u662F\u6E90\u8D77C\u8BED\u8A00\u7684\u4E00\u79CD\u8C03\u7528\u7EA6\u5B9A\uFF0C\u4E5F\u662FC\u8BED\u8A00\u7684\u4E8B\u5B9E\u4E0A\u7684\u6807\u51C6\u3002\u5728x86\u67B6\u6784\u4E0A\uFF0C\u5176\u5185\u5BB9\u5305\u62EC\uFF1A</p><ol><li>\u51FD\u6570\u5B9E\u53C2\u5728\u7EBF\u7A0B\u6808\u4E0A\u6309\u7167\u4ECE\u53F3\u81F3\u5DE6\u7684\u987A\u5E8F\u4F9D\u6B21\u538B\u6808\u3002</li><li>\u51FD\u6570\u7ED3\u679C\u4FDD\u5B58\u5728\u5BC4\u5B58\u5668EAX/AX/AL\u4E2D</li><li>\u6D6E\u70B9\u578B\u7ED3\u679C\u5B58\u653E\u5728\u5BC4\u5B58\u5668ST0\u4E2D</li><li>\u7F16\u8BD1\u540E\u7684\u51FD\u6570\u540D\u524D\u7F00\u4EE5\u4E00\u4E2A\u4E0B\u5212\u7EBF\u5B57\u7B26</li><li>\u8C03\u7528\u8005\u8D1F\u8D23\u4ECE\u7EBF\u7A0B\u6808\u4E2D\u5F39\u51FA\u5B9E\u53C2\uFF08\u5373\u6E05\u6808\uFF09</li><li>8\u6BD4\u7279\u6216\u800516\u6BD4\u7279\u957F\u7684\u6574\u5F62\u5B9E\u53C2\u63D0\u5347\u4E3A32\u6BD4\u7279\u957F\u3002</li><li>\u53D7\u5230\u51FD\u6570\u8C03\u7528\u5F71\u54CD\u7684\u5BC4\u5B58\u5668\uFF08volatile registers\uFF09\uFF1AEAX, ECX, EDX, ST0 - ST7, ES, GS</li><li>\u4E0D\u53D7\u51FD\u6570\u8C03\u7528\u5F71\u54CD\u7684\u5BC4\u5B58\u5668\uFF1A EBX, EBP, ESP, EDI, ESI, CS, DS</li><li>RET\u6307\u4EE4\u4ECE\u51FD\u6570\u88AB\u8C03\u7528\u8005\u8FD4\u56DE\u5230\u8C03\u7528\u8005\uFF08\u5B9E\u8D28\u4E0A\u662F\u8BFB\u53D6\u5BC4\u5B58\u5668EBP\u6240\u6307\u7684\u7EBF\u7A0B\u6808\u4E4B\u5904\u4FDD\u5B58\u7684\u51FD\u6570\u8FD4\u56DE\u5730\u5740\u5E76\u52A0\u8F7D\u5230IP\u5BC4\u5B58\u5668\uFF09</li><li>Visual C++\u89C4\u5B9A\u51FD\u6570\u8FD4\u56DE\u503C\u5982\u679C\u662FPOD\u503C\u4E14\u957F\u5EA6\u5982\u679C\u4E0D\u8D85\u8FC732\u6BD4\u7279\uFF0C\u7528\u5BC4\u5B58\u5668EAX\u4F20\u9012\uFF1B\u957F\u5EA6\u572833-64\u6BD4\u7279\u8303\u56F4\u5185\uFF0C\u7528\u5BC4\u5B58\u5668EAX:EDX\u4F20\u9012\uFF1B\u957F\u5EA6\u8D85\u8FC764\u6BD4\u7279\u6216\u8005\u975EPOD\u503C\uFF0C\u5219\u8C03\u7528\u8005\u4E3A\u51FD\u6570\u8FD4\u56DE\u503C\u9884\u5148\u5206\u914D\u4E00\u4E2A\u7A7A\u95F4\uFF0C\u628A\u8BE5\u7A7A\u95F4\u7684\u5730\u5740\u4F5C\u4E3A\u9690\u5F0F\u53C2\u6570\u4F20\u9012\u7ED9\u88AB\u8C03\u51FD\u6570\u3002</li></ol><p>GCC\u7684\u51FD\u6570\u8FD4\u56DE\u503C\u90FD\u662F\u7531\u8C03\u7528\u8005\u5206\u914D\u7A7A\u95F4\uFF0C\u5E76\u628A\u8BE5\u7A7A\u95F4\u7684\u5730\u5740\u4F5C\u4E3A\u9690\u5F0F\u53C2\u6570\u4F20\u9012\u7ED9\u88AB\u8C03\u51FD\u6570\uFF0C\u800C\u4E0D\u4F7F\u7528\u5BC4\u5B58\u5668EAX\u3002GCC\u81EA4.5\u7248\u672C\u5F00\u59CB\uFF0C\u8C03\u7528\u51FD\u6570\u65F6\uFF0C\u5806\u6808\u4E0A\u7684\u6570\u636E\u5FC5\u987B\u4EE516B\u5BF9\u9F50(\u4E4B\u524D\u7684\u7248\u672C\u53EA\u9700\u89814B\u5BF9\u9F50\u5373\u53EF)\u3002</p><p>\u8003\u8651\u4E0B\u9762\u7684C\u4EE3\u7801\u7247\u6BB5\uFF1A</p><div class="language-c line-numbers-mode"><pre><code>  <span class="token keyword">int</span> <span class="token function">callee</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token function">caller</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">register</span> <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
      
      ret <span class="token operator">=</span> <span class="token function">callee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ret <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u5728x86\u4E0A\uFF0C \u4F1A\u4EA7\u751F\u5982\u4E0B\u6C47\u7F16\u4EE3\u7801(AT&amp;T \u8BED\u6CD5)\uFF1A</p><div class="language-"><pre><code>        .globl  caller
  caller:
        pushl   %ebp
        movl    %esp,%ebp
        pushl   $3
        pushl   $2
        pushl   $1
        call    callee
        addl    $12,%esp
        addl    $5,%eax
        leave
        ret
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u5728\u51FD\u6570\u8FD4\u56DE\u540E\uFF0C\u8C03\u7528\u7684\u51FD\u6570\u6E05\u7406\u4E86\u5806\u6808\u3002 \u5728cdecl\u7684\u7406\u89E3\u4E0A\u5B58\u5728\u4E00\u4E9B\u4E0D\u540C\uFF0C\u5C24\u5176\u662F\u5728\u5982\u4F55\u8FD4\u56DE\u503C\u7684\u95EE\u9898\u4E0A\u3002\u7ED3\u679C\uFF0Cx86\u7A0B\u5E8F\u7ECF\u8FC7\u4E0D\u540COS\u5E73\u53F0\u7684\u4E0D\u540C\u7F16\u8BD1\u5668\u7F16\u8BD1\u540E\uFF0C\u4F1A\u6709\u4E0D\u517C\u5BB9\u7684\u60C5\u51B5\uFF0C\u5373\u4F7F\u5B83\u4EEC\u4F7F\u7528\u7684\u90FD\u662F\u201Ccdecl\u201D\u89C4\u5219\u5E76\u4E14\u4E0D\u4F1A\u4F7F\u7528\u7CFB\u7EDF\u8C03\u7528\u3002\u67D0\u4E9B\u7F16\u8BD1\u5668\u8FD4\u56DE\u7B80\u5355\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u957F\u5EA6\u5927\u81F4\u5360\u7528\u4E24\u4E2A\u5BC4\u5B58\u5668\uFF0C\u653E\u5728\u5BC4\u5B58\u5668\u5BF9EAX:EDX\u4E2D\uFF1B\u5927\u70B9\u7684\u7ED3\u6784\u548C\u7C7B\u5BF9\u8C61\u9700\u8981\u5F02\u5E38\u5904\u7406\u5668\u7684\u4E00\u4E9B\u7279\u6B8A\u5904\u7406(\u5982\u4E00\u4E2A\u5B9A\u4E49\u7684\u6784\u9020\u51FD\u6570\uFF0C\u6790\u6784\u51FD\u6570\u6216\u8D4B\u503C)\uFF0C\u5B58\u653E\u5728\u5185\u5B58\u4E0A\u3002\u4E3A\u4E86\u653E\u7F6E\u5728\u5185\u5B58\u4E0A\uFF0C\u8C03\u7528\u8005\u9700\u8981\u5206\u914D\u4E00\u4E9B\u5185\u5B58\uFF0C\u5E76\u4E14\u8BA9\u4E00\u4E2A\u6307\u9488\u6307\u5411\u8FD9\u5757\u5185\u5B58\uFF0C\u8FD9\u4E2A\u6307\u9488\u5C31\u4F5C\u4E3A\u9690\u85CF\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570\uFF1B\u88AB\u8C03\u7528\u8005\u4F7F\u7528\u8FD9\u5757\u5185\u5B58\u5E76\u8FD4\u56DE\u6307\u9488----\u8FD4\u56DE\u65F6\u5F39\u51FA\u9690\u85CF\u7684\u6307\u9488\u3002 \u5728Linux/GCC\uFF0C\u6D6E\u70B9\u6570\u503C\u901A\u8FC7x87\u4F2A\u6808\u88AB\u63A8\u5165\u5806\u6808\u3002\u50CF\u8FD9\u6837\uFF1A</p><div class="language-"><pre><code>        sub esp, 8      ; \u7ED9double\u503C\u4E00\u70B9\u7A7A\u95F4
        fld [ebp + x]   ; \u52A0\u8F7Ddouble\u503C\u5230\u6D6E\u70B9\u5806\u6808\u4E0A
        fstp [esp]      ; \u63A8\u5165\u5806\u6808
        call funct
        add esp, 8
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u4F7F\u7528\u8FD9\u79CD\u65B9\u6CD5\u786E\u4FDD\u80FD\u4EE5\u6B63\u786E\u7684\u683C\u5F0F\u63A8\u5165\u5806\u6808\u3002 cdecl\u8C03\u7528\u7EA6\u5B9A\u901A\u5E38\u4F5C\u4E3Ax86 C\u7F16\u8BD1\u5668\u7684\u9ED8\u8BA4\u8C03\u7528\u89C4\u5219\uFF0C\u8BB8\u591A\u7F16\u8BD1\u5668\u4E5F\u63D0\u4F9B\u4E86\u81EA\u52A8\u5207\u6362\u8C03\u7528\u7EA6\u5B9A\u7684\u9009\u9879\u3002\u5982\u679C\u9700\u8981\u624B\u52A8\u6307\u5B9A\u8C03\u7528\u89C4\u5219\u4E3Acdecl\uFF0C\u7F16\u8BD1\u5668\u53EF\u80FD\u4F1A\u652F\u6301\u5982\u4E0B\u8BED\u6CD5\uFF1A</p><div class="language-"><pre><code>  return_type _cdecl funct();
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>\u5176\u4E2D_cdecl\u4FEE\u9970\u7B26\u9700\u8981\u5728\u51FD\u6570\u539F\u578B\u4E2D\u7ED9\u51FA\uFF0C\u5728\u51FD\u6570\u58F0\u660E\u4E2D\u4F1A\u8986\u76D6\u6389\u5176\u4ED6\u7684\u8BBE\u7F6E\u3002</p><h4 id="syscall" tabindex="-1">syscall <a class="header-anchor" href="#syscall" aria-hidden="true">#</a></h4><p>\u4E0Ecdecl\u7C7B\u4F3C\uFF0C\u53C2\u6570\u88AB\u4ECE\u53F3\u5230\u5DE6\u63A8\u5165\u5806\u6808\u4E2D\u3002EAX, ECX\u548CEDX\u4E0D\u4F1A\u4FDD\u7559\u503C\u3002\u53C2\u6570\u5217\u8868\u7684\u5927\u5C0F\u88AB\u653E\u7F6E\u5728AL\u5BC4\u5B58\u5668\u4E2D(?)\u3002 syscall\u662F32\u4F4DOS/2 API\u7684\u6807\u51C6\u3002</p><h4 id="optlink" tabindex="-1">optlink <a class="header-anchor" href="#optlink" aria-hidden="true">#</a></h4><p>\u53C2\u6570\u4E5F\u662F\u4ECE\u53F3\u5230\u5DE6\u88AB\u63A8\u5165\u5806\u6808\u3002\u4ECE\u6700\u5DE6\u8FB9\u5F00\u59CB\u7684\u4E09\u4E2A\u5B57\u7B26\u53D8\u5143\u4F1A\u88AB\u653E\u7F6E\u5728EAX, EDX\u548CECX\u4E2D\uFF0C\u6700\u591A\u56DB\u4E2A\u6D6E\u70B9\u53D8\u5143\u4F1A\u88AB\u4F20\u5165ST(0)\u5230ST(3)\u4E2D----\u867D\u7136\u8FD9\u56DB\u4E2A\u53C2\u6570\u7684\u7A7A\u95F4\u4E5F\u4F1A\u5728\u53C2\u6570\u5217\u8868\u7684\u6808\u4E0A\u4FDD\u7559\u3002\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u5728EAX\u6216ST(0)\u4E2D\u3002\u4FDD\u7559\u7684\u5BC4\u5B58\u5668\u6709EBP, EBX, ESI\u548CEDI\u3002 optlink\u5728IBM VisualAge\u7F16\u8BD1\u5668\u4E2D\u88AB\u4F7F\u7528\u3002</p><h3 id="\u88AB\u8C03\u7528\u8005\u6E05\u7406" tabindex="-1">\u88AB\u8C03\u7528\u8005\u6E05\u7406 <a class="header-anchor" href="#\u88AB\u8C03\u7528\u8005\u6E05\u7406" aria-hidden="true">#</a></h3><p>\u5982\u679C\u88AB\u8C03\u7528\u8005\u8981\u6E05\u7406\u6808\u4E0A\u7684\u53C2\u6570\uFF0C\u9700\u8981\u5728\u7F16\u8BD1\u9636\u6BB5\u77E5\u9053\u6808\u4E0A\u6709\u591A\u5C11\u5B57\u8282\u8981\u5904\u7406\u3002\u56E0\u6B64\uFF0C\u6B64\u7C7B\u7684\u8C03\u7528\u7EA6\u5B9A\u5E76\u4E0D\u80FD\u517C\u5BB9\u4E8E\u53EF\u53D8\u53C2\u6570\u5217\u8868\uFF0C\u5982printf()\u3002\u7136\u800C\uFF0C\u8FD9\u79CD\u8C03\u7528\u7EA6\u5B9A\u4E5F\u8BB8\u4F1A\u66F4\u6709\u6548\u7387\uFF0C\u56E0\u4E3A\u9700\u8981\u89E3\u5806\u6808\u7684\u4EE3\u7801\u4E0D\u8981\u5728\u6BCF\u6B21\u8C03\u7528\u65F6\u90FD\u751F\u6210\u4E00\u904D\u3002 \u4F7F\u7528\u6B64\u89C4\u5219\u7684\u51FD\u6570\u5BB9\u6613\u5728asm\u4EE3\u7801\u88AB\u8BA4\u51FA\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u4F1A\u5728\u8FD4\u56DE\u524D\u89E3\u5806\u6808\u3002x86 ret\u6307\u4EE4\u5141\u8BB8\u4E00\u4E2A\u53EF\u9009\u768416\u4F4D\u53C2\u6570\u8BF4\u660E\u6808\u5B57\u8282\u6570\uFF0C\u7528\u6765\u5728\u8FD4\u56DE\u7ED9\u8C03\u7528\u8005\u4E4B\u524D\u89E3\u5806\u6808\u3002\u4EE3\u7801\u7C7B\u4F3C\u5982\u4E0B\uFF1A</p><div class="language-"><pre><code> ret 12
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h4 id="pascal" tabindex="-1">pascal <a class="header-anchor" href="#pascal" aria-hidden="true">#</a></h4><p>\u57FA\u4E8EPascal\u8BED\u8A00\u7684\u8C03\u7528\u7EA6\u5B9A\uFF0C\u53C2\u6570\u4ECE\u5DE6\u81F3\u53F3\u5165\u6808(\u4E0Ecdecl\u76F8\u53CD)\u3002\u88AB\u8C03\u7528\u8005\u8D1F\u8D23\u5728\u8FD4\u56DE\u524D\u6E05\u7406\u5806\u6808\u3002 \u6B64\u8C03\u7528\u7EA6\u5B9A\u5E38\u89C1\u5728\u5982\u4E0B16-bit \u5E73\u53F0\u7684\u7F16\u8BD1\u5668\uFF1AOS/2 1.x\uFF0C\u5FAE\u8F6FWindows 3.x\uFF0C\u4EE5\u53CABorland Delphi\u7248\u672C1.x\u3002</p><h4 id="register" tabindex="-1">register <a class="header-anchor" href="#register" aria-hidden="true">#</a></h4><p>Borland fastcall\u7684\u522B\u540D\u3002</p><h4 id="stdcall" tabindex="-1">stdcall <a class="header-anchor" href="#stdcall" aria-hidden="true">#</a></h4><p>stdcall\u662F\u7531\u5FAE\u8F6F\u521B\u5EFA\u7684\u8C03\u7528\u7EA6\u5B9A\uFF0C\u662FWindows API\u7684\u6807\u51C6\u8C03\u7528\u7EA6\u5B9A\u3002\u975E\u5FAE\u8F6F\u7684\u7F16\u8BD1\u5668\u5E76\u4E0D\u603B\u662F\u652F\u6301\u8BE5\u8C03\u7528\u534F\u8BAE\u3002GCC\u7F16\u8BD1\u5668\u5982\u4E0B\u4F7F\u7528\uFF1A</p><div class="language-"><pre><code>int __attribute__((__stdcall__ )) func()
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>stdcall\u662FPascal\u8C03\u7528\u7EA6\u5B9A\u4E0Ecdecl\u8C03\u7528\u7EA6\u5B9A\u7684\u6298\u8877\uFF1A\u88AB\u8C03\u7528\u8005\u8D1F\u8D23\u6E05\u7406\u7EBF\u7A0B\u6808\uFF0C\u53C2\u6570\u4ECE\u53F3\u5F80\u5DE6\u5165\u6808\u3002\u5176\u4ED6\u5404\u65B9\u9762\u57FA\u672C\u4E0Ecdecl\u76F8\u540C\u3002\u4F46\u662F\u7F16\u8BD1\u540E\u7684\u51FD\u6570\u540D\u540E\u7F00\u4EE5\u7B26\u53F7&quot;@&quot;\uFF0C\u540E\u8DDF\u4F20\u9012\u7684\u51FD\u6570\u53C2\u6570\u6240\u5360\u7684\u6808\u7A7A\u95F4\u7684\u5B57\u8282\u957F\u5EA6\u3002\u5BC4\u5B58\u5668EAX, ECX\u548CEDX\u88AB\u6307\u5B9A\u5728\u51FD\u6570\u4E2D\u4F7F\u7528\uFF0C\u8FD4\u56DE\u503C\u653E\u7F6E\u5728EAX\u4E2D\u3002stdcall\u5BF9\u4E8E\u5FAE\u8F6FWin32 API\u548COpen Watcom C++\u662F\u6807\u51C6\u3002</p><p>\u5FAE\u8F6F\u7684\u7F16\u8BD1\u5DE5\u5177\u89C4\u5B9A\uFF1APASCAL, WINAPI, APIENTRY, FORTRAN, CALLBACK, STDCALL, __far __pascal, __fortran, __stdcall\u5747\u662F\u6307\u6B64\u79CD\u8C03\u7528\u7EA6\u5B9A\u3002</p><h4 id="fastcall" tabindex="-1">fastcall <a class="header-anchor" href="#fastcall" aria-hidden="true">#</a></h4><p>\u6B64\u7EA6\u5B9A\u8FD8\u672A\u88AB\u6807\u51C6\u5316\uFF0C\u4E0D\u540C\u7F16\u8BD1\u5668\u7684\u5B9E\u73B0\u4E5F\u4E0D\u4E00\u81F4\u3002</p><h4 id="microsoft-gcc-fastcall" tabindex="-1">Microsoft/GCC fastcall <a class="header-anchor" href="#microsoft-gcc-fastcall" aria-hidden="true">#</a></h4><p>Microsoft\u6216GCC\u7684__fastcall\u7EA6\u5B9A(\u4E5F\u5373__msfastcall)\u628A\u7B2C\u4E00\u4E2A(\u4ECE\u5DE6\u81F3\u53F3)\u4E0D\u8D85\u8FC732\u6BD4\u7279\u7684\u53C2\u6570\u901A\u8FC7\u5BC4\u5B58\u5668ECX/CX/CL\u4F20\u9012\uFF0C\u7B2C\u4E8C\u4E2A\u4E0D\u8D85\u8FC732\u6BD4\u7279\u7684\u53C2\u6570\u901A\u8FC7\u5BC4\u5B58\u5668EDX/DX/DL\uFF0C\u5176\u4ED6\u53C2\u6570\u6309\u7167\u81EA\u53F3\u5230\u5DE6\u987A\u5E8F\u538B\u6808\u4F20\u9012\u3002</p><h4 id="borland-fastcall" tabindex="-1">Borland fastcall <a class="header-anchor" href="#borland-fastcall" aria-hidden="true">#</a></h4><p>\u4ECE\u5DE6\u81F3\u53F3\uFF0C\u4F20\u5165\u4E09\u4E2A\u53C2\u6570\u81F3EAX, EDX\u548CECX\u4E2D\u3002\u5269\u4E0B\u7684\u53C2\u6570\u63A8\u5165\u6808\uFF0C\u4E5F\u662F\u4ECE\u5DE6\u81F3\u53F3\u3002 \u572832\u4F4D\u7F16\u8BD1\u5668Embarcadero Delphi\u4E2D\uFF0C\u8FD9\u662F\u7F3A\u7701\u8C03\u7528\u7EA6\u5B9A\uFF0C\u5728\u7F16\u8BD1\u5668\u4E2D\u4EE5register\u5F62\u5F0F\u4E3A\u4EBA\u77E5\u3002 \u5728i386\u4E0A\u7684\u67D0\u4E9B\u7248\u672CLinux\u4E5F\u4F7F\u7528\u4E86\u6B64\u7EA6\u5B9A\u3002</p><h3 id="\u8C03\u7528\u8005\u6216\u88AB\u8C03\u7528\u8005\u6E05\u7406" tabindex="-1">\u8C03\u7528\u8005\u6216\u88AB\u8C03\u7528\u8005\u6E05\u7406 <a class="header-anchor" href="#\u8C03\u7528\u8005\u6216\u88AB\u8C03\u7528\u8005\u6E05\u7406" aria-hidden="true">#</a></h3><h4 id="thiscall" tabindex="-1">thiscall <a class="header-anchor" href="#thiscall" aria-hidden="true">#</a></h4><p>\u5728\u8C03\u7528C++\u975E\u9759\u6001\u6210\u5458\u51FD\u6570\u65F6\u4F7F\u7528\u6B64\u7EA6\u5B9A\u3002\u57FA\u4E8E\u6240\u4F7F\u7528\u7684\u7F16\u8BD1\u5668\u548C\u51FD\u6570\u662F\u5426\u4F7F\u7528\u53EF\u53D8\u53C2\u6570\uFF0C\u6709\u4E24\u4E2A\u4E3B\u6D41\u7248\u672C\u7684thiscall\u3002 \u5BF9\u4E8EGCC\u7F16\u8BD1\u5668\uFF0Cthiscall\u51E0\u4E4E\u4E0Ecdecl\u7B49\u540C\uFF1A\u8C03\u7528\u8005\u6E05\u7406\u5806\u6808\uFF0C\u53C2\u6570\u4ECE\u53F3\u5230\u5DE6\u4F20\u9012\u3002\u5DEE\u522B\u5728\u4E8Ethis\u6307\u9488\uFF0Cthiscall\u4F1A\u5728\u6700\u540E\u628Athis\u6307\u9488\u63A8\u5165\u6808\u4E2D\uFF0C\u5373\u76F8\u5F53\u4E8E\u5728\u51FD\u6570\u539F\u578B\u4E2D\u662F\u9690\u5F0F\u7684\u5DE6\u6570\u7B2C\u4E00\u4E2A\u53C2\u6570\u3002</p><p>\u5728\u5FAE\u8F6FVisual C<ins>\u7F16\u8BD1\u5668\u4E2D\uFF0Cthis\u6307\u9488\u901A\u8FC7ECX\u5BC4\u5B58\u5668\u4F20\u9012\uFF0C\u5176\u4F59\u540Ccdecl\u7EA6\u5B9A\u3002\u5F53\u51FD\u6570\u4F7F\u7528\u53EF\u53D8\u53C2\u6570\uFF0C\u6B64\u65F6\u8C03\u7528\u8005\u8D1F\u8D23\u6E05\u7406\u5806\u6808(\u53C2\u8003cdecl)\u3002thiscall\u7EA6\u5B9A\u53EA\u5728\u5FAE\u8F6FVisual C</ins> 2005\u53CA\u5176\u4E4B\u540E\u7684\u7248\u672C\u88AB\u663E\u5F0F\u6307\u5B9A\u3002\u5176\u4ED6\u7F16\u8BD1\u5668\u4E2D\uFF0Cthiscall\u5E76\u4E0D\u662F\u4E00\u4E2A\u5173\u952E\u5B57(\u53CD\u6C47\u7F16\u5668\u5982IDA\u4F7F\u7528__thiscall)\u3002</p><h4 id="winapi" tabindex="-1">WINAPI <a class="header-anchor" href="#winapi" aria-hidden="true">#</a></h4><p>WINAPI\u662F\u5E73\u53F0\u7684\u7F3A\u7701\u8C03\u7528\u7EA6\u5B9A\u3002Windows\u64CD\u4F5C\u7CFB\u7EDF\u4E0A\u9ED8\u8BA4\u662FStdCall\uFF1BWindows CE\u4E0A\u9ED8\u8BA4\u662FCdecl\u3002</p><h4 id="intel-abi" tabindex="-1">Intel ABI <a class="header-anchor" href="#intel-abi" aria-hidden="true">#</a></h4><p>\u6839\u636EIntel ABI\uFF0CEAX\u3001EDX\u53CAECX\u53EF\u4EE5\u81EA\u7531\u5728\u8FC7\u7A0B\u6216\u51FD\u6570\u4E2D\u4F7F\u7528\uFF0C\u4E0D\u9700\u8981\u4FDD\u7559\u3002</p><h3 id="x86-64\u8C03\u7528\u7EA6\u5B9A" tabindex="-1">x86-64\u8C03\u7528\u7EA6\u5B9A <a class="header-anchor" href="#x86-64\u8C03\u7528\u7EA6\u5B9A" aria-hidden="true">#</a></h3><p>x86-64\u8C03\u7528\u7EA6\u5B9A\u5F97\u76CA\u4E8E\u66F4\u591A\u7684\u5BC4\u5B58\u5668\u53EF\u4EE5\u7528\u6765\u4F20\u53C2\u3002\u800C\u4E14\uFF0C\u4E0D\u517C\u5BB9\u7684\u8C03\u7528\u7EA6\u5B9A\u4E5F\u66F4\u5C11\u4E86\uFF0C\u4E0D\u8FC7\u8FD8\u662F\u67092\u79CD\u4E3B\u6D41\u7684\u89C4\u5219\u3002</p><h4 id="\u5FAE\u8F6Fx86-64\u8C03\u7528\u7EA6\u5B9A" tabindex="-1">\u5FAE\u8F6Fx86-64\u8C03\u7528\u7EA6\u5B9A <a class="header-anchor" href="#\u5FAE\u8F6Fx86-64\u8C03\u7528\u7EA6\u5B9A" aria-hidden="true">#</a></h4><p>\u5728Windows x64\u73AF\u5883\u4E0B\u7F16\u8BD1\u4EE3\u7801\u65F6\uFF0C\u53EA\u6709\u4E00\u79CD\u8C03\u7528\u7EA6\u5B9A\uFF0C\u4E5F\u5C31\u662F\u8BF432\u4F4D\u4E0B\u7684\u5404\u79CD\u7EA6\u5B9A\u572864\u4F4D\u4E0B\u7EDF\u4E00\u6210\u4E00\u79CD\u4E86\u3002</p><p>\u5FAE\u8F6Fx64\u8C03\u7528\u7EA6\u5B9A\u4F7F\u7528RCX, RDX, R8, R9\u56DB\u4E2A\u5BC4\u5B58\u5668\u7528\u4E8E\u5B58\u50A8\u51FD\u6570\u8C03\u7528\u65F6\u76844\u4E2A\u53C2\u6570(\u4ECE\u5DE6\u5230\u53F3)\uFF0C\u4F7F\u7528XMM0, XMM1, XMM2, XMM3\u6765\u4F20\u9012\u6D6E\u70B9\u53D8\u91CF\u3002\u5176\u4ED6\u7684\u53C2\u6570\u76F4\u63A5\u5165\u6808(\u4ECE\u53F3\u81F3\u5DE6)\u3002\u6574\u578B\u8FD4\u56DE\u503C\u653E\u7F6E\u5728RAX\u4E2D\uFF0C\u6D6E\u70B9\u8FD4\u56DE\u503C\u5728XMM0\u4E2D\u3002\u5C11\u4E8E64\u4F4D\u7684\u53C2\u6570\u5E76\u6CA1\u6709\u505A\u96F6\u6269\u5C55\uFF0C\u6B64\u65F6\u9AD8\u4F4D\u5145\u65A5\u7740\u5783\u573E\u3002</p><p>\u5728\u5FAE\u8F6Fx64\u8C03\u7528\u7EA6\u5B9A\u4E2D\uFF0C\u8C03\u7528\u8005\u7684\u4E00\u4E2A\u804C\u8D23\u662F\u5728\u8C03\u7528\u51FD\u6570\u4E4B\u524D(\u65E0\u8BBA\u5B9E\u9645\u7684\u4F20\u53C2\u4F7F\u7528\u591A\u5927\u7A7A\u95F4)\uFF0C\u5728\u6808\u4E0A\u7684\u51FD\u6570\u8FD4\u56DE\u5730\u5740\u4E4B\u4E0A\uFF08\u9760\u8FD1\u6808\u9876\uFF09\u5206\u914D\u4E00\u4E2A32\u5B57\u8282\u7684\u201C\u5F71\u5B50\u7A7A\u95F4\u201D\uFF1B\u5E76\u4E14\u5728\u8C03\u7528\u7ED3\u675F\u540E\u4ECE\u6808\u4E0A\u5F39\u6389\u6B64\u7A7A\u95F4\u3002\u5F71\u5B50\u7A7A\u95F4\u662F\u7528\u6765\u7ED9RCX, RDX, R8\u548CR9\u63D0\u4F9B\u4FDD\u5B58\u503C\u7684\u7A7A\u95F4\uFF0C\u5373\u4F7F\u662F\u5BF9\u4E8E\u5C11\u4E8E\u56DB\u4E2A\u53C2\u6570\u7684\u51FD\u6570\u4E5F\u8981\u5206\u914D\u8FD932\u4E2A\u5B57\u8282\u3002</p><p>\u4F8B\u5982\uFF0C \u4E00\u4E2A\u51FD\u6570\u62E5\u67095\u4E2A\u6574\u578B\u53C2\u6570\uFF0C\u7B2C\u4E00\u4E2A\u5230\u7B2C\u56DB\u4E2A\u653E\u5728\u5BC4\u5B58\u5668\u4E2D\uFF0C\u7B2C\u4E94\u4E2A\u5C31\u88AB\u63A8\u5230\u5F71\u5B50\u7A7A\u95F4\u4E4B\u5916\u7684\u6808\u9876\u3002\u5F53\u51FD\u6570\u88AB\u8C03\u7528\uFF0C\u6B64\u6808\u7528\u6765\u7EC4\u6210\u8FD4\u56DE\u503C----\u5F71\u5B50\u7A7A\u95F432\u4F4D+\u7B2C\u4E94\u4E2A\u53C2\u6570\u3002</p><p>\u5728x86-64\u4F53\u7CFB\u4E0B\uFF0CVisual Studio 2008\u5728XMM6\u548CXMM7\u4E2D(\u540C\u6837\u7684\u6709XMM8\u5230XMM15)\u5B58\u50A8\u6D6E\u70B9\u6570\u3002\u7ED3\u679C\u5BF9\u4E8E\u7528\u6237\u5199\u7684\u6C47\u7F16\u8BED\u8A00\u4F8B\u7A0B\uFF0C\u5FC5\u987B\u4FDD\u5B58XMM6\u548CXMM7(x86\u4E0D\u7528\u4FDD\u5B58\u8FD9\u4E24\u4E2A\u5BC4\u5B58\u5668)\uFF0C\u8FD9\u4E5F\u5C31\u662F\u8BF4\uFF0C\u5728x86\u548Cx86-64\u4E4B\u95F4\u79FB\u690D\u6C47\u7F16\u4F8B\u7A0B\u65F6\uFF0C\u9700\u8981\u6CE8\u610F\u5728\u51FD\u6570\u8C03\u7528\u4E4B\u524D/\u4E4B\u540E\uFF0C\u8981\u4FDD\u5B58/\u6062\u590DXMM6\u548CXMM7\u3002</p><h4 id="system-v-amd64-abi" tabindex="-1">System V AMD64 ABI <a class="header-anchor" href="#system-v-amd64-abi" aria-hidden="true">#</a></h4><p>\u6B64\u7EA6\u5B9A\u4E3B\u8981\u5728Solaris\uFF0CGNU/Linux\uFF0CFreeBSD\u548C\u5176\u4ED6\u975E\u5FAE\u8F6FOS\u4E0A\u4F7F\u7528\u3002\u5934\u516D\u4E2A\u6574\u578B\u53C2\u6570\u653E\u5728\u5BC4\u5B58\u5668RDI, RSI, RDX, RCX, R8\u548CR9\u4E0A\uFF1B\u540C\u65F6XMM0\u5230XMM7\u7528\u6765\u653E\u7F6E\u6D6E\u70B9\u53D8\u5143\u3002\u5BF9\u4E8E\u7CFB\u7EDF\u8C03\u7528\uFF0CR10\u7528\u6765\u66FF\u4EE3RCX\u3002\u540C\u5FAE\u8F6Fx64\u7EA6\u5B9A\u4E00\u6837\uFF0C\u5176\u4ED6\u989D\u5916\u7684\u53C2\u6570\u63A8\u5165\u6808\uFF0C\u8FD4\u56DE\u503C\u4FDD\u5B58\u5728RAX\u4E2D\u3002 \u4E0E\u5FAE\u8F6F\u4E0D\u540C\u7684\u662F\uFF0C\u4E0D\u9700\u8981\u63D0\u4F9B\u5F71\u5B50\u7A7A\u95F4\u3002\u5728\u51FD\u6570\u5165\u53E3\uFF0C\u8FD4\u56DE\u503C\u4E0E\u6808\u4E0A\u7B2C\u4E03\u4E2A\u6574\u578B\u53C2\u6570\u76F8\u90BB\u3002</p><h2 id="thiscall-\u95EE\u9898" tabindex="-1">thiscall \u95EE\u9898 <a class="header-anchor" href="#thiscall-\u95EE\u9898" aria-hidden="true">#</a></h2><p>\u5982\u679C\u8981hook\u7684\u65B9\u5F0F\u662FC++ DLL,\u90A3\u4E48\u5B83\u9075\u5FAA\u7684\u5C31\u662F\u5FAE\u8F6F\u7684thiscall\u8C03\u7528\u7EA6\u5B9A,\u7279\u70B9\u5C31\u662F: <strong>this\u6307\u9488\u901A\u8FC7ECX\u5BC4\u5B58\u5668\u4F20\u9012\uFF0C\u5176\u4F59\u540Ccdecl\u7EA6\u5B9A</strong></p><p>\u6BD4\u5982: this-&gt;Request(arg1,arg2,arg3) \u5176\u4E2D\u7684this\u6307\u9488\u662F\u4E0D\u901A\u8FC7\u6808\u4F20\u9012\u7684,\u5982\u679C\u6211\u4EEC\u5F53\u6210\u666E\u901A\u7684stdcall\u6765\u5904\u7406\u4E00\u5B9A\u4F1A\u5D29\u6E83,\u56E0\u4E3AECX\u4E2D\u5B58\u50A8\u7684\u4E0D\u662Fthis \u6307\u9488.</p><p>\u6BD4\u5982\u521A\u521A\u7684\u90A3\u4E2A\u51FD\u6570,\u8F6C\u6362\u6210C\u8BED\u8A00\u6765\u58F0\u660E,\u5927\u81F4\u5982\u4E0B:</p><div class="language-"><pre><code>int	Request(void*this,int,char *,int,char *,int &amp;,int,int,int);
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>\u4F46\u662F\u5176\u4E2D\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570\u4E0D\u901A\u8FC7\u6808\u6765\u4F20\u9012,\u800C\u662F\u901A\u8FC7ECX\u6765\u4F20\u9012. \u8FD9\u662F\u6211\u4EEC\u505Ahook\u7684\u65F6\u5019\u8981\u7279\u522B\u6CE8\u610F\u7684\u95EE\u9898.</p><p>\u90A3\u4E48\u600E\u4E48\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\u5462,\u4E00\u4E2A\u601D\u8DEF\u5C31\u662F\u901A\u8FC7fastcall\u6765\u6A21\u62DFthiscall.</p><h2 id="\u7528fastcall-\u6A21\u62DFthiscall" tabindex="-1">\u7528fastcall \u6A21\u62DFthiscall <a class="header-anchor" href="#\u7528fastcall-\u6A21\u62DFthiscall" aria-hidden="true">#</a></h2><p>fastcall\u4E2D\u7B2C\u4E00\u4E2A\u53C2\u6570\u901A\u8FC7ecx,\u7B2C\u4E8C\u4E2A\u53C2\u6570\u901A\u8FC7edx,\u5176\u4ED6\u53C2\u6570\u5219\u662F\u4ECE\u53F3\u81F3\u5DE6\u987A\u5E8F\u538B\u6808. \u4E0B\u9762\u7ED9\u51FA\u4E00\u4E2A\u5B8C\u6574\u7684\u4F8B\u5B50:</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;mhook-lib/mhook.h&quot;</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> m_data<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> m_sz<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pstr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pstr <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pstr <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>m_sz<span class="token punctuation">,</span> pstr<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        m_data <span class="token operator">=</span> data<span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">void</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_sz<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s,%d\\n&quot;</span><span class="token punctuation">,</span> m_sz<span class="token punctuation">,</span>m_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span><span class="token punctuation">;</span>



<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>__thiscall A<span class="token double-colon punctuation">::</span><span class="token operator">*</span> TYPE_Ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pstr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//\u6CE8\u610F\u8FD9\u91CC\u7684\u7B2C\u4E8C\u4E2A\u53C2\u6570notUsed\u4E00\u5B9A\u8981\u4FDD\u7559,\u5B83\u5BF9\u5E94\u7684\u5C31\u662Ffastcall\u4E2D\u7684edx.</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span> TYPE_setMsgPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> pthis<span class="token punctuation">,</span>  <span class="token keyword">void</span><span class="token operator">*</span> notUsed<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

TYPE_setMsgPtr pNew<span class="token punctuation">;</span>


<span class="token keyword">int</span> __fastcall <span class="token function">HookSetMsg</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> pThis <span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span> notUsed<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pstr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hook new function\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">pNew</span><span class="token punctuation">(</span>pThis<span class="token punctuation">,</span> notUsed<span class="token punctuation">,</span> pstr<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>




TYPE_setMsgPtr pfnSetMsg <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">//\u5B9E\u73B0hook thiscall \u7684\u65B9\u6CD5\uFF0C\u4E0D\u9700\u8981\u7528naked\u6C47\u7F16</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    A<span class="token operator">*</span> theA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    theA<span class="token operator">-&gt;</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">&quot;hello A!&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    theA<span class="token operator">-&gt;</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    TYPE_Ptr px <span class="token operator">=</span> <span class="token operator">&amp;</span>A<span class="token double-colon punctuation">::</span>setMsg<span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>px<span class="token punctuation">;</span>

    <span class="token comment">//printf(&quot;%p,%p\\n&quot;, px, x);</span>

    pNew <span class="token operator">=</span> <span class="token punctuation">(</span>TYPE_setMsgPtr<span class="token punctuation">)</span>x<span class="token punctuation">;</span>
    <span class="token function">Mhook_SetHook</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PVOID<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pNew<span class="token punctuation">,</span> HookSetMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    theA<span class="token operator">-&gt;</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">&quot;hello B!&quot;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    theA<span class="token operator">-&gt;</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    theA<span class="token operator">-&gt;</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">&quot;hello C!&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    theA<span class="token operator">-&gt;</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br></div></div><h2 id="\u4F7F\u7528easyhook\u6765hook\u4EFB\u610F\u8FDB\u7A0B" tabindex="-1">\u4F7F\u7528EasyHook\u6765Hook\u4EFB\u610F\u8FDB\u7A0B <a class="header-anchor" href="#\u4F7F\u7528easyhook\u6765hook\u4EFB\u610F\u8FDB\u7A0B" aria-hidden="true">#</a></h2><h3 id="easyhook\u7684\u4F7F\u7528" tabindex="-1">EasyHook\u7684\u4F7F\u7528 <a class="header-anchor" href="#easyhook\u7684\u4F7F\u7528" aria-hidden="true">#</a></h3><p>\u4EE5\u4E0B\u5185\u5BB9\u6765\u81EA<a href="http://easyhook.github.io/tutorials/nativeremotehook.html" target="_blank" rel="noopener noreferrer">EasyHook\u5B98\u65B9\u6559\u7A0B</a></p><h3 id="injector" tabindex="-1">injector <a class="header-anchor" href="#injector" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;easyhook.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">_tmain</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> _TCHAR<span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	DWORD processId<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter the target process Id: &quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> processId<span class="token punctuation">;</span>

	DWORD freqOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter a frequency offset in hertz (e.g. 800): &quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> freqOffset<span class="token punctuation">;</span>

	WCHAR<span class="token operator">*</span> dllToInject <span class="token operator">=</span> L<span class="token string">&quot;..\\\\Debug\\\\BeepHook.dll&quot;</span><span class="token punctuation">;</span>
	<span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">&quot;Attempting to inject: %s\\n\\n&quot;</span><span class="token punctuation">,</span> dllToInject<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Inject dllToInject into the target process Id, passing </span>
	<span class="token comment">// freqOffset as the pass through data.</span>
	NTSTATUS nt <span class="token operator">=</span> <span class="token function">RhInjectLibrary</span><span class="token punctuation">(</span>
		processId<span class="token punctuation">,</span>   <span class="token comment">// The process to inject into</span>
		<span class="token number">0</span><span class="token punctuation">,</span>           <span class="token comment">// ThreadId to wake up upon injection</span>
		EASYHOOK_INJECT_DEFAULT<span class="token punctuation">,</span>
		dllToInject<span class="token punctuation">,</span> <span class="token comment">// 32-bit</span>
		<span class="token constant">NULL</span><span class="token punctuation">,</span>		 <span class="token comment">// 64-bit not provided</span>
		<span class="token operator">&amp;</span>freqOffset<span class="token punctuation">,</span> <span class="token comment">// data to send to injected DLL entry point</span>
		<span class="token keyword">sizeof</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span><span class="token comment">// size of data to send</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>nt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RhInjectLibrary failed with error code = %d\\n&quot;</span><span class="token punctuation">,</span> nt<span class="token punctuation">)</span><span class="token punctuation">;</span>
		PWCHAR err <span class="token operator">=</span> <span class="token function">RtlGetLastErrorString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> err <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">&quot;Library injected successfully.\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Press Enter to exit&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>wstring input<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>wcin<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>wcin<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="hook-dll" tabindex="-1">hook.dll <a class="header-anchor" href="#hook-dll" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;easyhook.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h&gt;</span></span>

DWORD gFreqOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
BOOL WINAPI <span class="token function">myBeepHook</span><span class="token punctuation">(</span>DWORD dwFreq<span class="token punctuation">,</span> DWORD dwDuration<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n    BeepHook: ****All your beeps belong to us!\\n\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">Beep</span><span class="token punctuation">(</span>dwFreq <span class="token operator">+</span> gFreqOffset<span class="token punctuation">,</span> dwDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// EasyHook will be looking for this export to support DLL injection. If not found then </span>
<span class="token comment">// DLL injection will fail.</span>
<span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">void</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span> __stdcall <span class="token function">NativeInjectionEntryPoint</span><span class="token punctuation">(</span>REMOTE_ENTRY_INFO<span class="token operator">*</span> inRemoteInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> __stdcall <span class="token function">NativeInjectionEntryPoint</span><span class="token punctuation">(</span>REMOTE_ENTRY_INFO<span class="token operator">*</span> inRemoteInfo<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n\\nNativeInjectionEntryPointt(REMOTE_ENTRY_INFO* inRemoteInfo)\\n\\n&quot;</span> <span class="token operator">&lt;&lt;</span>
		<span class="token string">&quot;IIIII           jjj               tt                dd !!! \\n&quot;</span>
		<span class="token string">&quot; III  nn nnn          eee    cccc tt      eee       dd !!! \\n&quot;</span>
		<span class="token string">&quot; III  nnn  nn   jjj ee   e cc     tttt  ee   e  dddddd !!! \\n&quot;</span>
		<span class="token string">&quot; III  nn   nn   jjj eeeee  cc     tt    eeeee  dd   dd     \\n&quot;</span>
		<span class="token string">&quot;IIIII nn   nn   jjj  eeeee  ccccc  tttt  eeeee  dddddd !!! \\n&quot;</span>
		<span class="token string">&quot;              jjjj                                         \\n\\n&quot;</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Injected by process Id: &quot;</span> <span class="token operator">&lt;&lt;</span> inRemoteInfo<span class="token operator">-&gt;</span>HostPID <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Passed in data size: &quot;</span> <span class="token operator">&lt;&lt;</span> inRemoteInfo<span class="token operator">-&gt;</span>UserDataSize <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inRemoteInfo<span class="token operator">-&gt;</span>UserDataSize <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		gFreqOffset <span class="token operator">=</span> <span class="token operator">*</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>DWORD <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>inRemoteInfo<span class="token operator">-&gt;</span>UserData<span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Adjusting Beep frequency by: &quot;</span> <span class="token operator">&lt;&lt;</span> gFreqOffset <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Perform hooking</span>
	HOOK_TRACE_INFO hHook <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// keep track of our hook</span>

	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Win32 Beep found at address: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandle</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Beep&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>

	<span class="token comment">// Install the hook</span>
	NTSTATUS result <span class="token operator">=</span> <span class="token function">LhInstallHook</span><span class="token punctuation">(</span>
		<span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandle</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;kernel32&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Beep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		myBeepHook<span class="token punctuation">,</span>
		<span class="token constant">NULL</span><span class="token punctuation">,</span>
		<span class="token operator">&amp;</span>hHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FAILED</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>wstring <span class="token function">s</span><span class="token punctuation">(</span><span class="token function">RtlGetLastErrorString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Failed to install hook: &quot;</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hook &#39;myBeepHook installed successfully.&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// If the threadId in the ACL is set to 0,</span>
	<span class="token comment">// then internally EasyHook uses GetCurrentThreadId()</span>
	ULONG ACLEntries<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// Disable the hook for the provided threadIds, enable for all others</span>
	<span class="token function">LhSetExclusiveACL</span><span class="token punctuation">(</span>ACLEntries<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hHook<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>\u6700\u5173\u952E\u7684\u662Fhook\u7684\u65F6\u5019\u8981\u9075\u5FAAfastcall\u6A21\u62DFthiscall\u7684\u7EA6\u5B9A.</p><h3 id="fastcall-\u6A21\u62DF-thiscall" tabindex="-1">fastcall \u6A21\u62DF thiscall <a class="header-anchor" href="#fastcall-\u6A21\u62DF-thiscall" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><pre><code>
<span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span>__fastcall <span class="token operator">*</span> TYPE_RequestPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> pthis<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span>edx<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> inBuf<span class="token punctuation">,</span><span class="token keyword">int</span> inLen<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> outBuf<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span> outLen<span class="token punctuation">,</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span><span class="token keyword">int</span> a2<span class="token punctuation">,</span><span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span>

TYPE_RequestPtr pOldRequest<span class="token punctuation">;</span>

<span class="token keyword">int</span>   __fastcall <span class="token function">HookRequest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> pthis<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span>edx<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> inBuf<span class="token punctuation">,</span> <span class="token keyword">int</span> inLen<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> outBuf<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span> outLen<span class="token punctuation">,</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;HookRequest:--------------------------&quot;</span> <span class="token operator">&lt;&lt;</span> pthis <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;,id=&quot;</span> <span class="token operator">&lt;&lt;</span> id<span class="token operator">&lt;&lt;</span><span class="token string">&quot;,a1=&quot;</span><span class="token operator">&lt;&lt;</span>a1<span class="token operator">&lt;&lt;</span><span class="token string">&quot;,a2=&quot;</span><span class="token operator">&lt;&lt;</span>a2<span class="token operator">&lt;&lt;</span><span class="token string">&quot;,a3=&quot;</span><span class="token operator">&lt;&lt;</span>a3 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;inLen=&quot;</span> <span class="token operator">&lt;&lt;</span> inLen <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;,outLen=&quot;</span> <span class="token operator">&lt;&lt;</span> outLen <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;inbuf=&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>inBuf <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;,outbuf=&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>outBuf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inBuf <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Hexdump</span><span class="token punctuation">(</span>inBuf<span class="token punctuation">,</span> inLen<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;inBuf is null&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>	
	<span class="token punctuation">}</span>
	ret<span class="token operator">=</span> <span class="token function">pOldRequest</span><span class="token punctuation">(</span>pthis<span class="token punctuation">,</span>edx<span class="token punctuation">,</span> id<span class="token punctuation">,</span> inBuf<span class="token punctuation">,</span> inLen<span class="token punctuation">,</span> outBuf<span class="token punctuation">,</span> outLen<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;outLen=&quot;</span> <span class="token operator">&lt;&lt;</span> outLen <span class="token operator">&lt;&lt;</span><span class="token string">&quot;,ret=&quot;</span><span class="token operator">&lt;&lt;</span>ret<span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token comment">//TestA ta;</span>
	<span class="token comment">//ta.Request(id, inBuf, inLen, outBuf, outLen, a1, a2, a3);</span>
	<span class="token comment">//testf(pthis, id, inBuf, inLen, outBuf, outLen, a1, a2, a3);</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>outBuf <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;outBuf: outL&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Hexdump</span><span class="token punctuation">(</span>outBuf<span class="token punctuation">,</span> outLen<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;outBuf is null&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


pOldRequest <span class="token operator">=</span><span class="token punctuation">(</span>TYPE_RequestPtr<span class="token punctuation">)</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandle</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;FLRPCLib&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;?Request@CFLRPCApi@@QAEHHPADH0AAHHHH@Z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Install the hook request</span>
	 result <span class="token operator">=</span> <span class="token function">LhInstallHook</span><span class="token punctuation">(</span>
		pOldRequest<span class="token punctuation">,</span>
		HookRequest<span class="token punctuation">,</span>
		<span class="token constant">NULL</span><span class="token punctuation">,</span>
		<span class="token operator">&amp;</span>hHook2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div>`,81),o=[e];function l(c,r,u,i,k,b){return a(),s("div",null,o)}var h=n(t,[["render",l]]);export{m as __pageData,h as default};
