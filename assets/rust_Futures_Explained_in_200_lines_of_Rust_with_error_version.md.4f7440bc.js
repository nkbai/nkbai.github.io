import{_ as n,c as s,o as a,a as p}from"./app.1b76eb5d.js";const d='{"title":"200\u884C\u4EE3\u7801\u8BB2\u900FRust Futures-\u6709bug\u7248\u672C","description":"","frontmatter":{"title":"200\u884C\u4EE3\u7801\u8BB2\u900FRust Futures-\u6709bug\u7248\u672C","date":"2020-04-09T03:57:03.000Z","draft":false,"tags":["rust"],"categories":["\u6280\u672F\u76F8\u5173"]},"headers":[{"level":2,"title":"\u4E00 \u5F15\u8A00","slug":"\u4E00-\u5F15\u8A00"},{"level":3,"title":"\u8FD9\u672C\u4E66\u6DB5\u76D6\u7684\u5185\u5BB9","slug":"\u8FD9\u672C\u4E66\u6DB5\u76D6\u7684\u5185\u5BB9"},{"level":3,"title":"\u9605\u8BFB\u7EC3\u4E60\u548C\u8FDB\u4E00\u6B65\u9605\u8BFB","slug":"\u9605\u8BFB\u7EC3\u4E60\u548C\u8FDB\u4E00\u6B65\u9605\u8BFB"},{"level":3,"title":"\u611F\u8C22","slug":"\u611F\u8C22"},{"level":2,"title":"\u4E8C \u80CC\u666F\u8D44\u6599","slug":"\u4E8C-\u80CC\u666F\u8D44\u6599"},{"level":3,"title":"\u7EBF\u7A0B","slug":"\u7EBF\u7A0B"},{"level":3,"title":"\u7EFF\u8272\u7EBF\u7A0B(Green threads)","slug":"\u7EFF\u8272\u7EBF\u7A0B-green-threads"},{"level":3,"title":"\u57FA\u4E8E\u56DE\u8C03\u7684\u65B9\u6CD5","slug":"\u57FA\u4E8E\u56DE\u8C03\u7684\u65B9\u6CD5"},{"level":3,"title":"\u4ECE\u56DE\u8C03\u5230\u627F\u8BFA (promises)","slug":"\u4ECE\u56DE\u8C03\u5230\u627F\u8BFA-promises"},{"level":2,"title":"\u4E09 Rust\u4E2D\u7684Futures","slug":"\u4E09-rust\u4E2D\u7684futures"},{"level":3,"title":"\u6982\u8FF0","slug":"\u6982\u8FF0"},{"level":3,"title":"Futures","slug":"futures"},{"level":3,"title":"Leaf futures","slug":"leaf-futures"},{"level":3,"title":"Non-leaf-futures","slug":"non-leaf-futures"},{"level":3,"title":"\u8FD0\u884C\u65F6(Runtimes)","slug":"\u8FD0\u884C\u65F6-runtimes"},{"level":3,"title":"Rust \u7684\u6807\u51C6\u5E93\u505A\u4E86\u4EC0\u4E48","slug":"rust-\u7684\u6807\u51C6\u5E93\u505A\u4E86\u4EC0\u4E48"},{"level":3,"title":"I/O\u5BC6\u96C6\u578B VS CPU\u5BC6\u96C6\u578B\u4EFB\u52A1","slug":"i-o\u5BC6\u96C6\u578B-vs-cpu\u5BC6\u96C6\u578B\u4EFB\u52A1"},{"level":3,"title":"\u5956\u52B1\u90E8\u5206","slug":"\u5956\u52B1\u90E8\u5206"},{"level":2,"title":"\u56DB \u5524\u9192\u5668\u548C\u4E0A\u4E0B\u6587(Waker and Context)","slug":"\u56DB-\u5524\u9192\u5668\u548C\u4E0A\u4E0B\u6587-waker-and-context"},{"level":3,"title":"\u6982\u8FF0","slug":"\u6982\u8FF0-1"},{"level":3,"title":"\u5524\u9192\u5668","slug":"\u5524\u9192\u5668"},{"level":3,"title":"\u7406\u89E3\u5524\u9192\u5668","slug":"\u7406\u89E3\u5524\u9192\u5668"},{"level":3,"title":"Rust\u4E2D\u7684\u80D6\u6307\u9488","slug":"rust\u4E2D\u7684\u80D6\u6307\u9488"},{"level":3,"title":"\u5956\u52B1\u90E8\u5206","slug":"\u5956\u52B1\u90E8\u5206-1"},{"level":2,"title":"\u4E94 \u751F\u6210\u5668\u548Casync/await","slug":"\u4E94-\u751F\u6210\u5668\u548Casync-await"},{"level":3,"title":"\u6982\u8FF0","slug":"\u6982\u8FF0-2"},{"level":3,"title":"\u4E3A\u4EC0\u4E48\u8981\u5B66\u4E60\u751F\u6210\u5668","slug":"\u4E3A\u4EC0\u4E48\u8981\u5B66\u4E60\u751F\u6210\u5668"},{"level":3,"title":"\u7EC4\u5408\u5B50(Combinators)","slug":"\u7EC4\u5408\u5B50-combinators"},{"level":3,"title":"\u65E0\u6808\u534F\u7A0B/\u751F\u6210\u5668","slug":"\u65E0\u6808\u534F\u7A0B-\u751F\u6210\u5668"},{"level":3,"title":"\u751F\u6210\u5668\u662F\u5982\u4F55\u5DE5\u4F5C\u7684","slug":"\u751F\u6210\u5668\u662F\u5982\u4F55\u5DE5\u4F5C\u7684"},{"level":3,"title":"\u5F02\u6B65\u548C\u751F\u6210\u5668","slug":"\u5F02\u6B65\u548C\u751F\u6210\u5668"},{"level":3,"title":"\u5956\u52B1\u90E8\u5206-\u6B63\u5728\u4F7F\u7528\u7684\u81EA\u5F15\u7528\u751F\u6210\u5668","slug":"\u5956\u52B1\u90E8\u5206-\u6B63\u5728\u4F7F\u7528\u7684\u81EA\u5F15\u7528\u751F\u6210\u5668"},{"level":2,"title":"\u516D Pin","slug":"\u516D-pin"},{"level":3,"title":"\u6982\u8FF0","slug":"\u6982\u8FF0-3"},{"level":3,"title":"\u5B9A\u4E49","slug":"\u5B9A\u4E49"},{"level":3,"title":"Pinning\u548C\u81EA\u5F15\u7528\u7ED3\u6784","slug":"pinning\u548C\u81EA\u5F15\u7528\u7ED3\u6784"},{"level":3,"title":"\u56FA\u5B9A\u5728\u6808\u4E0A","slug":"\u56FA\u5B9A\u5728\u6808\u4E0A"},{"level":3,"title":"\u56FA\u5B9A\u5728\u5806\u4E0A","slug":"\u56FA\u5B9A\u5728\u5806\u4E0A"},{"level":3,"title":"Pinning\u7684\u4E00\u4E9B\u5B9E\u7528\u89C4\u5219","slug":"pinning\u7684\u4E00\u4E9B\u5B9E\u7528\u89C4\u5219"},{"level":3,"title":"\u6620\u5C04/\u7ED3\u6784\u4F53\u7684\u56FA\u5B9A","slug":"\u6620\u5C04-\u7ED3\u6784\u4F53\u7684\u56FA\u5B9A"},{"level":3,"title":"Pin\u548CDrop","slug":"pin\u548Cdrop"},{"level":3,"title":"\u628A\u5B83\u4EEC\u653E\u5728\u4E00\u8D77","slug":"\u628A\u5B83\u4EEC\u653E\u5728\u4E00\u8D77"},{"level":3,"title":"\u5956\u52B1\u90E8\u5206","slug":"\u5956\u52B1\u90E8\u5206-2"},{"level":2,"title":"\u4E03 \u5B9E\u73B0Futures--\u4E3B\u8981\u4F8B\u5B50","slug":"\u4E03-\u5B9E\u73B0futures-\u4E3B\u8981\u4F8B\u5B50"},{"level":3,"title":"\u5B9E\u73B0\u6211\u4EEC\u81EA\u5DF1\u7684Futures","slug":"\u5B9E\u73B0\u6211\u4EEC\u81EA\u5DF1\u7684futures"},{"level":3,"title":"\u6267\u884C\u5668","slug":"\u6267\u884C\u5668"},{"level":3,"title":"Future\u7684\u6267\u884C","slug":"future\u7684\u6267\u884C"},{"level":3,"title":"Reactor","slug":"reactor"},{"level":3,"title":"Async/Await\u548C\u5E76\u53D1Async/Await","slug":"async-await\u548C\u5E76\u53D1async-await"},{"level":2,"title":"\u516B \u5B8C\u6574\u7684\u4F8B\u5B50","slug":"\u516B-\u5B8C\u6574\u7684\u4F8B\u5B50"},{"level":2,"title":"\u4E5D \u7ED3\u8BBA\u548C\u7EC3\u4E60","slug":"\u4E5D-\u7ED3\u8BBA\u548C\u7EC3\u4E60"},{"level":3,"title":"\u7F16\u7801park","slug":"\u7F16\u7801park"},{"level":3,"title":"\u7F16\u7801\u4F20\u9012reactor","slug":"\u7F16\u7801\u4F20\u9012reactor"},{"level":3,"title":"\u521B\u5EFA\u4E00\u4E2A\u66F4\u597D\u7684\u6267\u884C\u5668","slug":"\u521B\u5EFA\u4E00\u4E2A\u66F4\u597D\u7684\u6267\u884C\u5668"},{"level":3,"title":"\u8FDB\u4E00\u6B65\u9605\u8BFB","slug":"\u8FDB\u4E00\u6B65\u9605\u8BFB"},{"level":2,"title":"\u8F6C\u8F7D\u8BF4\u660E","slug":"\u8F6C\u8F7D\u8BF4\u660E"}],"relativePath":"rust/Futures_Explained_in_200_lines_of_Rust_with_error_version.md"}',t={},e=p(`<p><a href="https://cfsamson.github.io/books-futures-explained/introduction.html" target="_blank" rel="noopener noreferrer">\u539F\u6587\u5730\u5740 Futures Explained in 200 Lines of Rust</a></p><p>\u8BE5\u6587\u5B9E\u73B0\u5305\u542B\u4E86\u4E00\u4E2Abug,\u5982\u679C\u5BF9\u5B9E\u73B0\u8FC7\u7A0B\u672C\u8EAB\u611F\u5174\u8DA3,\u53EF\u4EE5\u9605\u8BFB\u5B8C\u6BD5\u540E,\u518D\u53BB\u5BF9\u6BD4<a href="./Futures_Explained_in_200_lines_of_Rust.html">\u4FEE\u590D\u540E\u7248\u672C</a>.</p><h2 id="\u4E00-\u5F15\u8A00" tabindex="-1">\u4E00 \u5F15\u8A00 <a class="header-anchor" href="#\u4E00-\u5F15\u8A00" aria-hidden="true">#</a></h2><p>\u8FD9\u672C\u4E66\u7684\u76EE\u7684\u662F\u7528\u4E00\u4E2A\u4F8B\u5B50\u9A71\u52A8\u7684\u65B9\u6CD5\u6765\u89E3\u91CARust\u4E2D\u7684Futures\uFF0C\u63A2\u7D22\u4E3A\u4EC0\u4E48\u4ED6\u4EEC\u88AB\u8BBE\u8BA1\u6210\u8FD9\u6837\uFF0C\u4EE5\u53CA\u4ED6\u4EEC\u5982\u4F55\u5DE5\u4F5C\u3002 \u6211\u4EEC\u8FD8\u5C06\u4ECB\u7ECD\u5728\u7F16\u7A0B\u4E2D\u5904\u7406\u5E76\u53D1\u6027\u65F6\u7684\u4E00\u4E9B\u66FF\u4EE3\u65B9\u6848\u3002</p><p>\u7406\u89E3\u8FD9\u672C\u4E66\u4E2D\u63CF\u8FF0\u7684\u7EC6\u8282\uFF0C \u4E0D\u9700\u8981\u4F7F\u7528Rust\u4E2D\u7684 futures\u6216async/await\u3002 \u8FD9\u662F\u4E3A\u90A3\u4E9B\u597D\u5947\u7684\u4EBA\u51C6\u5907\u7684\uFF0C\u4ED6\u4EEC\u60F3\u77E5\u9053\u8FD9\u4E00\u5207\u662F\u5982\u4F55\u8FD0\u4F5C\u7684\u3002</p><h3 id="\u8FD9\u672C\u4E66\u6DB5\u76D6\u7684\u5185\u5BB9" tabindex="-1">\u8FD9\u672C\u4E66\u6DB5\u76D6\u7684\u5185\u5BB9 <a class="header-anchor" href="#\u8FD9\u672C\u4E66\u6DB5\u76D6\u7684\u5185\u5BB9" aria-hidden="true">#</a></h3><p>\u8FD9\u672C\u4E66\u5C06\u8BD5\u56FE\u89E3\u91CA\u4F60\u53EF\u80FD\u60F3\u77E5\u9053\u7684\u4E00\u5207\uFF0C\u5305\u62EC\u4E0D\u540C\u7C7B\u578B\u7684\u6267\u884C\u5668(executor)\u548C\u8FD0\u884C\u65F6(runtime)\u7684\u4E3B\u9898\u3002 \u6211\u4EEC\u5C06\u5728\u672C\u4E66\u4E2D\u5B9E\u73B0\u4E00\u4E2A\u975E\u5E38\u7B80\u5355\u7684\u8FD0\u884C\u65F6\uFF0C\u4ECB\u7ECD\u4E00\u4E9B\u6982\u5FF5\uFF0C\u4F46\u8FD9\u5DF2\u7ECF\u8DB3\u591F\u5F00\u59CB\u4E86\u3002</p><p><a href="https://github.com/stjepang" target="_blank" rel="noopener noreferrer">Stjepan Glavina</a> \u53D1\u8868\u4E86\u4E00\u7CFB\u5217\u5173\u4E8E\u5F02\u6B65\u8FD0\u884C\u65F6\u548C\u6267\u884C\u5668\u7684\u4F18\u79C0\u6587\u7AE0\uFF0C\u5982\u679C\u8C23\u8A00\u5C5E\u5B9E\uFF0C\u90A3\u4E48\u5728\u4E0D\u4E45\u7684\u5C06\u6765\u4ED6\u4F1A\u53D1\u8868\u66F4\u591A\u7684\u6587\u7AE0\u3002</p><p>\u4F60\u5E94\u8BE5\u505A\u7684\u662F\u5148\u8BFB\u8FD9\u672C\u4E66\uFF0C\u7136\u540E\u7EE7\u7EED\u9605\u8BFB <a href="https://stjepang.github.io/" target="_blank" rel="noopener noreferrer">stejpang \u7684\u6587\u7AE0</a>\uFF0C\u4E86\u89E3\u66F4\u591A\u5173\u4E8E\u8FD0\u884C\u65F6\u4EE5\u53CA\u5B83\u4EEC\u662F\u5982\u4F55\u5DE5\u4F5C\u7684\uFF0C\u7279\u522B\u662F:</p><ol><li><a href="https://stjepang.github.io/2020/01/25/build-your-own-block-on.html" target="_blank" rel="noopener noreferrer">\u6784\u5EFA\u81EA\u7684block_on</a></li><li><a href="https://stjepang.github.io/2020/01/31/build-your-own-executor.html" target="_blank" rel="noopener noreferrer">\u6784\u5EFA\u81EA\u5DF1\u7684executor</a></li></ol><p>\u6211\u5C06\u81EA\u5DF1\u9650\u5236\u5728\u4E00\u4E2A200\u884C\u7684\u4E3B\u793A\u4F8B(\u56E0\u6B64\u624D\u6709\u4E86\u8FD9\u4E2A\u6807\u9898)\u4E2D\uFF0C\u4EE5\u9650\u5236\u8303\u56F4\u5E76\u4ECB\u7ECD\u4E00\u4E2A\u53EF\u4EE5\u8F7B\u677E\u8FDB\u4E00\u6B65\u7814\u7A76\u7684\u793A\u4F8B\u3002</p><p>\u7136\u800C\uFF0C\u6709\u5F88\u591A\u4E1C\u897F\u9700\u8981\u6D88\u5316\uFF0C\u8FD9\u5E76\u4E0D\u50CF\u6211\u6240\u8BF4\u7684\u90A3\u4E48\u7B80\u5355\uFF0C\u4F46\u662F\u6211\u4EEC\u4F1A\u4E00\u6B65\u4E00\u6B65\u6765\uFF0C\u6240\u4EE5\u559D\u676F\u8336\uFF0C\u653E\u677E\u4E00\u4E0B\u3002</p><blockquote><p>\u8FD9\u672C\u4E66\u662F\u5728\u5F00\u653E\u7684\uFF0C\u5E76\u6B22\u8FCE\u8D21\u732E\u3002 \u4F60\u53EF\u4EE5\u5728<a href="https://github.com/cfsamson/books-futures-explained" target="_blank" rel="noopener noreferrer">\u8FD9\u91CC\u627E\u5230\u8FD9\u672C\u4E66</a>\u3002 \u6700\u540E\u7684\u4F8B\u5B50\uFF0C\u4F60\u53EF\u4EE5<a href="https://github.com/cfsamson/examples-futures" target="_blank" rel="noopener noreferrer">\u514B\u9686\u6216\u590D\u5236</a>\u53EF\u4EE5\u5728\u8FD9\u91CC\u627E\u5230\u3002 \u4EFB\u4F55\u5EFA\u8BAE\u6216\u6539\u8FDB\u53EF\u4EE5\u5F52\u6863\u4E3A\u4E00\u4E2A\u516C\u5173\u6216\u5728\u95EE\u9898\u8FFD\u8E2A\u7684\u4E66\u3002 \u4E00\u5982\u65E2\u5F80\uFF0C\u6211\u4EEC\u6B22\u8FCE\u5404\u79CD\u5404\u6837\u7684\u53CD\u9988\u3002</p></blockquote><h3 id="\u9605\u8BFB\u7EC3\u4E60\u548C\u8FDB\u4E00\u6B65\u9605\u8BFB" tabindex="-1">\u9605\u8BFB\u7EC3\u4E60\u548C\u8FDB\u4E00\u6B65\u9605\u8BFB <a class="header-anchor" href="#\u9605\u8BFB\u7EC3\u4E60\u548C\u8FDB\u4E00\u6B65\u9605\u8BFB" aria-hidden="true">#</a></h3><p>\u5728<a href="#%E7%BB%93%E8%AE%BA%E5%92%8C%E7%BB%83%E4%B9%A0">\u6700\u540E\u4E00\u7AE0</a>)\u4E2D\uFF0C\u6211\u5192\u6627\u5730\u63D0\u51FA\u4E86\u4E00\u4E9B\u5C0F\u7EC3\u4E60\uFF0C\u5982\u679C\u4F60\u60F3\u8FDB\u4E00\u6B65\u63A2\u7D22\u7684\u8BDD\u3002</p><p>\u8FD9\u672C\u4E66\u4E5F\u662F\u6211\u5728 Rust \u4E2D\u5199\u7684\u5173\u4E8E\u5E76\u53D1\u7F16\u7A0B\u7684\u7B2C\u56DB\u672C\u4E66\u3002 \u5982\u679C\u4F60\u559C\u6B22\u5B83\uFF0C\u4F60\u53EF\u80FD\u4E5F\u60F3\u770B\u770B\u5176\u4ED6\u7684:</p><ul><li><a href="https://cfsamson.gitbook.io/green-threads-explained-in-200-lines-of-rust/" target="_blank" rel="noopener noreferrer">Green Threads Explained in 200 lines of rust</a></li><li><a href="https://cfsamson.github.io/book-exploring-async-basics/" target="_blank" rel="noopener noreferrer">The Node Experiment - Exploring Async Basics with Rust \u8282\u70B9\u5B9E\u9A8C\u2014\u2014\u7528Rust\u63A2\u7D22\u5F02\u6B65\u57FA\u7840</a></li><li><a href="https://cfsamsonbooks.gitbook.io/epoll-kqueue-iocp-explained/" target="_blank" rel="noopener noreferrer">Epoll, Kqueue and IOCP Explained with Rust \u7528 Rust \u89E3\u91CA Epoll\uFF0CKqueue \u548C IOCP</a></li></ul><h3 id="\u611F\u8C22" tabindex="-1">\u611F\u8C22 <a class="header-anchor" href="#\u611F\u8C22" aria-hidden="true">#</a></h3><p>\u6211\u60F3\u501F\u6B64\u673A\u4F1A\u611F\u8C22 mio\uFF0Ctokio\uFF0Casync std\uFF0CFutures\uFF0Clibc\uFF0Ccrossbeam \u80CC\u540E\u7684\u4EBA\u4EEC\uFF0C\u4ED6\u4EEC\u652F\u6491\u7740\u8FD9\u4E2A\u5F02\u6B65\u751F\u6001\u7CFB\u7EDF\uFF0C\u5374\u5F88\u5C11\u5728\u6211\u773C\u4E2D\u5F97\u5230\u8DB3\u591F\u7684\u8D5E\u626C\u3002</p><p>\u7279\u522B\u611F\u8C22 jonhoo\uFF0C\u4ED6\u5BF9\u6211\u8FD9\u672C\u4E66\u7684\u521D\u7A3F\u7ED9\u4E88\u4E86\u4E00\u4E9B\u6709\u4EF7\u503C\u7684\u53CD\u9988\u3002 \u4ED6\u8FD8\u6CA1\u6709\u8BFB\u5B8C\u6700\u7EC8\u7684\u6210\u54C1\uFF0C\u4F46\u662F\u6211\u4EEC\u5E94\u8BE5\u5411\u4ED6\u8868\u793A\u611F\u8C22\u3002</p><h2 id="\u4E8C-\u80CC\u666F\u8D44\u6599" tabindex="-1">\u4E8C \u80CC\u666F\u8D44\u6599 <a class="header-anchor" href="#\u4E8C-\u80CC\u666F\u8D44\u6599" aria-hidden="true">#</a></h2><p>\u5728\u6211\u4EEC\u6DF1\u5165\u7814\u7A76 Futures in Rust \u7684\u7EC6\u8282\u4E4B\u524D\uFF0C\u8BA9\u6211\u4EEC\u5FEB\u901F\u4E86\u89E3\u4E00\u4E0B\u5904\u7406\u5E76\u53D1\u7F16\u7A0B\u7684\u5404\u79CD\u65B9\u6CD5\uFF0C\u4EE5\u53CA\u6BCF\u79CD\u65B9\u6CD5\u7684\u4F18\u7F3A\u70B9\u3002</p><p>\u540C\u65F6\u5F53\u6D89\u53CA\u5230\u5E76\u53D1\u6027\u65F6,\u6211\u4EEC\u4E5F\u4F1A\u89E3\u91CA\u4E3A\u4EC0\u4E48\u8FD9\u4E48\u505A\uFF0C\u8FD9\u5C06\u4F7F\u6211\u4EEC\u66F4\u5BB9\u6613\u6DF1\u5165\u7406\u89E3Futures.</p><blockquote><p>\u4E3A\u4E86\u597D\u73A9\uFF0C\u6211\u5728\u5927\u591A\u6570\u793A\u4F8B\u4E2D\u6DFB\u52A0\u4E86\u4E00\u5C0F\u6BB5\u53EF\u8FD0\u884C\u4EE3\u7801\u3002 \u5982\u679C\u4F60\u50CF\u6211\u4E00\u6837\uFF0C\u4E8B\u60C5\u4F1A\u53D8\u5F97\u66F4\u6709\u8DA3\uFF0C\u4E5F\u8BB8\u4F60\u4F1A\u770B\u5230\u4E00\u4E9B\u4F60\u4ECE\u672A\u89C1\u8FC7\u7684\u4E1C\u897F\u3002</p></blockquote><h3 id="\u7EBF\u7A0B" tabindex="-1">\u7EBF\u7A0B <a class="header-anchor" href="#\u7EBF\u7A0B" aria-hidden="true">#</a></h3><p>\u73B0\u5728\uFF0C\u5B9E\u73B0\u8FD9\u4E00\u70B9\u7684\u4E00\u4E2A\u65B9\u6CD5\u5C31\u662F\u8BA9\u64CD\u4F5C\u7CFB\u7EDF\u4E3A\u6211\u4EEC\u5904\u7406\u597D\u4E00\u5207\u3002 \u6211\u4EEC\u53EA\u9700\u4E3A\u6BCF\u4E2A\u8981\u5B8C\u6210\u7684\u4EFB\u52A1\u751F\u6210\u4E00\u4E2A\u65B0\u7684\u64CD\u4F5C\u7CFB\u7EDF\u7EBF\u7A0B\uFF0C\u5E76\u50CF\u901A\u5E38\u90A3\u6837\u7F16\u5199\u4EE3\u7801\u3002</p><p>\u6211\u4EEC\u7528\u6765\u5904\u7406\u5E76\u53D1\u6027\u7684\u8FD0\u884C\u65F6\u5C31\u662F\u64CD\u4F5C\u7CFB\u7EDF\u672C\u8EAB\u3002</p><p>\u4F18\u70B9:</p><ul><li>\u7B80\u5355</li><li>\u6613\u7528</li><li>\u5728\u4EFB\u52A1\u4E4B\u95F4\u5207\u6362\u76F8\u5F53\u5FEB</li><li>\u4E0D\u9700\u8981\u4ED8\u51FA\u5373\u53EF\u5F97\u5230\u5E76\u884C\u652F\u6301</li></ul><p>\u7F3A\u70B9:</p><ul><li>\u64CD\u4F5C\u7CFB\u7EDF\u7EA7\u7EBF\u7A0B\u7684\u5806\u6808\u76F8\u5F53\u5927\u3002 \u5982\u679C\u540C\u65F6\u6709\u8BB8\u591A\u4EFB\u52A1\u7B49\u5F85(\u5C31\u50CF\u5728\u8D1F\u8F7D\u5F88\u91CD\u7684 web \u670D\u52A1\u5668\u4E2D\u90A3\u6837) \uFF0C\u90A3\u4E48\u5185\u5B58\u5C06\u5F88\u5FEB\u8017\u5C3D</li><li>\u8FD9\u6D89\u53CA\u5230\u5F88\u591A\u7CFB\u7EDF\u8C03\u7528\u3002\u5F53\u4EFB\u52A1\u6570\u91CF\u5F88\u9AD8\u65F6\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u975E\u5E38\u6602\u8D35</li><li>\u64CD\u4F5C\u7CFB\u7EDF\u6709\u5F88\u591A\u4E8B\u60C5\u9700\u8981\u5904\u7406\u3002 \u5B83\u53EF\u80FD\u4E0D\u4F1A\u50CF\u4F60\u5E0C\u671B\u7684\u90A3\u6837\u5FEB\u901F\u5730\u5207\u6362\u56DE\u7EBF\u7A0B</li><li>\u67D0\u4E9B\u7CFB\u7EDF\u53EF\u80FD\u4E0D\u652F\u6301\u7EBF\u7A0B</li></ul><p><strong>\u5728 Rust \u4E2D\u4F7F\u7528\u64CD\u4F5C\u7CFB\u7EDF\u7EBF\u7A0B\u770B\u8D77\u6765\u50CF\u8FD9\u6837:</strong></p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;So we start the program here!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;We create tasks which gets run when they&#39;re finished!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;We can even chain callbacks...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> t3 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;...like this!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;While our tasks are executing we can do other stuff here.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>\u64CD\u4F5C\u7CFB\u7EDF\u7EBF\u7A0B\u80AF\u5B9A\u6709\u4E00\u4E9B\u76F8\u5F53\u5927\u7684\u4F18\u52BF\u3002 \u8FD9\u4E5F\u662F\u4E3A\u4EC0\u4E48\u6240\u6709\u8FD9\u4E9B\u8BA8\u8BBA\u201C\u5F02\u6B65\u201D\u548C\u5E76\u53D1\u6027\u628A\u7EBF\u7A0B\u6446\u5728\u9996\u4F4D\uFF1F</p><p>\u9996\u5148\u3002 \u4E3A\u4E86\u4F7F\u8BA1\u7B97\u673A\u6709\u6548\u7387\uFF0C\u5B83\u4EEC\u9700\u8981\u591A\u4EFB\u52A1\u5904\u7406\u3002 \u4E00\u65E6\u4F60\u5F00\u59CB\u6DF1\u5165\u7814\u7A76(\u6BD4\u5982<a href="https://os.phil-opp.com/async-await/" target="_blank" rel="noopener noreferrer">\u64CD\u4F5C\u7CFB\u7EDF\u662F\u5982\u4F55\u5DE5\u4F5C\u7684</a>) \uFF0C\u4F60\u5C31\u4F1A\u53D1\u73B0\u5E76\u53D1\u65E0\u5904\u4E0D\u5728\u3002 \u8FD9\u662F\u6211\u4EEC\u505A\u4EFB\u4F55\u4E8B\u60C5\u7684\u57FA\u7840\u3002</p><p>\u5176\u6B21\uFF0C\u6211\u4EEC\u6709\u7F51\u7EDC\u3002</p><p>Webservers \u662F\u5173\u4E8EI/O\u548C\u5904\u7406\u5C0F\u4EFB\u52A1(\u8BF7\u6C42)\u7684\u3002 \u5F53\u5C0F\u4EFB\u52A1\u7684\u6570\u91CF\u5F88\u5927\u65F6\uFF0C\u7531\u4E8E\u5B83\u4EEC\u6240\u9700\u7684\u5185\u5B58\u548C\u521B\u5EFA\u65B0\u7EBF\u7A0B\u6240\u6D89\u53CA\u7684\u5F00\u9500\uFF0C\u5C31\u4E0D\u9002\u5408\u4ECA\u5929\u7684\u64CD\u4F5C\u7CFB\u7EDF\u7EBF\u7A0B\u3002</p><p>\u5982\u679C\u8D1F\u8F7D\u662F\u53EF\u53D8\u7684\uFF0C\u90A3\u4E48\u95EE\u9898\u5C31\u66F4\u5927\u4E86\uFF0C\u8FD9\u610F\u5473\u7740\u7A0B\u5E8F\u5728\u4EFB\u4F55\u65F6\u95F4\u70B9\u7684\u5F53\u524D\u4EFB\u52A1\u6570\u91CF\u90FD\u662F\u4E0D\u53EF\u9884\u6D4B\u7684\u3002 \u8FD9\u5C31\u662F\u4E3A\u4EC0\u4E48\u4ECA\u5929\u4F60\u4F1A\u770B\u5230\u5982\u6B64\u591A\u7684\u5F02\u6B65web\u6846\u67B6\u548C\u6570\u636E\u5E93\u9A71\u52A8\u7A0B\u5E8F\u3002</p><p>\u7136\u800C\u6709\u5927\u91CF\u7684\u95EE\u9898,\u6807\u51C6\u7684\u7EBF\u7A0B\u901A\u5E38\u662F\u6B63\u786E\u7684\u89E3\u51B3\u65B9\u6848\u3002 \u56E0\u6B64\u5728\u4F7F\u7528\u5F02\u6B65\u5E93\u4E4B\u524D\uFF0C\u8BF7\u4E09\u601D\u800C\u540E\u884C\u3002</p><p>\u73B0\u5728\uFF0C\u8BA9\u6211\u4EEC\u6765\u770B\u770B\u591A\u4EFB\u52A1\u5904\u7406\u7684\u5176\u4ED6\u9009\u9879\u3002 \u5B83\u4EEC\u90FD\u6709\u4E00\u4E2A\u5171\u540C\u70B9\uFF0C\u90A3\u5C31\u662F\u5B83\u4EEC\u5B9E\u73B0\u4E86\u4E00\u79CD\u591A\u4EFB\u52A1\u5904\u7406\u7684\u65B9\u5F0F\uFF0C\u5373\u62E5\u6709\u4E00\u4E2A\u201C\u7528\u6237\u754C\u9762\u201D\u8FD0\u884C\u65F6:</p><h3 id="\u7EFF\u8272\u7EBF\u7A0B-green-threads" tabindex="-1">\u7EFF\u8272\u7EBF\u7A0B(Green threads) <a class="header-anchor" href="#\u7EFF\u8272\u7EBF\u7A0B-green-threads" aria-hidden="true">#</a></h3><p>\u7EFF\u8272\u7EBF\u7A0B\u4F7F\u7528\u4E0E\u64CD\u4F5C\u7CFB\u7EDF\u76F8\u540C\u7684\u673A\u5236\uFF0C\u4E3A\u6BCF\u4E2A\u4EFB\u52A1\u521B\u5EFA\u4E00\u4E2A\u7EBF\u7A0B\uFF0C\u8BBE\u7F6E\u4E00\u4E2A\u5806\u6808\uFF0C\u4FDD\u5B58 CPU \u72B6\u6001\uFF0C\u5E76\u901A\u8FC7\u201C\u4E0A\u4E0B\u6587\u5207\u6362\u201D\u4ECE\u4E00\u4E2A\u4EFB\u52A1(\u7EBF\u7A0B)\u8DF3\u8F6C\u5230\u53E6\u4E00\u4E2A\u4EFB\u52A1(\u7EBF\u7A0B)\u3002</p><p>\u6211\u4EEC\u5C06\u63A7\u5236\u6743\u4EA4\u7ED9\u8C03\u5EA6\u7A0B\u5E8F(\u5728\u8FD9\u6837\u7684\u7CFB\u7EDF\u4E2D\uFF0C\u8C03\u5EA6\u7A0B\u5E8F\u662F\u8FD0\u884C\u65F6\u7684\u6838\u5FC3\u90E8\u5206) \uFF0C\u7136\u540E\u8C03\u5EA6\u7A0B\u5E8F\u7EE7\u7EED\u8FD0\u884C\u4E0D\u540C\u7684\u4EFB\u52A1\u3002</p><p>Rust\u66FE\u7ECF\u652F\u6301\u7EFF\u8272\u7EBF\u7A0B\uFF0C\u4F46\u4ED6\u4EEC\u5B83\u8FBE\u52301.0\u4E4B\u524D\u88AB\u5220\u9664\u4E86\uFF0C \u6267\u884C\u72B6\u6001\u5B58\u50A8\u5728\u6BCF\u4E2A\u6808\u4E2D\uFF0C\u56E0\u6B64\u5728\u8FD9\u6837\u7684\u89E3\u51B3\u65B9\u6848\u4E2D\u4E0D\u9700\u8981<code>async</code>,<code>await</code>,<code>Futures</code> \u6216\u8005<code>Pin</code>\u3002</p><p>\u5178\u578B\u7684\u6D41\u7A0B\u662F\u8FD9\u6837\u7684:</p><ol><li>\u8FD0\u884C\u4E00\u4E9B\u975E\u963B\u585E\u4EE3\u7801</li><li>\u5BF9\u67D0\u4E9B\u5916\u90E8\u8D44\u6E90\u8FDB\u884C\u963B\u585E\u8C03\u7528</li><li>\u8DF3\u8F6C\u5230main\u201D\u7EBF\u7A0B\uFF0C\u8BE5\u7EBF\u7A0B\u8C03\u5EA6\u4E00\u4E2A\u4E0D\u540C\u7684\u7EBF\u7A0B\u6765\u8FD0\u884C\uFF0C\u5E76\u201C\u8DF3\u8F6C\u201D\u5230\u8BE5\u6808\u4E2D</li><li>\u5728\u65B0\u7EBF\u7A0B\u4E0A\u8FD0\u884C\u4E00\u4E9B\u975E\u963B\u585E\u4EE3\u7801\uFF0C\u76F4\u5230\u65B0\u7684\u963B\u585E\u8C03\u7528\u6216\u4EFB\u52A1\u5B8C\u6210</li><li>\u201C\u8DF3\u8F6C\u201D\u56DE\u5230\u201Cmain&quot;\u7EBF\u7A0B \uFF0C\u8C03\u5EA6\u4E00\u4E2A\u65B0\u7EBF\u7A0B\uFF0C\u8FD9\u4E2A\u65B0\u7EBF\u7A0B\u7684\u72B6\u6001\u5DF2\u7ECF\u662F<code>Ready</code>,\u7136\u540E\u8DF3\u8F6C\u5230\u8BE5\u7EBF\u7A0B</li></ol><p>\u8FD9\u4E9B\u201C\u8DF3\u8F6C\u201D\u88AB\u79F0\u4E3A\u4E0A\u4E0B\u6587\u5207\u6362\uFF0C\u5F53\u4F60\u9605\u8BFB\u8FD9\u7BC7\u6587\u7AE0\u7684\u65F6\u5019\uFF0C\u4F60\u7684\u64CD\u4F5C\u7CFB\u7EDF\u6BCF\u79D2\u949F\u90FD\u4F1A\u505A\u5F88\u591A\u6B21\u3002</p><p>\u4F18\u70B9:</p><ol><li>\u6808\u5927\u5C0F\u53EF\u80FD\u9700\u8981\u589E\u957F,\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\u4E0D\u5BB9\u6613,\u5E76\u4E14\u4F1A\u6709\u6210\u672C.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li><li>\u5B83\u4E0D\u662F\u4E00\u4E2A\u96F6\u6210\u672C\u62BD\u8C61(\u8FD9\u4E5F\u662FRust\u65E9\u671F\u6709\u7EFF\u8272\u7EBF\u7A0B,\u540E\u6765\u5220\u9664\u7684\u539F\u56E0\u4E4B\u4E00)</li><li>\u5982\u679C\u60A8\u60F3\u8981\u652F\u6301\u8BB8\u591A\u4E0D\u540C\u7684\u5E73\u53F0\uFF0C\u5C31\u5F88\u96BE\u6B63\u786E\u5B9E\u73B0</li></ol><p>\u4E00\u4E2A\u7EFF\u8272\u7EBF\u7A0B\u7684\u4F8B\u5B50\u53EF\u4EE5\u662F\u8FD9\u6837\u7684:</p><blockquote><p>\u4E0B\u9762\u7684\u4F8B\u5B50\u662F\u4E00\u4E2A\u6539\u7F16\u7684\u4F8B\u5B50\uFF0C\u6765\u81EA\u6211\u4E4B\u524D\u5199\u7684\u4E00\u672C<a href="https://cfsamson.gitbook.io/green-threads-explained-in-200-lines-of-rust/" target="_blank" rel="noopener noreferrer">200\u884CRust\u8BF4\u6E05\u7EFF\u8272\u7EBF\u7A0B</a>\u7684 gitbook\u3002 \u5982\u679C\u4F60\u60F3\u77E5\u9053\u53D1\u751F\u4E86\u4EC0\u4E48\uFF0C\u4F60\u4F1A\u53D1\u73B0\u4E66\u4E2D\u8BE6\u7EC6\u5730\u89E3\u91CA\u4E86\u4E00\u5207\u3002 \u4E0B\u9762\u7684\u4EE3\u7801\u975E\u5E38\u4E0D\u5B89\u5168\uFF0C\u53EA\u662F\u4E3A\u4E86\u5C55\u793A\u4E00\u4E2A\u771F\u5B9E\u7684\u4F8B\u5B50\u3002 \u8FD9\u7EDD\u4E0D\u662F\u4E3A\u4E86\u5C55\u793A\u201C\u6700\u4F73\u5B9E\u8DF5\u201D\u3002 \u8FD9\u6837\u6211\u4EEC\u5C31\u80FD\u8FBE\u6210\u5171\u8BC6\u4E86\u3002</p></blockquote><div class="language-rust line-numbers-mode"><pre><code> <span class="token attribute attr-name">#![feature(asm, naked_functions)]</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>ptr<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">DEFAULT_STACK_SIZE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">MAX_THREADS</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">mut</span> <span class="token constant">RUNTIME</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Runtime</span> <span class="token punctuation">{</span>
    threads<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Thread</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    current<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

  <span class="token attribute attr-name">#[derive(PartialEq, Eq, Debug)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>
    <span class="token class-name">Available</span><span class="token punctuation">,</span>
    <span class="token class-name">Running</span><span class="token punctuation">,</span>
    <span class="token class-name">Ready</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Thread</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    stack<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    ctx<span class="token punctuation">:</span> <span class="token class-name">ThreadContext</span><span class="token punctuation">,</span>
    state<span class="token punctuation">:</span> <span class="token class-name">State</span><span class="token punctuation">,</span>
    task<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

 <span class="token attribute attr-name">#[derive(Debug, Default)]</span>
 <span class="token attribute attr-name">#[repr(C)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">ThreadContext</span> <span class="token punctuation">{</span>
    rsp<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    r15<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    r14<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    r13<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    r12<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    rbx<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    rbp<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    thread_ptr<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">,</span>
            stack<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0_u8</span><span class="token punctuation">;</span> <span class="token constant">DEFAULT_STACK_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            ctx<span class="token punctuation">:</span> <span class="token class-name">ThreadContext</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            state<span class="token punctuation">:</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Available</span><span class="token punctuation">,</span>
            task<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Runtime</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> base_thread <span class="token operator">=</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            stack<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0_u8</span><span class="token punctuation">;</span> <span class="token constant">DEFAULT_STACK_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            ctx<span class="token punctuation">:</span> <span class="token class-name">ThreadContext</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            state<span class="token punctuation">:</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Running</span><span class="token punctuation">,</span>
            task<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> threads <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>base_thread<span class="token punctuation">]</span><span class="token punctuation">;</span>
        threads<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>thread_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>threads<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">Thread</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> available_threads<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Thread</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token constant">MAX_THREADS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>i<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Thread</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threads<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> available_threads<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Runtime</span> <span class="token punctuation">{</span>
            threads<span class="token punctuation">,</span>
            current<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> r_ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">Runtime</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
            <span class="token constant">RUNTIME</span> <span class="token operator">=</span> r_ptr <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">!</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">t_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token namespace">std<span class="token punctuation">::</span>process<span class="token punctuation">::</span></span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">t_return</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>current <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>threads<span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Available</span><span class="token punctuation">;</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">t_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">t_yield</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> pos <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>current<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token keyword">self</span><span class="token punctuation">.</span>threads<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Ready</span> <span class="token punctuation">{</span>
            pos <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> pos <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>threads<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> pos <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>current <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>threads<span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Available</span> <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>threads<span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">self</span><span class="token punctuation">.</span>threads<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Running</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> old_pos <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>current<span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>current <span class="token operator">=</span> pos<span class="token punctuation">;</span>

        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token function">switch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>threads<span class="token punctuation">[</span>old_pos<span class="token punctuation">]</span><span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>threads<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">spawn</span><span class="token operator">&lt;</span><span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">&#39;static</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>f<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> rt_ptr <span class="token operator">=</span> <span class="token constant">RUNTIME</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">Runtime</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> available <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>rt_ptr<span class="token punctuation">)</span>
                <span class="token punctuation">.</span>threads
                <span class="token punctuation">.</span><span class="token function">iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>t<span class="token closure-punctuation punctuation">|</span></span> t<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Available</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;no available thread.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
            <span class="token keyword">let</span> size <span class="token operator">=</span> available<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> s_ptr <span class="token operator">=</span> available<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            available<span class="token punctuation">.</span>task <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            available<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>thread_ptr <span class="token operator">=</span> available <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">Thread</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span>s_ptr<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> guard <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">ptr<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span>s_ptr<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> call <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            available<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>rsp <span class="token operator">=</span> s_ptr<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>
            available<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">call</span><span class="token punctuation">(</span>thread<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> thread <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>thread <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">Thread</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>thread<span class="token punctuation">.</span>task <span class="token punctuation">{</span>
        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

 <span class="token attribute attr-name">#[naked]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> rt_ptr <span class="token operator">=</span> <span class="token constant">RUNTIME</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">Runtime</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> rt <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span>rt_ptr<span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;THREAD {} FINISHED.&quot;</span><span class="token punctuation">,</span> rt<span class="token punctuation">.</span>threads<span class="token punctuation">[</span>rt<span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rt<span class="token punctuation">.</span><span class="token function">t_return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">yield_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> rt_ptr <span class="token operator">=</span> <span class="token constant">RUNTIME</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">Runtime</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>rt_ptr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">t_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

 <span class="token attribute attr-name">#[naked]</span>
 <span class="token attribute attr-name">#[inline(never)]</span>
<span class="token keyword">unsafe</span> <span class="token keyword">fn</span> <span class="token function-definition function">switch</span><span class="token punctuation">(</span>old<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">ThreadContext</span><span class="token punctuation">,</span> new<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">ThreadContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">asm!</span><span class="token punctuation">(</span><span class="token string">&quot;
        mov     %rsp, 0x00($0)
        mov     %r15, 0x08($0)
        mov     %r14, 0x10($0)
        mov     %r13, 0x18($0)
        mov     %r12, 0x20($0)
        mov     %rbx, 0x28($0)
        mov     %rbp, 0x30($0)

        mov     0x00($1), %rsp
        mov     0x08($1), %r15
        mov     0x10($1), %r14
        mov     0x18($1), %r13
        mov     0x20($1), %r12
        mov     0x28($1), %rbx
        mov     0x30($1), %rbp
        mov     0x38($1), %rdi
        ret
        &quot;</span>
    <span class="token punctuation">:</span>
    <span class="token punctuation">:</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span>
    <span class="token punctuation">:</span>
    <span class="token punctuation">:</span> <span class="token string">&quot;alignstack&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 <span class="token attribute attr-name">#[cfg(not(windows))]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    runtime<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I haven&#39;t implemented a timer in this example.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">yield_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Finally, notice how the tasks are executed concurrently.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;But we can still nest tasks...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;...like this!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    runtime<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 <span class="token attribute attr-name">#[cfg(windows)]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    runtime<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I haven&#39;t implemented a timer in this example.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">yield_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Finally, notice how the tasks are executed concurrently.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;But we can still nest tasks...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;...like this!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    runtime<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br></div></div><p>\u8FD8\u5728\u575A\u6301\u9605\u8BFB\u672C\u4E66\uFF1F \u5F88\u597D\u3002 \u5982\u679C\u4E0A\u9762\u7684\u4EE3\u7801\u5F88\u96BE\u7406\u89E3\uFF0C\u4E0D\u8981\u611F\u5230\u6CAE\u4E27\u3002 \u5982\u679C\u4E0D\u662F\u6211\u81EA\u5DF1\u5199\u7684\uFF0C\u6211\u53EF\u80FD\u4E5F\u4F1A\u6709\u540C\u6837\u7684\u611F\u89C9\u3002 \u4F60\u968F\u65F6\u53EF\u4EE5\u56DE\u53BB\u8BFB,\u7A0D\u540E\u6211\u8FD8\u4F1A\u89E3\u91CA\u3002</p><h3 id="\u57FA\u4E8E\u56DE\u8C03\u7684\u65B9\u6CD5" tabindex="-1">\u57FA\u4E8E\u56DE\u8C03\u7684\u65B9\u6CD5 <a class="header-anchor" href="#\u57FA\u4E8E\u56DE\u8C03\u7684\u65B9\u6CD5" aria-hidden="true">#</a></h3><p>\u4F60\u53EF\u80FD\u5DF2\u7ECF\u77E5\u9053\u6211\u4EEC\u63A5\u4E0B\u6765\u8981\u8C08\u8BBAJavascript\uFF0C\u6211\u60F3\u5927\u591A\u6570\u4EBA\u90FD\u77E5\u9053\u3002</p><blockquote><p>\u5982\u679C\u4F60\u63A5\u89E6\u8FC7 Javascript \u56DE\u8C03\u4F1A\u8BA9\u4F60\u66F4\u65E9\u60A3\u4E0A PTSD\uFF0C\u90A3\u4E48\u73B0\u5728\u95ED\u4E0A\u773C\u775B\uFF0C\u5411\u4E0B\u6EDA\u52A82-3\u79D2\u3002 \u4F60\u4F1A\u5728\u90A3\u91CC\u627E\u5230\u4E00\u4E2A\u94FE\u63A5\uFF0C\u5E26\u4F60\u5230\u5B89\u5168\u7684\u5730\u65B9\u3002</p></blockquote><p>\u57FA\u4E8E\u56DE\u8C03\u7684\u65B9\u6CD5\u80CC\u540E\u7684\u6574\u4E2A\u601D\u60F3\u5C31\u662F\u4FDD\u5B58\u4E00\u4E2A\u6307\u5411\u4E00\u7EC4\u6307\u4EE4\u7684\u6307\u9488\uFF0C\u8FD9\u4E9B\u6307\u4EE4\u6211\u4EEC\u5E0C\u671B\u4EE5\u540E\u5728\u4EE5\u540E\u9700\u8981\u7684\u65F6\u5019\u8FD0\u884C\u3002 \u9488\u5BF9Rust\uFF0C\u8FD9\u5C06\u662F\u4E00\u4E2A\u95ED\u5305\u3002 \u5728\u4E0B\u9762\u7684\u793A\u4F8B\u4E2D\uFF0C\u6211\u4EEC\u5C06\u6B64\u4FE1\u606F\u4FDD\u5B58\u5728<code>HashMap</code>\u4E2D\uFF0C\u4F46\u8FD9\u5E76\u4E0D\u662F\u552F\u4E00\u7684\u9009\u9879\u3002</p><p>\u4E0D\u6D89\u53CA\u7EBF\u7A0B\u4F5C\u4E3A\u5B9E\u73B0\u5E76\u53D1\u6027\u7684\u4E3B\u8981\u65B9\u6CD5\u7684\u57FA\u672C\u601D\u60F3\u662F\u5176\u4F59\u65B9\u6CD5\u7684\u5171\u540C\u70B9\u3002 \u5305\u62EC\u6211\u4EEC\u5F88\u5FEB\u5C31\u4F1A\u8BB2\u5230\u7684 Rust \u4ECA\u5929\u4F7F\u7528\u7684\u90A3\u4E2A\u3002</p><p>\u4F18\u70B9:</p><ol><li>\u5927\u591A\u6570\u8BED\u8A00\u4E2D\u6613\u4E8E\u5B9E\u73B0</li><li>\u6CA1\u6709\u4E0A\u4E0B\u6587\u5207\u6362</li><li>\u76F8\u5BF9\u8F83\u4F4E\u7684\u5185\u5B58\u5F00\u9500(\u5728\u5927\u591A\u6570\u60C5\u51B5\u4E0B)</li></ol><p>\u7F3A\u70B9:</p><ol><li>\u6BCF\u4E2A\u4EFB\u52A1\u90FD\u5FC5\u987B\u4FDD\u5B58\u5B83\u4EE5\u540E\u9700\u8981\u7684\u72B6\u6001\uFF0C\u5185\u5B58\u4F7F\u7528\u91CF\u5C06\u968F\u7740\u4E00\u7CFB\u5217\u8BA1\u7B97\u4E2D\u56DE\u8C03\u7684\u6570\u91CF\u7EBF\u6027\u589E\u957F</li><li>\u5F88\u96BE\u7406\u89E3\uFF0C\u5F88\u591A\u4EBA\u5DF2\u7ECF\u77E5\u9053\u8FD9\u5C31\u662F\u201C\u56DE\u8C03\u5730\u72F1\u201D</li><li>\u8FD9\u662F\u4E00\u79CD\u975E\u5E38\u4E0D\u540C\u7684\u7F16\u5199\u7A0B\u5E8F\u7684\u65B9\u5F0F\uFF0C\u9700\u8981\u5927\u91CF\u7684\u91CD\u5199\u624D\u80FD\u4ECE\u201C\u6B63\u5E38\u201D\u7684\u7A0B\u5E8F\u6D41\u8F6C\u53D8\u4E3A\u4F7F\u7528\u201C\u57FA\u4E8E\u56DE\u8C03\u201D\u7684\u7A0B\u5E8F\u6D41</li><li>\u5728 Rust \u4F7F\u7528\u8FD9\u79CD\u65B9\u6CD5\u65F6\uFF0C\u4EFB\u52A1\u4E4B\u95F4\u7684\u72B6\u6001\u5171\u4EAB\u662F\u4E00\u4E2A\u96BE\u9898\uFF0C\u56E0\u4E3A\u5B83\u7684\u6240\u6709\u6743\u6A21\u578B</li></ol><p>\u4E00\u4E2A\u6781\u5176\u7B80\u5355\u7684\u57FA\u4E8E\u56DE\u8C03\u65B9\u6CD5\u7684\u4F8B\u5B50\u662F:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">program_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;So we start the program here!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;We create tasks with a callback that runs once the task finished!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;We can even chain sub-tasks...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;...like this!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;While our tasks are executing we can do other stuff instead of waiting.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">RT</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>rt<span class="token closure-punctuation punctuation">|</span></span> rt<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>program_main<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span></span><span class="token punctuation">{</span>channel<span class="token punctuation">,</span> <span class="token class-name">Receiver</span><span class="token punctuation">,</span> <span class="token class-name">Sender</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">,</span> <span class="token namespace">collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">,</span> thread<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property">thread_local!</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token constant">RT</span><span class="token punctuation">:</span> <span class="token class-name">Runtime</span> <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Runtime</span> <span class="token punctuation">{</span>
    callbacks<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">FnOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    next_id<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    evt_sender<span class="token punctuation">:</span> <span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    evt_reciever<span class="token punctuation">:</span> <span class="token class-name">Receiver</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">set_timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> cb<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">FnOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">&#39;static</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">RT</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>rt<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token operator">*</span>rt<span class="token punctuation">.</span>next_id<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>rt<span class="token punctuation">.</span>next_id<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        rt<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> evt_sender <span class="token operator">=</span> rt<span class="token punctuation">.</span>evt_sender<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            evt_sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Runtime</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token punctuation">(</span>evt_sender<span class="token punctuation">,</span> evt_reciever<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Runtime</span> <span class="token punctuation">{</span>
            callbacks<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            next_id<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            evt_sender<span class="token punctuation">,</span>
            evt_reciever<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> program<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> evt_id <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>evt_reciever <span class="token punctuation">{</span>
            <span class="token keyword">let</span> cb <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>evt_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><p>\u6211\u4EEC\u4FDD\u6301\u8FD9\u79CD\u8D85\u7EA7\u7B80\u5355\u7684\u65B9\u6CD5\uFF0C\u60A8\u53EF\u80FD\u60F3\u77E5\u9053\u8FD9\u79CD\u65B9\u6CD5\u548C\u4F7F\u7528 OS \u7EBF\u7A0B\u76F4\u63A5\u5C06\u56DE\u8C03\u4F20\u9012\u7ED9 OS \u7EBF\u7A0B\u7684\u65B9\u6CD5\u4E4B\u95F4\u6709\u4EC0\u4E48\u533A\u522B\u3002 \u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\uFF0C\u56DE\u8C03\u662F\u5728\u540C\u4E00\u4E2A\u7EBF\u7A0B\u4E0A\u8FD0\u884C\u7684\u3002 \u8FD9\u4E2A\u4F8B\u5B50\u4E2D,\u6211\u4EEC\u521B\u5EFA\u7684 OS \u7EBF\u7A0B\u57FA\u672C\u4E0A\u53EA\u662F\u7528\u4F5C\u8BA1\u65F6\u5668\uFF0C\u4F46\u53EF\u4EE5\u8868\u793A\u4EFB\u4F55\u7C7B\u578B\u7684\u6211\u4EEC\u5C06\u4E0D\u5F97\u4E0D\u7B49\u5F85\u7684\u8D44\u6E90\u3002</p><h3 id="\u4ECE\u56DE\u8C03\u5230\u627F\u8BFA-promises" tabindex="-1">\u4ECE\u56DE\u8C03\u5230\u627F\u8BFA (promises) <a class="header-anchor" href="#\u4ECE\u56DE\u8C03\u5230\u627F\u8BFA-promises" aria-hidden="true">#</a></h3><p>\u4F60\u73B0\u5728\u53EF\u80FD\u4F1A\u60F3\uFF0C\u6211\u4EEC\u4EC0\u4E48\u65F6\u5019\u624D\u80FD\u8C08\u8BBA\u672A\u6765\uFF1F</p><p>\u597D\u5427\uFF0C\u6211\u4EEC\u5C31\u5FEB\u5230\u4E86\u3002\u4F60\u770B\uFF0C<code>promises</code>\u3001<code>futures</code>\u548C\u5176\u4ED6\u5EF6\u8FDF\u8BA1\u7B97\u7684\u540D\u79F0\u7ECF\u5E38\u88AB\u4EA4\u66FF\u4F7F\u7528\u3002</p><p>\u5B83\u4EEC\u4E4B\u95F4\u6709\u5F62\u5F0F\u4E0A\u7684\u533A\u522B\uFF0C\u4F46\u662F\u6211\u4EEC\u5728\u8FD9\u91CC\u4E0D\u4F1A\u6D89\u53CA\uFF0C\u4F46\u662F\u503C\u5F97\u89E3\u91CA\u4E00\u4E0B<code>promises</code>\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u88AB\u5E7F\u6CDB\u4F7F\u7528\u5728 Javascript \u4E2D\uFF0C\u5E76\u4E14\u4E0E Rusts Futures \u6709\u5F88\u591A\u5171\u540C\u4E4B\u5904\u3002</p><p>\u9996\u5148\uFF0C\u8BB8\u591A\u8BED\u8A00\u90FD\u6709<code>promises</code>\u7684\u6982\u5FF5\uFF0C\u4F46\u6211\u5C06\u5728\u4E0B\u9762\u7684\u4F8B\u5B50\u4E2D\u4F7F\u7528\u6765\u81EA Javascript \u7684\u6982\u5FF5\u3002</p><p>\u627F\u8BFA\u662F\u89E3\u51B3\u56DE\u8C03\u5E26\u6765\u7684\u590D\u6742\u6027\u7684\u4E00\u79CD\u65B9\u6CD5\u3002</p><p>\u6BD4\u5982,\u4E0B\u9762\u7684\u4F8B\u5B50:</p><div class="language-js line-numbers-mode"><pre><code><span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m the last one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u53EF\u4EE5\u66FF\u6362\u4E3Apromise:</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&quot;<span class="token constant">I</span>&#39;m the last one<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u6DF1\u5165\u539F\u7406\u53EF\u4EE5\u770B\u5230\u53D8\u5316\u66F4\u4E3A\u663E\u8457\u3002 \u60A8\u53EF\u4EE5\u770B\u5230\uFF0Cpromises \u8FD4\u56DE\u7684\u72B6\u6001\u673A\u53EF\u4EE5\u5904\u4E8E\u4EE5\u4E0B\u4E09\u79CD\u72B6\u6001\u4E4B\u4E00: <code>pending</code>\u3001 <code>fulfilled</code> \u6216 <code>rejected</code>\u3002</p><p>\u5F53\u6211\u4EEC\u5728\u4E0A\u9762\u7684\u4F8B\u5B50\u4E2D\u8C03\u7528<code>timer (200)</code>\u65F6\uFF0C\u6211\u4EEC\u5F97\u5230\u4E00\u4E2A\u72B6\u6001<code>pending</code>\u7684\u627F\u8BFA\u3002</p><p>\u7531\u4E8E\u627F\u8BFA\u88AB\u91CD\u5199\u4E3A\u72B6\u6001\u673A\uFF0C\u5B83\u4EEC\u8FD8\u63D0\u4F9B\u4E86\u4E00\u79CD\u66F4\u597D\u7684\u8BED\u6CD5\uFF0C\u5141\u8BB8\u6211\u4EEC\u50CF\u4E0B\u9762\u8FD9\u6837\u7F16\u5199\u6700\u540E\u4E00\u4E2A\u793A\u4F8B:</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m the last one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u53EF\u4EE5\u5C06 run \u51FD\u6570\u89C6\u4E3A\u4E00\u4E2A\u7531\u51E0\u4E2A\u5B50\u4EFB\u52A1\u7EC4\u6210\u7684\u53EF\u6267\u884C\u4EFB\u52A1\u3002 \u5728\u6BCF\u4E2A<code>await</code>\u70B9\u4E0A\uFF0C\u5B83\u90FD\u5C06\u63A7\u5236\u6743\u4EA4\u7ED9\u8C03\u5EA6\u7A0B\u5E8F(\u5728\u672C\u4F8B\u4E2D\u662F\u4F17\u6240\u5468\u77E5\u7684 Javascript \u4E8B\u4EF6\u5FAA\u73AF)\u3002</p><p>\u4E00\u65E6\u5176\u4E2D\u4E00\u4E2A\u5B50\u4EFB\u52A1\u5C06\u72B6\u6001\u66F4\u6539\u4E3A<code>fulfilled</code>\u6216<code>rejected</code>\uFF0C\u5219\u8BA1\u5212\u7EE7\u7EED\u6267\u884C\u4E0B\u4E00\u6B65\u3002</p><p>\u4ECE\u8BED\u6CD5\u4E0A\u8BB2\uFF0CRusts Futures 0.1\u5F88\u50CF\u4E0A\u9762\u7684\u627F\u8BFA\u793A\u4F8B\uFF0CRusts Futures 0.3\u5F88\u50CF\u6211\u4EEC\u4E0A\u4E00\u4E2A\u793A\u4F8B\u4E2D\u7684 async / await\u3002</p><p>\u8FD9\u4E5F\u662F\u4E0E Rusts Futures \u76F8\u4F3C\u7684\u5730\u65B9\u3002 \u6211\u4EEC\u8FD9\u6837\u505A\u7684\u539F\u56E0\u662F\u901A\u8FC7\u4E0A\u9762\u7684\u4ECB\u7ECD,\u66F4\u52A0\u6DF1\u523B\u7684\u7406\u89E3Rust\u7684Futures\u3002</p><blockquote><p>\u4E3A\u4E86\u907F\u514D\u4EE5\u540E\u7684\u6DF7\u6DC6: \u6709\u4E00\u70B9\u4F60\u5E94\u8BE5\u77E5\u9053\u3002 Java script\u7684\u627F\u8BFA\u662F\u7ACB\u5373\u6267\u884C(early evaluated)\u7684\u3002 \u8FD9\u610F\u5473\u7740\u4E00\u65E6\u5B83\u88AB\u521B\u5EFA\uFF0C\u5B83\u5C31\u5F00\u59CB\u8FD0\u884C\u4E00\u4E2A\u4EFB\u52A1\u3002 \u4E0E\u6B64\u76F8\u53CD,Rust\u7684Futures\u662F\u5EF6\u8FDF\u6267\u884C(lazy evaluated)\u3002 \u9664\u975E\u8F6E\u8BE2(poll)\u4E00\u6B21,\u5426\u5219\u4EC0\u4E48\u4E8B\u90FD\u4E0D\u4F1A\u53D1\u751F\u3002</p></blockquote><h2 id="\u4E09-rust\u4E2D\u7684futures" tabindex="-1">\u4E09 Rust\u4E2D\u7684Futures <a class="header-anchor" href="#\u4E09-rust\u4E2D\u7684futures" aria-hidden="true">#</a></h2><h3 id="\u6982\u8FF0" tabindex="-1">\u6982\u8FF0 <a class="header-anchor" href="#\u6982\u8FF0" aria-hidden="true">#</a></h3><ol><li>Rust\u4E2D\u5E76\u53D1\u6027\u7684\u9AD8\u7EA7\u4ECB\u7ECD</li><li>\u4E86\u89E3 Rust \u5728\u4F7F\u7528\u5F02\u6B65\u4EE3\u7801\u65F6\u80FD\u63D0\u4F9B\u4EC0\u4E48\uFF0C\u4E0D\u80FD\u63D0\u4F9B\u4EC0\u4E48</li><li>\u4E86\u89E3\u4E3A\u4EC0\u4E48\u6211\u4EEC\u9700\u8981 Rust \u7684\u8FD0\u884C\u65F6\u5E93</li><li>\u7406\u89E3\u201Cleaf-future\u201D\u548C\u201Cnon-leaf-future\u201D\u7684\u533A\u522B</li><li>\u4E86\u89E3\u5982\u4F55\u5904\u7406 CPU \u5BC6\u96C6\u578B\u4EFB\u52A1</li></ol><h3 id="futures" tabindex="-1">Futures <a class="header-anchor" href="#futures" aria-hidden="true">#</a></h3><p>\u4EC0\u4E48\u662F<code>Future</code>? <code>Future</code>\u662F\u4E00\u4E9B\u5C06\u5728\u672A\u6765\u5B8C\u6210\u7684\u64CD\u4F5C\u3002 Rust\u4E2D\u7684\u5F02\u6B65\u5B9E\u73B0\u57FA\u4E8E\u8F6E\u8BE2,\u6BCF\u4E2A\u5F02\u6B65\u4EFB\u52A1\u5206\u6210\u4E09\u4E2A\u9636\u6BB5:</p><ol><li>\u8F6E\u8BE2\u9636\u6BB5(The Poll phase). \u4E00\u4E2A<code>Future</code>\u88AB\u8F6E\u8BE2\u540E,\u4F1A\u5F00\u59CB\u6267\u884C,\u76F4\u5230\u88AB\u963B\u585E. \u6211\u4EEC\u7ECF\u5E38\u628A\u8F6E\u8BE2\u4E00\u4E2AFuture\u8FD9\u90E8\u5206\u79F0\u4E4B\u4E3A\u6267\u884C\u5668(executor)</li><li>\u7B49\u5F85\u9636\u6BB5. \u4E8B\u4EF6\u6E90(\u901A\u5E38\u79F0\u4E3Areactor)\u6CE8\u518C\u7B49\u5F85\u4E00\u4E2A\u4E8B\u4EF6\u53D1\u751F\uFF0C\u5E76\u786E\u4FDD\u5F53\u8BE5\u4E8B\u4EF6\u51C6\u5907\u597D\u65F6\u5524\u9192\u76F8\u5E94\u7684<code>Future</code></li><li>\u5524\u9192\u9636\u6BB5. \u4E8B\u4EF6\u53D1\u751F,\u76F8\u5E94\u7684<code>Future</code>\u88AB\u5524\u9192\u3002 \u73B0\u5728\u8F6E\u5230\u6267\u884C\u5668(executor),\u5C31\u662F\u7B2C\u4E00\u6B65\u4E2D\u7684\u90A3\u4E2A\u6267\u884C\u5668\uFF0C\u8C03\u5EA6<code>Future</code>\u518D\u6B21\u88AB\u8F6E\u8BE2\uFF0C\u5E76\u5411\u524D\u8D70\u4E00\u6B65\uFF0C\u76F4\u5230\u5B83\u5B8C\u6210\u6216\u8FBE\u5230\u4E00\u4E2A\u963B\u585E\u70B9\uFF0C\u4E0D\u80FD\u518D\u5411\u524D\u8D70, \u5982\u6B64\u5F80\u590D,\u76F4\u5230\u6700\u7EC8\u5B8C\u6210.</li></ol><p>\u5F53\u6211\u4EEC\u8C08\u8BBA<code>Future</code>\u7684\u65F6\u5019\uFF0C\u6211\u53D1\u73B0\u5728\u65E9\u671F\u533A\u5206<code>non-leaf-future</code>\u548C<code>leaf-future</code>\u662F\u5F88\u6709\u7528\u7684\uFF0C\u56E0\u4E3A\u5B9E\u9645\u4E0A\u5B83\u4EEC\u5F7C\u6B64\u5F88\u4E0D\u4E00\u6837\u3002</p><h3 id="leaf-futures" tabindex="-1">Leaf futures <a class="header-anchor" href="#leaf-futures" aria-hidden="true">#</a></h3><p>\u7531\u8FD0\u884C\u65F6\u521B\u5EFA<code>leaf futures</code>\uFF0C\u5B83\u5C31\u50CF\u5957\u63A5\u5B57\u4E00\u6837,\u4EE3\u8868\u7740\u4E00\u79CD\u8D44\u6E90.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">// stream is a **leaf-future**</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> stream <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token class-name">TcpStream</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u5BF9\u8FD9\u4E9B\u8D44\u6E90\u7684\u64CD\u4F5C\uFF0C\u6BD4\u5982\u5957\u63A5\u5B57\u4E0A\u7684 Read \u64CD\u4F5C\uFF0C\u5C06\u662F\u975E\u963B\u585E\u7684\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u6211\u4EEC\u79F0\u4E4B\u4E3A<code>leaf-future</code>\u7684Future.\u4E4B\u6240\u4EE5\u79F0\u4E4B\u4E3A<code>leaf-future</code>,\u662F\u56E0\u4E3A\u8FD9\u662F\u6211\u4EEC\u5B9E\u9645\u4E0A\u6B63\u5728\u7B49\u5F85\u7684Future.</p><p>\u9664\u975E\u4F60\u6B63\u5728\u7F16\u5199\u4E00\u4E2A\u8FD0\u884C\u65F6\uFF0C\u5426\u5219\u4F60\u4E0D\u592A\u53EF\u80FD\u81EA\u5DF1\u5B9E\u73B0\u4E00\u4E2A<code>leaf-future</code>\uFF0C\u4F46\u662F\u6211\u4EEC\u5C06\u5728\u672C\u4E66\u4E2D\u8BE6\u7EC6\u4ECB\u7ECD\u5B83\u4EEC\u662F\u5982\u4F55\u6784\u9020\u7684\u3002</p><p>\u60A8\u4E5F\u4E0D\u592A\u53EF\u80FD\u5C06 <code>leaf-future</code> \u4F20\u9012\u7ED9\u8FD0\u884C\u65F6\uFF0C\u7136\u540E\u5355\u72EC\u8FD0\u884C\u5B83\u76F4\u5230\u5B8C\u6210\uFF0C\u8FD9\u4E00\u70B9\u60A8\u53EF\u4EE5\u901A\u8FC7\u9605\u8BFB\u4E0B\u4E00\u6BB5\u6765\u7406\u89E3\u3002</p><h3 id="non-leaf-futures" tabindex="-1">Non-leaf-futures <a class="header-anchor" href="#non-leaf-futures" aria-hidden="true">#</a></h3><p>Non-leaf-futures\u6307\u7684\u662F\u90A3\u4E9B\u6211\u4EEC\u7528<code>async</code>\u5173\u952E\u5B57\u521B\u5EFA\u7684Future.</p><p>\u5F02\u6B65\u7A0B\u5E8F\u7684\u5927\u90E8\u5206\u662FNon-leaf-futures\uFF0C\u8FD9\u662F\u4E00\u79CD\u53EF\u6682\u505C\u7684\u8BA1\u7B97\u3002 \u8FD9\u662F\u4E00\u4E2A\u91CD\u8981\u7684\u533A\u522B\uFF0C\u56E0\u4E3A\u8FD9\u4E9B<code>Future</code>\u4EE3\u8868\u4E00\u7EC4\u64CD\u4F5C\u3002 \u901A\u5E38\uFF0C\u8FD9\u6837\u7684\u4EFB\u52A1\u7531<code>await</code> \u4E00\u7CFB\u5217<code>leaf-future</code>\u7EC4\u6210.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">// Non-leaf-future</span>
<span class="token keyword">let</span> non_leaf <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> stream <span class="token operator">=</span> <span class="token class-name">TcpStream</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &lt;- yield</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;connected!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">b&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- yield</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;message sent!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u8FD9\u4E9B\u4EFB\u52A1\u7684\u5173\u952E\u662F\uFF0C\u5B83\u4EEC\u80FD\u591F\u5C06\u63A7\u5236\u6743\u4EA4\u7ED9\u8FD0\u884C\u65F6\u7684\u8C03\u5EA6\u7A0B\u5E8F\uFF0C\u7136\u540E\u5728\u7A0D\u540E\u505C\u6B62\u7684\u5730\u65B9\u7EE7\u7EED\u6267\u884C\u3002 \u4E0E<code>leaf-future</code>\u76F8\u6BD4\uFF0C\u8FD9\u4E9BFuture\u672C\u8EAB\u5E76\u4E0D\u4EE3\u8868I/O\u8D44\u6E90\u3002 \u5F53\u6211\u4EEC\u5BF9\u8FD9\u4E9BFuture\u8FDB\u884C\u8F6E\u8BE2\u65F6, \u6709\u53EF\u80FD\u4F1A\u8FD0\u884C\u4E00\u6BB5\u65F6\u95F4\u6216\u8005\u56E0\u4E3A\u7B49\u5F85\u76F8\u5173\u8D44\u6E90\u800C\u8BA9\u5EA6\u7ED9\u8C03\u5EA6\u5668,\u7136\u540E\u7B49\u5F85\u76F8\u5173\u8D44\u6E90ready\u7684\u65F6\u5019\u5524\u9192\u81EA\u5DF1.</p><h3 id="\u8FD0\u884C\u65F6-runtimes" tabindex="-1">\u8FD0\u884C\u65F6(Runtimes) <a class="header-anchor" href="#\u8FD0\u884C\u65F6-runtimes" aria-hidden="true">#</a></h3><p>\u50CF c # \uFF0CJavaScript\uFF0CJava\uFF0CGO \u548C\u8BB8\u591A\u5176\u4ED6\u8BED\u8A00\u90FD\u6709\u4E00\u4E2A\u5904\u7406\u5E76\u53D1\u7684\u8FD0\u884C\u65F6\u3002 \u6240\u4EE5\u5982\u679C\u4F60\u6765\u81EA\u8FD9\u4E9B\u8BED\u8A00\u4E2D\u7684\u4E00\u79CD\uFF0C\u8FD9\u5BF9\u4F60\u6765\u8BF4\u53EF\u80FD\u4F1A\u6709\u70B9\u5947\u602A\u3002</p><p>Rust \u4E0E\u8FD9\u4E9B\u8BED\u8A00\u7684\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E Rust \u6CA1\u6709\u5904\u7406\u5E76\u53D1\u6027\u7684\u8FD0\u884C\u65F6\uFF0C\u56E0\u6B64\u60A8\u9700\u8981\u4F7F\u7528\u4E00\u4E2A\u4E3A\u60A8\u63D0\u4F9B\u6B64\u529F\u80FD\u7684\u5E93\u3002</p><p>\u5F88\u591A\u590D\u6742\u6027\u5F52\u56E0\u4E8E Futures \u5B9E\u9645\u4E0A\u662F\u6765\u6E90\u4E8E\u8FD0\u884C\u65F6\u7684\u590D\u6742\u6027\uFF0C\u521B\u5EFA\u4E00\u4E2A\u6709\u6548\u7684\u8FD0\u884C\u65F6\u662F\u56F0\u96BE\u7684\u3002 \u5B66\u4E60\u5982\u4F55\u6B63\u786E\u4F7F\u7528\u4E00\u4E2A\u4E5F\u9700\u8981\u76F8\u5F53\u591A\u7684\u52AA\u529B\uFF0C\u4F46\u662F\u4F60\u4F1A\u770B\u5230\u8FD9\u4E9B\u7C7B\u578B\u7684\u8FD0\u884C\u65F6\u4E4B\u95F4\u6709\u51E0\u4E2A\u76F8\u4F3C\u4E4B\u5904\uFF0C\u6240\u4EE5\u5B66\u4E60\u4E00\u4E2A\u53EF\u4EE5\u4F7F\u5B66\u4E60\u4E0B\u4E00\u4E2A\u66F4\u5BB9\u6613\u3002</p><p>Rust \u548C\u5176\u4ED6\u8BED\u8A00\u7684\u533A\u522B\u5728\u4E8E\uFF0C\u5728\u9009\u62E9\u8FD0\u884C\u65F6\u65F6\uFF0C\u60A8\u5FC5\u987B\u8FDB\u884C\u4E3B\u52A8\u9009\u62E9\u3002\u5927\u591A\u6570\u60C5\u51B5\u4E0B\uFF0C\u5728\u5176\u4ED6\u8BED\u8A00\u4E2D\uFF0C\u4F60\u53EA\u4F1A\u4F7F\u7528\u63D0\u4F9B\u7ED9\u4F60\u7684\u90A3\u4E00\u79CD\u3002</p><p>\u5F02\u6B65\u8FD0\u884C\u65F6\u53EF\u4EE5\u5206\u4E3A\u4E24\u90E8\u5206:</p><ol><li>\u6267\u884C\u5668(The Executor)</li><li>reactor (The Reactor)</li></ol><p>\u5F53 Rusts Futures \u88AB\u8BBE\u8BA1\u51FA\u6765\u7684\u65F6\u5019\uFF0C\u6709\u4E00\u4E2A\u613F\u671B\uFF0C\u90A3\u5C31\u662F\u5C06\u901A\u77E5<code>Future</code>\u5B83\u53EF\u4EE5\u505A\u66F4\u591A\u5DE5\u4F5C\u7684\u5DE5\u4F5C\u4E0E<code>Future</code>\u5B9E\u9645\u505A\u5DE5\u4F5C\u5206\u5F00\u3002</p><p>\u4F60\u53EF\u4EE5\u8BA4\u4E3A\u524D\u8005\u662Freactor\u7684\u5DE5\u4F5C\uFF0C\u540E\u8005\u662F\u6267\u884C\u5668\u7684\u5DE5\u4F5C\u3002 \u8FD0\u884C\u65F6\u7684\u8FD9\u4E24\u4E2A\u90E8\u5206\u4F7F\u7528 <code>Waker</code>\u8FDB\u884C\u4EA4\u4E92\u3002</p><p>\u5199\u8FD9\u7BC7\u6587\u7AE0\u7684\u65F6\u5019\uFF0C\u672A\u6765\u6700\u53D7\u6B22\u8FCE\u7684\u4E24\u4E2A\u8FD0\u884C\u65F6\u662F:</p><ol><li><a href="https://github.com/async-rs/async-std" target="_blank" rel="noopener noreferrer">async-std</a></li><li><a href="https://github.com/tokio-rs/tokio" target="_blank" rel="noopener noreferrer">Tokio</a></li></ol><h3 id="rust-\u7684\u6807\u51C6\u5E93\u505A\u4E86\u4EC0\u4E48" tabindex="-1">Rust \u7684\u6807\u51C6\u5E93\u505A\u4E86\u4EC0\u4E48 <a class="header-anchor" href="#rust-\u7684\u6807\u51C6\u5E93\u505A\u4E86\u4EC0\u4E48" aria-hidden="true">#</a></h3><ol><li>\u4E00\u4E2A\u516C\u5171\u63A5\u53E3\uFF0C<code>Future trait</code></li><li>\u4E00\u4E2A\u7B26\u5408\u4EBA\u4F53\u5DE5\u7A0B\u5B66\u7684\u65B9\u6CD5\u521B\u5EFA\u4EFB\u52A1, \u53EF\u4EE5\u901A\u8FC7async\u548Cawait\u5173\u952E\u5B57\u8FDB\u884C\u6682\u505C\u548C\u6062\u590D<code>Future</code></li><li><code>Waker</code>\u63A5\u53E3, \u53EF\u4EE5\u5524\u9192\u6682\u505C\u7684<code>Future</code></li></ol><p>\u8FD9\u5C31\u662FRust\u6807\u51C6\u5E93\u6240\u505A\u7684\u3002 \u6B63\u5982\u4F60\u6240\u770B\u5230\u7684\uFF0C\u4E0D\u5305\u62EC\u5F02\u6B65I/O\u7684\u5B9A\u4E49,\u8FD9\u4E9B\u5F02\u6B65\u4EFB\u52A1\u662F\u5982\u4F55\u88AB\u521B\u5EFA\u7684,\u5982\u4F55\u8FD0\u884C\u7684\u3002</p><h3 id="i-o\u5BC6\u96C6\u578B-vs-cpu\u5BC6\u96C6\u578B\u4EFB\u52A1" tabindex="-1">I/O\u5BC6\u96C6\u578B VS CPU\u5BC6\u96C6\u578B\u4EFB\u52A1 <a class="header-anchor" href="#i-o\u5BC6\u96C6\u578B-vs-cpu\u5BC6\u96C6\u578B\u4EFB\u52A1" aria-hidden="true">#</a></h3><p>\u6B63\u5982\u4F60\u4EEC\u73B0\u5728\u6240\u77E5\u9053\u7684\uFF0C\u4F60\u4EEC\u901A\u5E38\u6240\u5199\u7684\u662F<code>Non-leaf-futures</code>\u3002 \u8BA9\u6211\u4EEC\u4EE5 pseudo-rust \u4E3A\u4F8B\u6765\u770B\u4E00\u4E0B\u8FD9\u4E2A\u5F02\u6B65\u5757:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">let</span> non_leaf <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> stream <span class="token operator">=</span> <span class="token class-name">TcpStream</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- yield</span>
    
    <span class="token comment">// request a large dataset</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>get_dataset_request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- yield</span>
    
    <span class="token comment">// wait for the dataset</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> response <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- yield</span>

    <span class="token comment">// do some CPU-intensive analysis on the dataset</span>
    <span class="token keyword">let</span> report <span class="token operator">=</span> <span class="token namespace">analyzer<span class="token punctuation">::</span></span><span class="token function">analyze_data</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// send the results back</span>
    stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>report<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- yield</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u73B0\u5728\uFF0C\u6B63\u5982\u60A8\u5C06\u770B\u5230\u7684\uFF0C\u5F53\u6211\u4EEC\u4ECB\u7ECD Futures \u7684\u5DE5\u4F5C\u539F\u7406\u65F6\uFF0C\u4E24\u4E2A<code>yield</code>\u4E4B\u95F4\u7684\u4EE3\u7801\u4E0E\u6211\u4EEC\u7684\u6267\u884C\u5668\u5728\u540C\u4E00\u4E2A\u7EBF\u7A0B\u4E0A\u8FD0\u884C\u3002</p><p>\u8FD9\u610F\u5473\u7740\u5F53\u6211\u4EEC\u5206\u6790\u5668\u5904\u7406\u6570\u636E\u96C6\u65F6\uFF0C\u6267\u884C\u5668\u5FD9\u4E8E\u8BA1\u7B97\u800C\u4E0D\u662F\u5904\u7406\u65B0\u7684\u8BF7\u6C42\u3002</p><p>\u5E78\u8FD0\u7684\u662F\uFF0C\u6709\u51E0\u79CD\u65B9\u6CD5\u53EF\u4EE5\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\uFF0C\u8FD9\u5E76\u4E0D\u56F0\u96BE\uFF0C\u4F46\u662F\u4F60\u5FC5\u987B\u610F\u8BC6\u5230:</p><ol><li>\u6211\u4EEC\u53EF\u4EE5\u521B\u5EFA\u4E00\u4E2A\u65B0\u7684<code>leaf future</code>\uFF0C\u5B83\u5C06\u6211\u4EEC\u7684\u4EFB\u52A1\u53D1\u9001\u5230\u53E6\u4E00\u4E2A\u7EBF\u7A0B\uFF0C\u5E76\u5728\u4EFB\u52A1\u5B8C\u6210\u65F6\u89E3\u6790\u3002 \u6211\u4EEC\u53EF\u4EE5\u50CF\u7B49\u5F85\u5176\u4ED6Future\u4E00\u6837\u7B49\u5F85\u8FD9\u4E2A<code>leaf-future</code>\u3002</li><li>\u8FD0\u884C\u65F6\u53EF\u4EE5\u6709\u67D0\u79CD\u7C7B\u578B\u7684\u7BA1\u7406\u7A0B\u5E8F\u6765\u76D1\u89C6\u4E0D\u540C\u7684\u4EFB\u52A1\u5360\u7528\u591A\u5C11\u65F6\u95F4\uFF0C\u5E76\u5C06\u6267\u884C\u5668\u672C\u8EAB\u79FB\u52A8\u5230\u4E0D\u540C\u7684\u7EBF\u7A0B\uFF0C\u8FD9\u6837\u5373\u4F7F\u6211\u4EEC\u7684\u5206\u6790\u7A0B\u5E8F\u4EFB\u52A1\u963B\u585E\u4E86\u539F\u59CB\u7684\u6267\u884C\u7A0B\u5E8F\u7EBF\u7A0B\uFF0C\u5B83\u4E5F\u53EF\u4EE5\u7EE7\u7EED\u8FD0\u884C\u3002</li><li>\u60A8\u53EF\u4EE5\u81EA\u5DF1\u521B\u5EFA\u4E00\u4E2A\u4E0E\u8FD0\u884C\u65F6\u517C\u5BB9\u7684<code>reactor</code>\uFF0C\u4EE5\u60A8\u8BA4\u4E3A\u5408\u9002\u7684\u4EFB\u4F55\u65B9\u5F0F\u8FDB\u884C\u5206\u6790\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u53EF\u4EE5\u7B49\u5F85\u7684\u672A\u6765\u3002</li></ol><p>\u73B0\u5728\uFF0C#1\u662F\u901A\u5E38\u7684\u5904\u7406\u65B9\u5F0F\uFF0C\u4F46\u662F\u4E00\u4E9B\u6267\u884C\u5668\u4E5F\u5B9E\u73B0\u4E86#2\u3002 2\u7684\u95EE\u9898\u662F\uFF0C\u5982\u679C\u4F60\u5207\u6362\u8FD0\u884C\u65F6\uFF0C\u4F60\u9700\u8981\u786E\u4FDD\u5B83\u4E5F\u652F\u6301\u8FD9\u79CD\u76D1\u7763\uFF0C\u5426\u5219\u4F60\u6700\u7EC8\u4F1A\u963B\u585E\u6267\u884C\u8005\u3002</p><p>\u65B9\u5F0F#3\u66F4\u591A\u7684\u662F\u7406\u8BBA\u4E0A\u7684\u91CD\u8981\u6027\uFF0C\u901A\u5E38\u60A8\u4F1A\u5F88\u4E50\u610F\u5C06\u4EFB\u52A1\u53D1\u9001\u5230\u591A\u6570\u8FD0\u884C\u65F6\u63D0\u4F9B\u7684\u7EBF\u7A0B\u6C60\u3002</p><p>\u5927\u591A\u6570\u6267\u884C\u5668\u90FD\u53EF\u4EE5\u4F7F\u7528\u8BF8\u5982 spawn blocking \u4E4B\u7C7B\u7684\u65B9\u6CD5\u6765\u5B8C\u6210#1\u3002</p><p>\u8FD9\u4E9B\u65B9\u6CD5\u5C06\u4EFB\u52A1\u53D1\u9001\u5230\u8FD0\u884C\u65F6\u521B\u5EFA\u7684\u7EBF\u7A0B\u6C60\uFF0C\u5728\u8BE5\u7EBF\u7A0B\u6C60\u4E2D\uFF0C\u60A8\u53EF\u4EE5\u6267\u884C cpu \u5BC6\u96C6\u578B\u4EFB\u52A1\uFF0C\u4E5F\u53EF\u4EE5\u6267\u884C\u8FD0\u884C\u65F6\u4E0D\u652F\u6301\u7684\u201C\u963B\u585E\u201D\u4EFB\u52A1\u3002</p><p>\u73B0\u5728\uFF0C\u6709\u4E86\u8FD9\u4E9B\u77E5\u8BC6\uFF0C\u4F60\u5DF2\u7ECF\u5728\u4E00\u4E2A\u5F88\u597D\u7684\u65B9\u5F0F\u6765\u7406\u89E3<code>Future</code>\uFF0C\u4F46\u6211\u4EEC\u4E0D\u4F1A\u505C\u6B62\uFF0C\u6709\u5F88\u591A\u7EC6\u8282\u9700\u8981\u8BA8\u8BBA\u3002</p><p>\u4F11\u606F\u4E00\u4E0B\u6216\u559D\u676F\u5496\u5561\uFF0C\u51C6\u5907\u597D\u6211\u4EEC\u8FDB\u5165\u4E0B\u4E00\u7AE0\u7684\u6DF1\u5EA6\u63A2\u7D22\u3002</p><h3 id="\u5956\u52B1\u90E8\u5206" tabindex="-1">\u5956\u52B1\u90E8\u5206 <a class="header-anchor" href="#\u5956\u52B1\u90E8\u5206" aria-hidden="true">#</a></h3><p>\u5982\u679C\u4F60\u53D1\u73B0\u5E76\u53D1\u548C\u5F02\u6B65\u7F16\u7A0B\u7684\u6982\u5FF5\u4E00\u822C\u6765\u8BF4\u4EE4\u4EBA\u56F0\u60D1\uFF0C\u6211\u77E5\u9053\u4F60\u662F\u4ECE\u54EA\u91CC\u6765\u7684\uFF0C\u6211\u5DF2\u7ECF\u5199\u4E86\u4E00\u4E9B\u8D44\u6E90\uFF0C\u8BD5\u56FE\u7ED9\u51FA\u4E00\u4E2A\u9AD8\u5C42\u6B21\u7684\u6982\u8FF0\uFF0C\u8FD9\u5C06\u4F7F\u4E4B\u540E\u66F4\u5BB9\u6613\u5B66\u4E60 Rusts Futures:</p><ul><li><a href="https://cfsamson.github.io/book-exploring-async-basics/1_concurrent_vs_parallel.html" target="_blank" rel="noopener noreferrer">Async Basics - The difference between concurrency and parallelism \u5F02\u6B65\u57FA\u7840-\u5E76\u53D1\u548C\u5E76\u884C\u4E4B\u95F4\u7684\u533A\u522B</a></li><li><a href="https://cfsamson.github.io/book-exploring-async-basics/2_async_history.html" target="_blank" rel="noopener noreferrer">Async Basics - Async history \u5F02\u6B65\u57FA\u7840-\u5F02\u6B65\u5386\u53F2</a></li><li><a href="https://cfsamson.github.io/book-exploring-async-basics/5_strategies_for_handling_io.html" target="_blank" rel="noopener noreferrer">Async Basics - Strategies for handling I/O \u5F02\u6B65\u57FA\u7840-\u5904\u7406 i / o \u7684\u7B56\u7565</a></li><li><a href="https://cfsamson.github.io/book-exploring-async-basics/6_epoll_kqueue_iocp.html" target="_blank" rel="noopener noreferrer">Async Basics - Epoll, Kqueue and IOCP \u5F02\u6B65\u57FA\u7840-Epoll\uFF0CKqueue \u548C IOCP</a></li></ul><p>\u901A\u8FC7\u7814\u7A76<code>Future</code>\u6765\u5B66\u4E60\u8FD9\u4E9B\u6982\u5FF5\u4F1A\u8BA9\u5B83\u53D8\u5F97\u6BD4\u5B9E\u9645\u9700\u8981\u96BE\u5F97\u591A\uFF0C\u6240\u4EE5\u5982\u679C\u4F60\u6709\u70B9\u4E0D\u786E\u5B9A\u7684\u8BDD\uFF0C\u7EE7\u7EED\u8BFB\u8FD9\u4E9B\u7AE0\u8282\u3002</p><p>\u4F60\u56DE\u6765\u7684\u65F6\u5019\u6211\u5C31\u5728\u8FD9\u513F\u3002</p><p>\u5982\u679C\u4F60\u89C9\u5F97\u4F60\u5DF2\u7ECF\u638C\u63E1\u4E86\u57FA\u672C\u77E5\u8BC6\uFF0C\u90A3\u4E48\u8BA9\u6211\u4EEC\u5F00\u59CB\u884C\u52A8\u5427\uFF01</p><h2 id="\u56DB-\u5524\u9192\u5668\u548C\u4E0A\u4E0B\u6587-waker-and-context" tabindex="-1">\u56DB \u5524\u9192\u5668\u548C\u4E0A\u4E0B\u6587(Waker and Context) <a class="header-anchor" href="#\u56DB-\u5524\u9192\u5668\u548C\u4E0A\u4E0B\u6587-waker-and-context" aria-hidden="true">#</a></h2><h3 id="\u6982\u8FF0-1" tabindex="-1">\u6982\u8FF0 <a class="header-anchor" href="#\u6982\u8FF0-1" aria-hidden="true">#</a></h3><ol><li>\u4E86\u89E3 Waker \u5BF9\u8C61\u662F\u5982\u4F55\u6784\u9020\u7684</li><li>\u4E86\u89E3\u8FD0\u884C\u65F6\u5982\u4F55\u77E5\u9053<code>leaf-future</code>\u4F55\u65F6\u53EF\u4EE5\u6062\u590D</li><li>\u4E86\u89E3\u52A8\u6001\u5206\u53D1\u7684\u57FA\u7840\u77E5\u8BC6\u548Ctrait\u5BF9\u8C61</li></ol><p><code>Waker</code>\u7C7B\u578B\u5728<a href="https://github.com/rust-lang/rfcs/blob/master/text/2592-futures.md#waking-up" target="_blank" rel="noopener noreferrer">RFC#2592</a>\u4E2D\u4ECB\u7ECD.</p><h3 id="\u5524\u9192\u5668" tabindex="-1">\u5524\u9192\u5668 <a class="header-anchor" href="#\u5524\u9192\u5668" aria-hidden="true">#</a></h3><p><code>Waker</code>\u7C7B\u578B\u5141\u8BB8\u5728\u8FD0\u884C\u65F6\u7684reactor \u90E8\u5206\u548C\u6267\u884C\u5668\u90E8\u5206\u4E4B\u95F4\u8FDB\u884C\u677E\u6563\u8026\u5408\u3002</p><p>\u901A\u8FC7\u4F7F\u7528\u4E0D\u4E0E<code>Future</code>\u6267\u884C\u7ED1\u5B9A\u7684\u5524\u9192\u673A\u5236\uFF0C\u8FD0\u884C\u65F6\u5B9E\u73B0\u8005\u53EF\u4EE5\u63D0\u51FA\u6709\u8DA3\u7684\u65B0\u5524\u9192\u673A\u5236\u3002 \u4F8B\u5982\uFF0C\u53EF\u4EE5\u751F\u6210\u4E00\u4E2A\u7EBF\u7A0B\u6765\u6267\u884C\u4E00\u4E9B\u5DE5\u4F5C\uFF0C\u8FD9\u4E9B\u5DE5\u4F5C\u7ED3\u675F\u65F6\u901A\u77E5<code>Future</code>\uFF0C\u8FD9\u5B8C\u5168\u72EC\u7ACB\u4E8E\u5F53\u524D\u7684\u8FD0\u884C\u65F6\u3002</p><p>\u5982\u679C\u6CA1\u6709\u5524\u9192\u7A0B\u5E8F\uFF0C\u6267\u884C\u7A0B\u5E8F\u5C06\u662F\u901A\u77E5\u6B63\u5728\u8FD0\u884C\u7684\u4EFB\u52A1\u7684\u552F\u4E00\u65B9\u5F0F\uFF0C\u800C\u4F7F\u7528\u5524\u9192\u7A0B\u5E8F\uFF0C\u6211\u4EEC\u5C06\u5F97\u5230\u4E00\u4E2A\u677E\u6563\u8026\u5408\uFF0C\u5176\u4E2D\u5F88\u5BB9\u6613\u4F7F\u7528\u65B0\u7684<code>leaf-future</code>\u6765\u6269\u5C55\u751F\u6001\u7CFB\u7EDF\u3002</p><blockquote><p>\u5982\u679C\u4F60\u60F3\u4E86\u89E3\u66F4\u591A\u5173\u4E8E Waker \u7C7B\u578B\u80CC\u540E\u7684\u539F\u56E0\uFF0C\u6211\u53EF\u4EE5\u63A8\u8350<a href="https://boats.gitlab.io/blog/post/wakers-i/" target="_blank" rel="noopener noreferrer">Withoutboats articles series about them</a>\u3002</p></blockquote><h3 id="\u7406\u89E3\u5524\u9192\u5668" tabindex="-1">\u7406\u89E3\u5524\u9192\u5668 <a class="header-anchor" href="#\u7406\u89E3\u5524\u9192\u5668" aria-hidden="true">#</a></h3><p>\u5728\u5B9E\u73B0\u6211\u4EEC\u81EA\u5DF1\u7684<code>Future</code>\u65F6\uFF0C\u6211\u4EEC\u9047\u5230\u7684\u6700\u4EE4\u4EBA\u56F0\u60D1\u7684\u4E8B\u60C5\u4E4B\u4E00\u5C31\u662F\u6211\u4EEC\u5982\u4F55\u5B9E\u73B0\u4E00\u4E2A\u5524\u9192\u5668\u3002 \u521B\u5EFA\u4E00\u4E2A Waker \u9700\u8981\u521B\u5EFA\u4E00\u4E2A vtable\uFF0C\u8FD9\u4E2Avtable\u5141\u8BB8\u6211\u4EEC\u4F7F\u7528\u52A8\u6001\u65B9\u5F0F\u8C03\u7528\u6211\u4EEC\u771F\u5B9E\u7684Waker\u5B9E\u73B0.</p><blockquote><p>\u5982\u679C\u4F60\u60F3\u77E5\u9053\u66F4\u591A\u5173\u4E8ERust\u4E2D\u7684\u52A8\u6001\u5206\u53D1\uFF0C\u6211\u53EF\u4EE5\u63A8\u8350 Adam Schwalm \u5199\u7684\u4E00\u7BC7\u6587\u7AE0 <a href="https://alschwalm.com/blog/static/2017/03/07/exploring-dynamic-dispatch-in-rust/" target="_blank" rel="noopener noreferrer">Exploring Dynamic Dispatch in Rust</a>.</p></blockquote><p>\u8BA9\u6211\u4EEC\u66F4\u8BE6\u7EC6\u5730\u89E3\u91CA\u4E00\u4E0B\u3002</p><h3 id="rust\u4E2D\u7684\u80D6\u6307\u9488" tabindex="-1">Rust\u4E2D\u7684\u80D6\u6307\u9488 <a class="header-anchor" href="#rust\u4E2D\u7684\u80D6\u6307\u9488" aria-hidden="true">#</a></h3><p>\u4E3A\u4E86\u66F4\u597D\u5730\u7406\u89E3\u6211\u4EEC\u5982\u4F55\u5728 Rust \u4E2D\u5B9E\u73B0 Waker\uFF0C\u6211\u4EEC\u9700\u8981\u9000\u540E\u4E00\u6B65\u5E76\u8BA8\u8BBA\u4E00\u4E9B\u57FA\u672C\u539F\u7406\u3002 \u8BA9\u6211\u4EEC\u9996\u5148\u770B\u770B Rust \u4E2D\u4E00\u4E9B\u4E0D\u540C\u6307\u9488\u7C7B\u578B\u7684\u5927\u5C0F\u3002</p><p>\u8FD0\u884C\u4EE5\u4E0B\u4EE3\u7801:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">trait</span> <span class="token type-definition class-name">SomeTrait</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;======== The size of different pointers in Rust: ========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;dyn Trait:-----{}&quot;</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">dyn</span> <span class="token class-name">SomeTrait</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;[&amp;dyn Trait]:--{}&quot;</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token keyword">dyn</span> <span class="token class-name">SomeTrait</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Box&lt;Trait&gt;:-----{}&quot;</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">SomeTrait</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;i32:-----------{}&quot;</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;[i32]:---------{}&quot;</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Box&lt;i32&gt;:-------{}&quot;</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;Box&lt;i32&gt;:------{}&quot;</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;[&amp;dyn Trait;4]:-{}&quot;</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token keyword">dyn</span> <span class="token class-name">SomeTrait</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;[i32;4]:--------{}&quot;</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u4ECE\u8FD0\u884C\u540E\u7684\u8F93\u51FA\u4E2D\u53EF\u4EE5\u770B\u5230\uFF0C\u5F15\u7528\u7684\u5927\u5C0F\u662F\u4E0D\u540C\u7684\u3002 \u8BB8\u591A\u662F8\u5B57\u8282(\u572864\u4F4D\u7CFB\u7EDF\u4E2D\u662F\u6307\u9488\u5927\u5C0F) \uFF0C\u4F46\u6709\u4E9B\u662F16\u5B57\u8282\u3002</p><p>16\u5B57\u8282\u5927\u5C0F\u7684\u6307\u9488\u88AB\u79F0\u4E3A\u201C\u80D6\u6307\u9488\u201D \uFF0C\u56E0\u4E3A\u5B83\u4EEC\u643A\u5E26\u989D\u5916\u7684\u4FE1\u606F\u3002</p><p>\u4F8B\u5982 <code>&amp;[i32]</code>:</p><ul><li>\u524D8\u4E2A\u5B57\u8282\u662F\u6307\u5411\u6570\u7EC4\u4E2D\u7B2C\u4E00\u4E2A\u5143\u7D20\u7684\u5B9E\u9645\u6307\u9488(\u6216 slice \u5F15\u7528\u7684\u6570\u7EC4\u7684\u4E00\u90E8\u5206)</li><li>\u7B2C\u4E8C\u4E2A8\u5B57\u8282\u662F\u5207\u7247\u7684\u957F\u5EA6</li></ul><p>\u4F8B\u5982 <code>&amp;dyn SomeTrait</code>:</p><p>\u8FD9\u5C31\u662F\u6211\u4EEC\u5C06\u8981\u5173\u6CE8\u7684\u80D6\u6307\u9488\u7684\u7C7B\u578B\u3002<code>&amp;dyn SomeTrait</code> \u662F\u4E00\u4E2Atrait\u7684\u5F15\u7528\uFF0C\u6216\u8005 Rust\u79F0\u4E4B\u4E3A\u4E00\u4E2Atrait\u5BF9\u8C61\u3002</p><p>\u6307\u5411 trait \u5BF9\u8C61\u7684\u6307\u9488\u5E03\u5C40\u5982\u4E0B:</p><ul><li>\u524D8\u4E2A\u5B57\u8282\u6307\u5411trait \u5BF9\u8C61\u7684data</li><li>\u540E\u516B\u4E2A\u5B57\u8282\u6307\u5411trait\u5BF9\u8C61\u7684 vtable</li></ul><p>\u8FD9\u6837\u505A\u7684\u597D\u5904\u662F\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5F15\u7528\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u9664\u4E86\u5B83\u5B9E\u73B0\u4E86 trait \u5B9A\u4E49\u7684\u65B9\u6CD5\u4E4B\u5916\uFF0C\u6211\u4EEC\u5BF9\u8FD9\u4E2A\u5BF9\u8C61\u4E00\u65E0\u6240\u77E5\u3002 \u4E3A\u4E86\u8FBE\u5230\u8FD9\u4E2A\u76EE\u7684\uFF0C\u6211\u4EEC\u4F7F\u7528\u52A8\u6001\u5206\u53D1\u3002</p><p>\u8BA9\u6211\u4EEC\u7528\u4EE3\u7801\u800C\u4E0D\u662F\u6587\u5B57\u6765\u89E3\u91CA\u8FD9\u4E00\u70B9\uFF0C\u901A\u8FC7\u8FD9\u4E9B\u90E8\u5206\u6765\u5B9E\u73B0\u6211\u4EEC\u81EA\u5DF1\u7684 trait \u5BF9\u8C61:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">// A reference to a trait object is a fat pointer: (data_ptr, vtable_ptr)</span>
<span class="token keyword">trait</span> <span class="token type-definition class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">sub</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">mul</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// This will represent our home brewn fat pointer to a trait object</span>
   <span class="token attribute attr-name">#[repr(C)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">FatPointer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/// A reference is a pointer to an instantiated \`Data\` instance</span>
    data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token class-name">Data</span><span class="token punctuation">,</span>
    <span class="token comment">/// Since we need to pass in literal values like length and alignment it&#39;s</span>
    <span class="token comment">/// easiest for us to convert pointers to usize-integers instead of the other way around.</span>
    vtable<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// This is the data in our trait object. It&#39;s just two numbers we want to operate on.</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Data</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// ====== function definitions ======</span>
<span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Data</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
    s<span class="token punctuation">.</span>a <span class="token operator">+</span> s<span class="token punctuation">.</span>b
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">sub</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Data</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
    s<span class="token punctuation">.</span>a <span class="token operator">-</span> s<span class="token punctuation">.</span>b
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">mul</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Data</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
    s<span class="token punctuation">.</span>a <span class="token operator">*</span> s<span class="token punctuation">.</span>b
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> data <span class="token operator">=</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// vtable is like special purpose array of pointer-length types with a fixed</span>
    <span class="token comment">// format where the three first values has a special meaning like the</span>
    <span class="token comment">// length of the array is encoded in the array itself as the second value.</span>
    <span class="token keyword">let</span> vtable <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
        <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">// pointer to \`Drop\` (which we&#39;re not implementing here)</span>
        <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token comment">// lenght of vtable</span>
        <span class="token number">8</span><span class="token punctuation">,</span>            <span class="token comment">// alignment</span>

        <span class="token comment">// we need to make sure we add these in the same order as defined in the Trait.</span>
        add <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token comment">// function pointer - try changing the order of \`add\`</span>
        sub <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token comment">// function pointer - and \`sub\` to see what happens</span>
        mul <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token comment">// function pointer</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> fat_pointer <span class="token operator">=</span> <span class="token class-name">FatPointer</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> data<span class="token punctuation">,</span> vtable<span class="token punctuation">:</span> vtable<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">transmute</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">FatPointer</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">dyn</span> <span class="token class-name">Test</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>fat_pointer<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// And voal\xE1, it&#39;s now a trait object we can call methods on</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Add: 3 + 2 = {}&quot;</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Sub: 3 - 2 = {}&quot;</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Mul: 3 * 2 = {}&quot;</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><p>\u7A0D\u540E\uFF0C\u5F53\u6211\u4EEC\u5B9E\u73B0\u6211\u4EEC\u81EA\u5DF1\u7684 Waker \u65F6\uFF0C\u6211\u4EEC\u5B9E\u9645\u4E0A\u4F1A\u50CF\u8FD9\u91CC\u4E00\u6837\u5EFA\u7ACB\u4E00\u4E2A vtable\u3002 \u6211\u4EEC\u521B\u9020\u5B83\u7684\u65B9\u5F0F\u7565\u6709\u4E0D\u540C\uFF0C\u4F46\u662F\u73B0\u5728\u4F60\u77E5\u9053\u4E86\u89C4\u5219\u7279\u5F81\u5BF9\u8C61\u662F\u5982\u4F55\u5DE5\u4F5C\u7684\uFF0C\u4F60\u53EF\u80FD\u4F1A\u8BA4\u8BC6\u5230\u6211\u4EEC\u5728\u505A\u4EC0\u4E48\uFF0C\u8FD9\u4F7F\u5F97\u5B83\u4E0D\u90A3\u4E48\u795E\u79D8\u3002</p><h3 id="\u5956\u52B1\u90E8\u5206-1" tabindex="-1">\u5956\u52B1\u90E8\u5206 <a class="header-anchor" href="#\u5956\u52B1\u90E8\u5206-1" aria-hidden="true">#</a></h3><p>\u60A8\u53EF\u80FD\u60F3\u77E5\u9053\u4E3A\u4EC0\u4E48Waker\u662F\u8FD9\u6837\u5B9E\u73B0\u7684\uFF0C\u800C\u4E0D\u4EC5\u4EC5\u662F\u4F5C\u4E3A\u4E00\u4E2A\u666E\u901A\u7684trait.</p><p>\u539F\u56E0\u5728\u4E8E\u7075\u6D3B\u6027\u3002 \u4EE5\u8FD9\u91CC\u7684\u65B9\u5F0F\u5B9E\u73B0 Waker\uFF0C\u53EF\u4EE5\u5F88\u7075\u6D3B\u5730\u9009\u62E9\u8981\u4F7F\u7528\u7684\u5185\u5B58\u7BA1\u7406\u65B9\u6848\u3002</p><p>\u201C\u6B63\u5E38\u201D\u7684\u65B9\u6CD5\u662F\u4F7F\u7528 Arc \u6765\u4F7F\u7528\u5F15\u7528\u8BA1\u6570\u6765\u8DDF\u8E2A Waker \u5BF9\u8C61\u4F55\u65F6\u53EF\u4EE5\u88AB\u5220\u9664\u3002 \u4F46\u662F\uFF0C\u8FD9\u4E0D\u662F\u552F\u4E00\u7684\u65B9\u6CD5\uFF0C\u60A8\u8FD8\u53EF\u4EE5\u4F7F\u7528\u7EAF\u7CB9\u7684\u5168\u5C40\u51FD\u6570\u548C\u72B6\u6001\uFF0C\u6216\u8005\u4EFB\u4F55\u5176\u4ED6\u60A8\u5E0C\u671B\u7684\u65B9\u6CD5\u3002</p><p>\u8FD9\u5728\u8868\u4E2D\u4E3A\u8FD0\u884C\u65F6\u5B9E\u73B0\u8005\u7559\u4E0B\u4E86\u8BB8\u591A\u9009\u9879\u3002</p><h2 id="\u4E94-\u751F\u6210\u5668\u548Casync-await" tabindex="-1">\u4E94 \u751F\u6210\u5668\u548Casync/await <a class="header-anchor" href="#\u4E94-\u751F\u6210\u5668\u548Casync-await" aria-hidden="true">#</a></h2><h3 id="\u6982\u8FF0-2" tabindex="-1">\u6982\u8FF0 <a class="header-anchor" href="#\u6982\u8FF0-2" aria-hidden="true">#</a></h3><ol><li>\u7406\u89E3 async / await \u8BED\u6CD5\u5728\u5E95\u5C42\u662F\u5982\u4F55\u5DE5\u4F5C\u7684</li><li>\u4EB2\u773C\u76EE\u7779(See first hand)\u6211\u4EEC\u4E3A\u4EC0\u4E48\u9700\u8981Pin</li><li>\u7406\u89E3\u662F\u4EC0\u4E48\u8BA9 Rusts \u5F02\u6B65\u6A21\u578B\u7684\u5185\u5B58\u6548\u7387\u975E\u5E38\u9AD8</li></ol><p>\u751F\u6210\u5668\u7684\u52A8\u673A\u53EF\u4EE5\u5728 <a href="https://github.com/rust-lang/rfcs/blob/master/text/2033-experimental-coroutines.md" target="_blank" rel="noopener noreferrer">RFC#2033</a>\u4E2D\u627E\u5230\u3002 \u5B83\u5199\u5F97\u975E\u5E38\u597D\uFF0C\u6211\u5EFA\u8BAE\u60A8\u901A\u8BFB\u5B83(\u5B83\u8C08\u8BBAasync/await\u7684\u5185\u5BB9\u548C\u8C08\u8BBA\u751F\u6210\u5668\u7684\u5185\u5BB9\u4E00\u6837\u591A)\u3002</p><h3 id="\u4E3A\u4EC0\u4E48\u8981\u5B66\u4E60\u751F\u6210\u5668" tabindex="-1">\u4E3A\u4EC0\u4E48\u8981\u5B66\u4E60\u751F\u6210\u5668 <a class="header-anchor" href="#\u4E3A\u4EC0\u4E48\u8981\u5B66\u4E60\u751F\u6210\u5668" aria-hidden="true">#</a></h3><p>generators/yield\u548C async/await \u975E\u5E38\u76F8\u4F3C\uFF0C\u4E00\u65E6\u7406\u89E3\u4E86\u5176\u4E2D\u4E00\u4E2A\uFF0C\u5C31\u5E94\u8BE5\u80FD\u591F\u7406\u89E3\u53E6\u4E00\u4E2A\u3002</p><p>\u5BF9\u6211\u6765\u8BF4\uFF0C\u4F7F\u7528Generators\u800C\u4E0D\u662F Futures \u6765\u63D0\u4F9B\u53EF\u8FD0\u884C\u7684\u548C\u7B80\u77ED\u7684\u793A\u4F8B\u8981\u5BB9\u6613\u5F97\u591A\uFF0C\u8FD9\u9700\u8981\u6211\u4EEC\u73B0\u5728\u5F15\u5165\u5F88\u591A\u6982\u5FF5\uFF0C\u7A0D\u540E\u6211\u4EEC\u5C06\u4ECB\u7ECD\u8FD9\u4E9B\u6982\u5FF5\uFF0C\u4EE5\u4FBF\u5C55\u793A\u793A\u4F8B\u3002</p><p>Async/await \u7684\u5DE5\u4F5C\u65B9\u5F0F\u7C7B\u4F3C\u4E8E\u751F\u6210\u5668\uFF0C\u4F46\u5B83\u4E0D\u8FD4\u56DE\u751F\u6210\u5668\uFF0C\u800C\u662F\u8FD4\u56DE\u4E00\u4E2A\u5B9E\u73B0 Future trait \u7684\u7279\u6B8A\u5BF9\u8C61\u3002</p><p>\u4E00\u4E2A\u5C0F\u5C0F\u7684\u597D\u5904\u662F\uFF0C\u5728\u672C\u7AE0\u7684\u6700\u540E\uFF0C\u4F60\u5C06\u6709\u4E00\u4E2A\u5F88\u597D\u7684\u5173\u4E8E\u751F\u6210\u5668\u548C async / await \u7684\u4ECB\u7ECD\u3002</p><p>\u57FA\u672C\u4E0A\uFF0C\u5728\u8BBE\u8BA1 Rust \u5982\u4F55\u5904\u7406\u5E76\u53D1\u65F6\uFF0C\u4E3B\u8981\u8BA8\u8BBA\u4E86\u4E09\u4E2A\u9009\u9879:</p><ol><li>Green Thread.</li><li>\u4F7F\u7528\u7EC4\u5408\u7B26(Using combinators.)</li><li>Generator, \u6CA1\u6709\u4E13\u95E8\u7684\u6808</li></ol><p>\u6211\u4EEC\u5728\u80CC\u666F\u4FE1\u606F\u4E2D\u8986\u76D6\u4E86\u7EFF\u8272\u7EBF\u7A0B\uFF0C\u6240\u4EE5\u6211\u4EEC\u4E0D\u4F1A\u5728\u8FD9\u91CC\u91CD\u590D\u3002 \u6211\u4EEC\u5C06\u96C6\u4E2D\u5728\u5404\u79CD\u5404\u6837\u7684\u65E0\u5806\u6808\u534F\u540C\u7A0B\u5E8F,\u8FD9\u4E5F\u5C31\u662FRust\u6B63\u5728\u4F7F\u7528\u7684.</p><h3 id="\u7EC4\u5408\u5B50-combinators" tabindex="-1">\u7EC4\u5408\u5B50(Combinators) <a class="header-anchor" href="#\u7EC4\u5408\u5B50-combinators" aria-hidden="true">#</a></h3><p>\u5728<code>Futures 0.1</code>\u4E2D\u4F7F\u7528\u7EC4\u5408\u5B50.\u5982\u679C\u4F60\u66FE\u7ECF\u662F\u7528\u8FC7Javascript\u4E2D\u7684<code>Promises</code>,\u90A3\u4E48\u4F60\u5DF2\u7ECF\u6BD4\u8F83\u719F\u6089combinators\u4E86. \u5728Rust\u4E2D,\u4ED6\u4EEC\u770B\u8D77\u6765\u5982\u4E0B:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">let</span> future <span class="token operator">=</span> <span class="token class-name">Connection</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span>conn_str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>conn<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
    conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;somerequest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>row<span class="token closure-punctuation punctuation">|</span></span><span class="token punctuation">{</span>
        <span class="token class-name">SomeStruct</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">SomeStruct</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> rows<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">SomeStruct</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">SomeLibraryError</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">block_on</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u4F7F\u7528\u8FD9\u4E2A\u6280\u5DE7\u4E3B\u8981\u6709\u4E09\u4E2A\u7F3A\u70B9:</p><ol><li>\u9519\u8BEF\u6D88\u606F\u53EF\u80FD\u4F1A\u5197\u957F\u5E76\u4E14\u96BE\u61C2</li><li>\u4E0D\u662F\u6700\u4F73\u7684\u5185\u5B58\u4F7F\u7528(\u6D6A\u8D39\u5185\u5B58)</li><li>Rust\u4E2D\u4E0D\u5141\u8BB8\u8DE8\u7EC4\u5408\u5B50\u501F\u7528.</li></ol><p>\u5176\u4E2D\u7B2C\u4E09\u70B9\u662F\u8FD9\u79CD\u65B9\u5F0F\u7684\u4E3B\u8981\u7F3A\u70B9.</p><p>\u4E0D\u5141\u8BB8\u8DE8\u7EC4\u5408\u5B50\u501F\u7528\uFF0C\u7ED3\u679C\u662F\u975E\u5E38\u4E0D\u7B26\u5408\u4EBA\u4F53\u5DE5\u7A0B\u5B66\u7684.\u4E3A\u4E86\u5B8C\u6210\u67D0\u4E9B\u4EFB\u52A1\uFF0C\u9700\u8981\u989D\u5916\u7684\u5185\u5B58\u5206\u914D\u6216\u8005\u590D\u5236\uFF0C\u8FD9\u5F88\u4F4E\u6548\u3002</p><p>\u5185\u5B58\u5360\u7528\u9AD8\u7684\u539F\u56E0\u662F\uFF0C\u8FD9\u57FA\u672C\u4E0A\u662F\u4E00\u79CD\u57FA\u4E8E\u56DE\u8C03\u7684\u65B9\u6CD5\uFF0C\u5176\u4E2D\u6BCF\u4E2A\u95ED\u5305\u5B58\u50A8\u8BA1\u7B97\u6240\u9700\u7684\u6240\u6709\u6570\u636E\u3002 \u8FD9\u610F\u5473\u7740\uFF0C\u968F\u7740\u6211\u4EEC\u5C06\u5B83\u4EEC\u94FE\u63A5\u8D77\u6765\uFF0C\u5B58\u50A8\u6240\u9700\u72B6\u6001\u6240\u9700\u7684\u5185\u5B58\u4F1A\u968F\u7740\u6BCF\u4E00\u6B65\u7684\u589E\u52A0\u800C\u589E\u52A0\u3002</p><h3 id="\u65E0\u6808\u534F\u7A0B-\u751F\u6210\u5668" tabindex="-1">\u65E0\u6808\u534F\u7A0B/\u751F\u6210\u5668 <a class="header-anchor" href="#\u65E0\u6808\u534F\u7A0B-\u751F\u6210\u5668" aria-hidden="true">#</a></h3><p>\u8FD9\u5C31\u662F\u4ECA\u5929 Rust \u4F7F\u7528\u7684\u6A21\u578B\uFF0C\u5B83\u6709\u51E0\u4E2A\u663E\u8457\u7684\u4F18\u70B9:</p><ol><li>\u4F7F\u7528 async/await \u4F5C\u4E3A\u5173\u952E\u5B57\uFF0C\u53EF\u4EE5\u5F88\u5BB9\u6613\u5730\u5C06\u666E\u901A\u7684Rust\u4EE3\u7801\u8F6C\u6362\u4E3A\u65E0\u5806\u6808\u7684\u534F\u7A0B(\u751A\u81F3\u53EF\u4EE5\u4F7F\u7528\u5B8F\u6765\u5B8C\u6210)</li><li>\u4E0D\u9700\u8981\u4E0A\u4E0B\u6587\u5207\u6362\u4E0E\u4FDD\u5B58\u6062\u590DCPU\u72B6\u6001</li><li>\u4E0D\u9700\u8981\u5904\u7406\u7684\u52A8\u6001\u6808\u5206\u914D</li><li>\u5185\u5B58\u6548\u7387\u9AD8</li><li>\u5141\u8BB8\u6211\u4EEC\u5757\u6682\u505C\u70B9(suspension)\u501F\u7528 <strong>\u8FD9\u662F\u5565\u610F\u601D\u554A</strong></li></ol><p>\u4E0EFutures 0.1\u4E0D\u4E00\u6837\uFF0C\u4F7F\u7528async/ await \u6211\u4EEC\u53EF\u4EE5\u8FD9\u6837\u505A:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">myfn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    somefuture<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Rust\u4E2D\u7684\u5F02\u6B65\u4F7F\u7528\u751F\u6210\u5668\u5B9E\u73B0. \u56E0\u6B64\u4E3A\u4E86\u7406\u89E3\u5F02\u6B65\u662F\u5982\u4F55\u5DE5\u4F5C\u7684\uFF0C\u6211\u4EEC\u9996\u5148\u9700\u8981\u7406\u89E3\u751F\u6210\u5668\u3002 \u5728Rust\u4E2D\uFF0C\u751F\u6210\u5668\u88AB\u5B9E\u73B0\u4E3A\u72B6\u6001\u673A\u3002</p><p>\u4E00\u4E2A\u8BA1\u7B97\u94FE\u7684\u5185\u5B58\u5360\u7528\u662F\u7531\u5360\u7528\u7A7A\u95F4\u6700\u5927\u7684\u90A3\u4E2A\u6B65\u9AA4\u5B9A\u4E49\u7684\u3002</p><p>\u8FD9\u610F\u5473\u7740\u5728\u8BA1\u7B97\u94FE\u4E2D\u6DFB\u52A0\u6B65\u9AA4\u53EF\u80FD\u6839\u672C\u4E0D\u9700\u8981\u589E\u52A0\u4EFB\u4F55\u5185\u5B58\uFF0C\u8FD9\u4E5F\u662F\u4E3A\u4EC0\u4E48Futures\u548C Async \u5728 Rust \u4E2D\u7684\u5F00\u9500\u5F88\u5C0F\u7684\u539F\u56E0\u4E4B\u4E00\u3002</p><h3 id="\u751F\u6210\u5668\u662F\u5982\u4F55\u5DE5\u4F5C\u7684" tabindex="-1">\u751F\u6210\u5668\u662F\u5982\u4F55\u5DE5\u4F5C\u7684 <a class="header-anchor" href="#\u751F\u6210\u5668\u662F\u5982\u4F55\u5DE5\u4F5C\u7684" aria-hidden="true">#</a></h3><p>\u5728\u4ECA\u5929\u7684 Nightly Rust \u4E2D\uFF0C\u4F60\u53EF\u4EE5\u4F7F\u7528\u5173\u952E\u8BCD yield\u3002 \u5728\u95ED\u5305\u4E2D\u4F7F\u7528\u8FD9\u4E2A\u5173\u952E\u5B57\uFF0C\u5C06\u5176\u8F6C\u6362\u4E3A\u751F\u6210\u5668\u3002 \u5728\u4ECB\u7ECDPin\u4E4B\u524D\uFF0C\u95ED\u5305\u662F\u8FD9\u6837\u7684:</p><div class="language-rust line-numbers-mode"><pre><code> <span class="token attribute attr-name">#![feature(generators, generator_trait)]</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Generator</span><span class="token punctuation">,</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> gen <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">yield</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>\u65E9\u4E9B\u65F6\u5019\uFF0C\u5728\u4EBA\u4EEC\u5BF9 Pin \u7684\u8BBE\u8BA1\u8FBE\u6210\u5171\u8BC6\u4E4B\u524D\uFF0C\u7F16\u8BD1\u5B8C\u4EE3\u7801\u770B\u8D77\u6765\u7C7B\u4F3C\u4E8E\u8FD9\u6837:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> gen <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// If you&#39;ve ever wondered why the parameters are called Y and R the naming from</span>
<span class="token comment">// the original rfc most likely holds the answer</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token class-name">Y</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Yielded</span><span class="token punctuation">(</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// originally called \`Yield(Y)\`</span>
    <span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// originally called \`Return(R)\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">trait</span> <span class="token type-definition class-name">Generator</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token class-name">Enter</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Yield1</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Exit</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">start</span><span class="token punctuation">(</span>a1<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Generator</span> <span class="token keyword">for</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span> <span class="token operator">=</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// lets us get ownership over current state</span>
        <span class="token keyword">match</span> <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

          <span class="token comment">/*----code before yield----*/</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> a <span class="token operator">=</span> a1 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>

                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">/*-----code after yield-----*/</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span><span class="token punctuation">;</span>
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t advance an exited generator!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><p>\u5173\u952E\u8BCDyield\u9996\u5148\u5728<a href="https://github.com/rust-lang/rfcs/pull/1823" target="_blank" rel="noopener noreferrer">RFC#1823</a>\u548C <a href="https://github.com/rust-lang/rfcs/pull/1832" target="_blank" rel="noopener noreferrer">RFC#1832</a>\u4E2D\u8BA8\u8BBA\u3002</p><p>\u65E2\u7136\u60A8\u77E5\u9053\u4E86\u73B0\u5B9E\u4E2D\u7684 yield \u5173\u952E\u5B57\u4F1A\u5C06\u4EE3\u7801\u91CD\u5199\u4E3A\u72B6\u6001\u673A\uFF0C\u90A3\u4E48\u60A8\u8FD8\u5C06\u4E86\u89E3await \u5982\u4F55\u5DE5\u4F5C\u7684,\u4ED6\u4EEC\u975E\u5E38\u76F8\u4F3C.</p><p>\u4E0A\u8FF0\u7B80\u5355\u7684\u72B6\u6001\u673A\u4E2D\u6709\u4E00\u4E9B\u9650\u5236,\u5F53\u8DE8yield\u53D1\u751F\u501F\u7528\u7684\u65F6\u5019\u4F1A\u53D1\u751F\u4EC0\u4E48\u5462?</p><p>\u6211\u4EEC\u53EF\u4EE5\u7981\u6B62\u8FD9\u6837\u505A\uFF0C\u4F46async/await \u8BED\u6CD5\u7684\u4E3B\u8981\u8BBE\u8BA1\u76EE\u6807\u4E4B\u4E00\u5C31\u662F\u5141\u8BB8\u8FD9\u6837\u505A\u3002 \u8FD9\u4E9B\u7C7B\u578B\u7684\u501F\u7528\u662F\u4E0D\u53EF\u80FD\u4F7F\u7528<code>Futures 0.1</code>\uFF0C\u6240\u4EE5\u6211\u4EEC\u4E0D\u80FD\u8BA9\u8FD9\u4E2A\u9650\u5236\u5B58\u5728\u3002</p><p>\u4E0E\u5176\u5728\u7406\u8BBA\u4E0A\u8BA8\u8BBA\u5B83\uFF0C\u4E0D\u5982\u8BA9\u6211\u4EEC\u6765\u770B\u770B\u4E00\u4E9B\u4EE3\u7801\u3002</p><blockquote><p>\u6211\u4EEC\u5C06\u4F7F\u7528\u76EE\u524D Rust \u4E2D\u4F7F\u7528\u7684\u72B6\u6001\u673A\u7684\u4F18\u5316\u7248\u672C\u3002 \u66F4\u6DF1\u5165\u7684\u89E3\u91CA\u89C1 Tyler Mandry \u7684\u6587\u7AE0: <a href="https://tmandry.gitlab.io/blog/posts/optimizing-await-1/" target="_blank" rel="noopener noreferrer">Rust \u5982\u4F55\u4F18\u5316async/await</a></p></blockquote><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">let</span> <span class="token keyword">mut</span> generator <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
        <span class="token keyword">yield</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world!&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u6211\u4EEC\u5C06\u624B\u5DE5\u7F16\u5199\u4E00\u4E9B\u7248\u672C\u7684\u72B6\u6001\u673A\uFF0C\u8FD9\u4E9B\u72B6\u6001\u673A\u8868\u793A\u751F\u6210\u5668\u5B9A\u4E49\u7684\u72B6\u6001\u673A\u3002</p><p>\u5728\u6BCF\u4E2A\u793A\u4F8B\u4E2D\uFF0C\u6211\u4EEC\u90FD\u662F\u201C\u624B\u52A8\u201D\u9010\u6B65\u5B8C\u6210\u6BCF\u4E2A\u6B65\u9AA4\uFF0C\u56E0\u6B64\u5B83\u770B\u8D77\u6765\u975E\u5E38\u964C\u751F\u3002 \u6211\u4EEC\u53EF\u4EE5\u6DFB\u52A0\u4E00\u4E9B\u8BED\u6CD5\u7CD6\uFF0C\u6BD4\u5982\u4E3A\u6211\u4EEC\u7684\u751F\u6210\u5668\u5B9E\u73B0 Iterator trait\uFF0C\u8FD9\u6837\u6211\u4EEC\u5C31\u53EF\u4EE5\u8FD9\u6837\u505A:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u8FD9\u662F\u4E00\u4E2A\u76F8\u5F53\u5FAE\u4E0D\u8DB3\u9053\u7684\u6539\u53D8\uFF0C\u4F46\u662F\u8FD9\u4E00\u7AE0\u5DF2\u7ECF\u53D8\u5F97\u5F88\u957F\u4E86\u3002\u6211\u4EEC\u7EE7\u7EED\u524D\u8FDB\u7684\u65F6\u5019\uFF0C\u8BF7\u7262\u7262\u8BB0\u4F4F\u8FD9\u70B9\u3002</p><p>\u73B0\u5728\uFF0C\u6211\u4EEC\u7684\u91CD\u5199\u72B6\u6001\u673A\u5728\u8FD9\u4E2A\u793A\u4F8B\u4E2D\u770B\u8D77\u6765\u662F\u4EC0\u4E48\u6837\u5B50\u7684\uFF1F</p><div class="language-rust line-numbers-mode"><pre><code>
 <span class="token attribute attr-name">#![allow(unused_variables)]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token class-name">Y</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Yielded</span><span class="token punctuation">(</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">trait</span> <span class="token type-definition class-name">Generator</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token class-name">Enter</span><span class="token punctuation">,</span>
    <span class="token class-name">Yield1</span> <span class="token punctuation">{</span>
        to_borrow<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        borrowed<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// uh, what lifetime should this have?</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Exit</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Generator</span> <span class="token keyword">for</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span> <span class="token operator">=</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// lets us get ownership over current state</span>
        <span class="token keyword">match</span> <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span> <span class="token comment">// &lt;--- NB!</span>
                <span class="token keyword">let</span> res <span class="token operator">=</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello {}&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span><span class="token punctuation">;</span>
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t advance an exited generator!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><p>\u5982\u679C\u4F60\u8BD5\u56FE\u7F16\u8BD1\u8FD9\u4E2A\uFF0C\u4F60\u4F1A\u5F97\u5230\u4E00\u4E2A\u9519\u8BEF\u3002</p><p>\u5B57\u7B26\u4E32\u7684\u751F\u547D\u5468\u671F\u662F\u4EC0\u4E48\u3002 \u8FD9\u548CSelf\u7684\u751F\u547D\u5468\u671F\u662F\u4E0D\u4E00\u6837\u7684\u3002 \u5B83\u4E0D\u662F\u9759\u6001\u7684\u3002 \u4E8B\u5B9E\u8BC1\u660E\uFF0C\u6211\u4EEC\u4E0D\u53EF\u80FD\u7528Rusts\u8BED\u6CD5\u6765\u63CF\u8FF0\u8FD9\u4E2A\u751F\u547D\u5468\u671F\uFF0C\u8FD9\u610F\u5473\u7740\uFF0C\u4E3A\u4E86\u4F7F\u8FD9\u4E2A\u5DE5\u4F5C\u6210\u529F\uFF0C\u6211\u4EEC\u5FC5\u987B\u8BA9\u7F16\u8BD1\u5668\u77E5\u9053\uFF0C\u6211\u4EEC\u81EA\u5DF1\u6B63\u786E\u5730\u63A7\u5236\u4E86\u5B83\u3002</p><p>\u8FD9\u610F\u5473\u7740\u5FC5\u987B\u501F\u52A9unsafe\u3002</p><p>\u8BA9\u6211\u4EEC\u5C1D\u8BD5\u7F16\u5199\u4E00\u4E2A\u4F7F\u7528unsafe\u7684\u5B9E\u73B0\u3002 \u6B63\u5982\u60A8\u5C06\u770B\u5230\u7684\uFF0C\u6211\u4EEC\u6700\u7EC8\u5C06\u4F7F\u7528\u4E00\u4E2A\u81EA\u5F15\u7528\u7ED3\u6784, \u4E5F\u5C31\u662F\u5C06\u5F15\u7528\u4FDD\u5B58\u5728\u81EA\u8EAB\u4E2D\u7684\u7ED3\u6784\u4F53\u3002</p><p>\u6B63\u5982\u60A8\u6240\u6CE8\u610F\u5230\u7684\uFF0C\u8FD9\u4E2A\u7F16\u8BD1\u5668\u7F16\u8BD1\u5F97\u5F88\u597D\uFF01</p><div class="language-rust line-numbers-mode"><pre><code>
 <span class="token attribute attr-name">#![allow(unused_variables)]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token class-name">Y</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Yielded</span><span class="token punctuation">(</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    <span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">}</span>

<span class="token keyword">trait</span> <span class="token type-definition class-name">Generator</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token class-name">Enter</span><span class="token punctuation">,</span>
    <span class="token class-name">Yield1</span> <span class="token punctuation">{</span>
        to_borrow<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        borrowed<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// NB! This is now a raw pointer!</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Exit</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Generator</span> <span class="token keyword">for</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span> <span class="token operator">=</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
                <span class="token keyword">let</span> res <span class="token operator">=</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                
                <span class="token comment">// NB! And we set the pointer to reference the to_borrow string here</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
                    <span class="token operator">*</span>borrowed <span class="token operator">=</span> to_borrow<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
               
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>borrowed<span class="token punctuation">,</span> <span class="token punctuation">..</span><span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> borrowed<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token operator">*</span>borrowed<span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span><span class="token punctuation">;</span>
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t advance an exited generator!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><p>\u8BF7\u8BB0\u4F4F\uFF0C\u6211\u4EEC\u7684\u4F8B\u5B50\u662F\u6211\u4EEC\u751F\u6210\u7684\u751F\u6210\u5668\uFF0C\u5B83\u7684\u539F\u59CB\u6587\u4EF6\u50CF\u8FD9\u6837:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">let</span> <span class="token keyword">mut</span> gen <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
        <span class="token keyword">yield</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world!&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u4E0B\u9762\u662F\u6211\u4EEC\u5982\u4F55\u8FD0\u884C\u8FD9\u4E2A\u72B6\u6001\u673A\u7684\u793A\u4F8B\uFF0C\u6B63\u5982\u60A8\u6240\u770B\u5230\u7684\uFF0C\u5B83\u5B8C\u6210\u4E86\u6211\u4EEC\u6240\u671F\u671B\u7684\u4EFB\u52A1\u3002 \u4F46\u8FD9\u4ECD\u7136\u5B58\u5728\u4E00\u4E2A\u5DE8\u5927\u7684\u95EE\u9898:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> gen <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> gen2 <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> gen2<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token class-name">Y</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Yielded</span><span class="token punctuation">(</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    <span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">}</span>

<span class="token keyword">trait</span> <span class="token type-definition class-name">Generator</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token class-name">Enter</span><span class="token punctuation">,</span>
    <span class="token class-name">Yield1</span> <span class="token punctuation">{</span>
        to_borrow<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        borrowed<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Exit</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Generator</span> <span class="token keyword">for</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span> <span class="token operator">=</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
                <span class="token keyword">let</span> res <span class="token operator">=</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                
                <span class="token comment">// We set the self-reference here</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
                    <span class="token operator">*</span>borrowed <span class="token operator">=</span> to_borrow<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
               
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>borrowed<span class="token punctuation">,</span> <span class="token punctuation">..</span><span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> borrowed<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token operator">*</span>borrowed<span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span><span class="token punctuation">;</span>
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t advance an exited generator!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div><p>\u95EE\u9898\u5728\u4E8E\uFF0C\u5982\u679C\u5728Safe Rust\u4EE3\u7801\u4E2D,\u6211\u4EEC\u8FD9\u6837\u505A:</p><div class="language-rust line-numbers-mode"><pre><code> <span class="token attribute attr-name">#![feature(never_type)]</span> <span class="token comment">// Force nightly compiler to be used in playground</span>
<span class="token comment">// by betting on it&#39;s true that this type is named after it&#39;s stabilization date...</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> gen <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> gen2 <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> gen<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> gen2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;--- Big problem!</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> gen2<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// This would now start gen2 since we swapped them.</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token class-name">Y</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Yielded</span><span class="token punctuation">(</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    <span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">}</span>

<span class="token keyword">trait</span> <span class="token type-definition class-name">Generator</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token class-name">Enter</span><span class="token punctuation">,</span>
    <span class="token class-name">Yield1</span> <span class="token punctuation">{</span>
        to_borrow<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        borrowed<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Exit</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Generator</span> <span class="token keyword">for</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span> <span class="token operator">=</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
                <span class="token keyword">let</span> res <span class="token operator">=</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                
                <span class="token comment">// We set the self-reference here</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
                    <span class="token operator">*</span>borrowed <span class="token operator">=</span> to_borrow<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
               
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>borrowed<span class="token punctuation">,</span> <span class="token punctuation">..</span><span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> borrowed<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token operator">*</span>borrowed<span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span><span class="token punctuation">;</span>
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t advance an exited generator!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><p>\u8FD0\u884C\u4EE3\u7801\u5E76\u6BD4\u8F83\u7ED3\u679C\u3002\u4F60\u770B\u5230\u95EE\u9898\u4E86\u5417\uFF1F</p><p>\u7B49\u7B49? \u201CHello\u201D\u600E\u4E48\u4E86? \u4E3A\u4EC0\u4E48\u6211\u4EEC\u7684\u4EE3\u7801\u51FA\u9519\u4E86\uFF1F</p><p>\u4E8B\u5B9E\u8BC1\u660E\uFF0C\u867D\u7136\u4E0A\u9762\u7684\u4F8B\u5B50\u7F16\u8BD1\u5F97\u5F88\u597D\uFF0C\u4F46\u662F\u6211\u4EEC\u5728\u4F7F\u7528\u5B89\u5168Rust\u65F6\u5C06\u8FD9\u4E2AAPI\u7684\u4F7F\u7528\u8005\u66B4\u9732\u5728\u53EF\u80FD\u7684\u5185\u5B58\u672A\u5B9A\u4E49\u884C\u4E3A\u548C\u5176\u4ED6\u5185\u5B58\u9519\u8BEF\u4E2D\u3002 \u8FD9\u662F\u4E2A\u5927\u95EE\u9898\uFF01</p><p>\u5B9E\u9645\u4E0A\uFF0C\u6211\u5DF2\u7ECF\u5F3A\u5236\u4E0A\u9762\u7684\u4EE3\u7801\u4F7F\u7528\u7F16\u8BD1\u5668\u7684\u591C\u95F4\u7248\u672C\u3002 \u5982\u679C\u60A8\u5728playground\u4E0A\u8FD0\u884C\u4E0A\u9762\u7684\u793A\u4F8B\uFF0C\u60A8\u5C06\u770B\u5230\u5B83\u5728\u5F53\u524D\u7A33\u5B9A\u72B6\u6001(1.42.0)\u4E0A\u8FD0\u884C\u65F6\u6CA1\u6709panic\uFF0C\u4F46\u5728\u5F53\u524D\u591C\u95F4\u72B6\u6001(1.44.0)\u4E0Apanic\u3002 \u592A\u53EF\u6015\u4E86\uFF01</p><p>\u6211\u4EEC\u5C06\u5728\u4E0B\u4E00\u7AE0\u7528\u4E00\u4E2A\u7A0D\u5FAE\u7B80\u5355\u4E00\u70B9\u7684\u4F8B\u5B50\u6765\u89E3\u91CA\u8FD9\u91CC\u53D1\u751F\u4E86\u4EC0\u4E48\uFF0C\u6211\u4EEC\u5C06\u4F7F\u7528 Pin \u6765\u4FEE\u590D\u6211\u4EEC\u7684\u751F\u6210\u5668\uFF0C\u6240\u4EE5\u4E0D\u7528\u62C5\u5FC3\uFF0C\u60A8\u5C06\u770B\u5230\u5230\u5E95\u51FA\u4E86\u4EC0\u4E48\u95EE\u9898\uFF0C\u770B\u770B Pin \u5982\u4F55\u80FD\u591F\u5E2E\u52A9\u6211\u4EEC\u5728\u4E00\u79D2\u949F\u5185\u5B89\u5168\u5730\u5904\u7406\u81EA\u5F15\u7528\u7C7B\u578B\u3002</p><p>\u5728\u6211\u4EEC\u8BE6\u7EC6\u89E3\u91CA\u8FD9\u4E2A\u95EE\u9898\u4E4B\u524D\uFF0C\u8BA9\u6211\u4EEC\u901A\u8FC7\u4E86\u89E3\u751F\u6210\u5668\u548C async \u5173\u952E\u5B57\u4E4B\u95F4\u7684\u5173\u7CFB\u6765\u7ED3\u675F\u672C\u7AE0\u3002</p><h3 id="\u5F02\u6B65\u548C\u751F\u6210\u5668" tabindex="-1">\u5F02\u6B65\u548C\u751F\u6210\u5668 <a class="header-anchor" href="#\u5F02\u6B65\u548C\u751F\u6210\u5668" aria-hidden="true">#</a></h3><p>Futures \u5728Rust\u4E2D\u88AB\u5B9E\u73B0\u4E3A\u72B6\u6001\u673A\uFF0C\u5C31\u50CF\u751F\u6210\u5668\u662F\u72B6\u6001\u673A\u4E00\u6837\u3002</p><p>\u60A8\u53EF\u80FD\u5DF2\u7ECF\u6CE8\u610F\u5230\u5F02\u6B65\u5757\u4E2D\u4F7F\u7528\u7684\u8BED\u6CD5\u548C\u751F\u6210\u5668\u4E2D\u4F7F\u7528\u7684\u8BED\u6CD5\u7684\u76F8\u4F3C\u4E4B\u5904:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">let</span> <span class="token keyword">mut</span> gen <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
        <span class="token keyword">yield</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world!&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u6BD4\u8F83\u4E00\u4E0B\u5F02\u6B65\u5757\u7684\u7C7B\u4F3C\u4F8B\u5B50:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">let</span> <span class="token keyword">mut</span> fut <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
        <span class="token class-name">SomeResource</span><span class="token punctuation">::</span><span class="token function">some_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world!&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\uFF0CFutures \u7684\u72B6\u6001\u4E0E Generator \u7684\u72B6\u6001\u4E0D\u540C\u3002</p><p>\u5F02\u6B65\u5757\u5C06\u8FD4\u56DE\u4E00\u4E2A Future \u800C\u4E0D\u662F Generator\uFF0C\u4F46\u662F Future \u7684\u5DE5\u4F5C\u65B9\u5F0F\u548C Generator \u7684\u5185\u90E8\u5DE5\u4F5C\u65B9\u5F0F\u662F\u76F8\u4F3C\u7684\u3002</p><p>\u6211\u4EEC\u4E0D\u8C03\u7528<code>Generator::resume</code>\uFF0C\u800C\u662F\u8C03\u7528 <code>Future::poll</code>\uFF0C\u5E76\u4E14\u4E0D\u8FD4\u56DE generated \u6216 Complete\uFF0C\u800C\u662F\u8FD4\u56DE Pending \u6216 Ready\u3002 Future\u4E2D\u7684\u6BCF\u4E00\u4E2Aawait\u5C31\u50CF\u751F\u6210\u5668\u4E2D\u7684\u4E00\u4E2Ayield\u3002</p><p>\u4F60\u770B\u5230\u4ED6\u4EEC\u73B0\u5728\u662F\u600E\u4E48\u8054\u7CFB\u8D77\u6765\u7684\u4E86\u5417\uFF1F</p><p>\u8FD9\u5C31\u662F\u4E3A\u4EC0\u4E48\u7406\u89E3\u4E86\u751F\u6210\u5668\u5982\u4F55\u5DE5\u4F5C\u4EE5\u53CA\u4ED6\u9700\u8981\u9762\u5BF9\u7684\u6311\u6218,\u4E5F\u5C31\u7406\u89E3\u4E86Future\u5982\u4F55\u5DE5\u4F5C\u4EE5\u53CA\u5B83\u9700\u8981\u9762\u5BF9\u7684\u6311\u6218\u3002</p><p>\u8DE8yield/await\u7684\u501F\u7528\u5C31\u662F\u8FD9\u6837.</p><h3 id="\u5956\u52B1\u90E8\u5206-\u6B63\u5728\u4F7F\u7528\u7684\u81EA\u5F15\u7528\u751F\u6210\u5668" tabindex="-1">\u5956\u52B1\u90E8\u5206-\u6B63\u5728\u4F7F\u7528\u7684\u81EA\u5F15\u7528\u751F\u6210\u5668 <a class="header-anchor" href="#\u5956\u52B1\u90E8\u5206-\u6B63\u5728\u4F7F\u7528\u7684\u81EA\u5F15\u7528\u751F\u6210\u5668" aria-hidden="true">#</a></h3><p>\u611F\u8C22<a href="https://github.com/rust-lang/rust/pull/45337/files" target="_blank" rel="noopener noreferrer"> PR#45337 </a>,\u4F60\u53EF\u4EE5\u5728nightly\u7248\u672C\u4E2D\u4F7F\u7528static\u5173\u952E\u5B57\u8FD0\u884C\u4E0A\u9762\u7684\u4F8B\u5B50. \u4F60\u53EF\u4EE5\u8BD5\u8BD5:</p><blockquote><p>\u8981\u6CE8\u610F\u7684\u662F\uFF0CAPI\u53EF\u80FD\u4F1A\u53D1\u751F\u6539\u53D8\u3002 \u5728\u6211\u64B0\u5199\u672C\u4E66\u65F6\uFF0C\u751F\u6210\u5668API\u6709\u4E00\u4E2A\u66F4\u6539\uFF0C\u6DFB\u52A0\u4E86\u5BF9\u201C resume\u201D\u53C2\u6570\u7684\u652F\u6301\uFF0C\u4EE5\u4FBF\u4F20\u9012\u5230\u751F\u6210\u5668\u95ED\u5305\u4E2D\u3002 \u53EF\u4EE5\u5173\u6CE8<a href="https://github.com/rust-lang/rfcs/blob/master/text/2033-experimental-coroutines.md" target="_blank" rel="noopener noreferrer">RFC#033</a>\u7684\u76F8\u5173<a href="https://github.com/rust-lang/rust/issues/43122" target="_blank" rel="noopener noreferrer">\u95EE\u9898#4312</a>\u7684\u8FDB\u5C55\u3002</p></blockquote><div class="language-rust line-numbers-mode"><pre><code> <span class="token attribute attr-name">#![feature(generators, generator_trait)]</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Generator</span><span class="token punctuation">,</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> gen1 <span class="token operator">=</span> <span class="token keyword">static</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
        <span class="token keyword">yield</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world!&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> gen2 <span class="token operator">=</span> <span class="token keyword">static</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
        <span class="token keyword">yield</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world!&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> pinned1 <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">pin</span><span class="token punctuation">(</span>gen1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> pinned2 <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">pin</span><span class="token punctuation">(</span>gen2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> pinned1<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Gen1 got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> pinned2<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Gen2 got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> _ <span class="token operator">=</span> pinned1<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> pinned2<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="\u516D-pin" tabindex="-1">\u516D Pin <a class="header-anchor" href="#\u516D-pin" aria-hidden="true">#</a></h2><h3 id="\u6982\u8FF0-3" tabindex="-1">\u6982\u8FF0 <a class="header-anchor" href="#\u6982\u8FF0-3" aria-hidden="true">#</a></h3><blockquote><p>\u8BD1\u8005\u6CE8: Pin\u662F\u5728\u4F7F\u7528Future\u65F6\u4E00\u4E2A\u975E\u5E38\u91CD\u8981\u7684\u6982\u5FF5,\u6211\u7684\u7406\u89E3\u662F: \u901A\u8FC7\u4F7F\u7528Pin,\u8BA9\u7528\u6237\u65E0\u6CD5\u5B89\u5168\u7684\u83B7\u53D6\u5230<code>&amp;mut T</code>,\u8FDB\u800C\u65E0\u6CD5\u8FDB\u884C\u4E0A\u8FF0\u4F8B\u5B50\u4E2D\u7684swap. \u5982\u679C\u4F60\u89C9\u5F97\u4F60\u7684\u548C\u8FD9\u4E2Astruct\u6CA1\u6709\u81EA\u5F15\u7528\u7684\u95EE\u9898,\u4F60\u53EF\u4EE5\u81EA\u5DF1\u5B9E\u73B0UnPin.</p></blockquote><ol><li>\u4E86\u89E3\u5982\u4F55\u4F7F\u7528Pin\u4EE5\u53CA\u5F53\u4F60\u81EA\u5DF1\u5B9E\u73B0<code>Future</code>\u7684\u65F6\u5019\u4E3A\u4EC0\u4E48\u9700\u8981Pin</li><li>\u7406\u89E3\u5982\u4F55\u8BA9\u81EA\u5F15\u7528\u7C7B\u578B\u88AB\u5B89\u5168\u7684\u4F7F\u7528</li><li>\u7406\u89E3\u8DE8&#39;await\`\u501F\u7528\u662F\u5982\u4F55\u5B9E\u73B0\u7684</li><li>\u5236\u5B9A\u4E00\u5957\u5B9E\u7528\u7684\u89C4\u5219\u6765\u5E2E\u52A9\u4F60\u4F7F\u7528Pin</li></ol><p>Pin\u662F\u5728<a href="https://github.com/rust-lang/rfcs/blob/master/text/2349-pin.md" target="_blank" rel="noopener noreferrer">RFC#2349</a>\u4E2D\u88AB\u63D0\u51FA\u7684.</p><p>\u8BA9\u6211\u4EEC\u76F4\u63A5\u4E86\u5F53\u7684\u8BF4\u5427,Pin\u662F\u8FD9\u4E00\u7CFB\u5217\u6982\u5FF5\u4E2D\u5F88\u96BE\u4E00\u5F00\u59CB\u5C31\u641E\u660E\u767D\u7684,\u4F46\u662F\u4E00\u65E6\u4F60\u7406\u89E3\u4E86\u5176\u5FC3\u667A\u6A21\u578B,\u5C31\u4F1A\u89C9\u5F97\u975E\u5E38\u5BB9\u6613\u7406\u89E3.</p><h3 id="\u5B9A\u4E49" tabindex="-1">\u5B9A\u4E49 <a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a></h3><p>Pin\u53EA\u4E0E\u6307\u9488\u6709\u5173,\u5728Rust\u4E2D\u5F15\u7528\u4E5F\u662F\u6307\u9488.</p><p>Pin\u6709<code>Pin</code>\u7C7B\u578B\u548C<code>Unpin</code>\u6807\u8BB0\u7EC4\u6210(UnPin\u662FRust\u4E2D\u4E3A\u6570\u4E0D\u591A\u7684\u51E0\u4E2Aauto trait). Pin\u5B58\u5728\u7684\u76EE\u7684\u5C31\u662F\u4E3A\u4E86\u8BA9\u90A3\u4E9B\u5B9E\u73B0\u4E86<code>!UnPin</code>\u7684\u7C7B\u578B\u9075\u5B88\u7279\u5B9A\u7684\u89C4\u5219.</p><p>\u662F\u7684\uFF0C\u4F60\u662F\u5BF9\u7684\uFF0C\u8FD9\u91CC\u662F\u53CC\u91CD\u5426\u5B9A<code>!Unpin</code> \u7684\u610F\u601D\u662F\u201Cnot-un-pin\u201D\u3002</p><blockquote><p>\u8FD9\u4E2A\u547D\u540D\u65B9\u6848\u662F Rusts \u7684\u5B89\u5168\u7279\u6027\u4E4B\u4E00\uFF0C\u5B83\u6545\u610F\u6D4B\u8BD5\u60A8\u662F\u5426\u56E0\u4E3A\u592A\u7D2F\u800C\u65E0\u6CD5\u5B89\u5168\u5730\u4F7F\u7528\u8FD9\u4E2A\u6807\u8BB0\u6765\u5B9E\u73B0\u7C7B\u578B\u3002 \u5982\u679C\u4F60\u56E0\u4E3A<code>UnPin</code>\u5F00\u59CB\u611F\u5230\u56F0\u60D1\uFF0C\u6216\u8005\u751A\u81F3\u751F\u6C14\uFF0C\u90A3\u4E48\u4F60\u5C31\u5E94\u8BE5\u8FD9\u6837\u505A\uFF01 \u662F\u65F6\u5019\u653E\u4E0B\u5DE5\u4F5C\uFF0C\u4EE5\u5168\u65B0\u7684\u5FC3\u6001\u91CD\u65B0\u5F00\u59CB\u660E\u5929\u7684\u751F\u6D3B\u4E86\uFF0C\u8FD9\u662F\u4E00\u4E2A\u597D\u5146\u5934\u3002</p></blockquote><p>\u66F4\u4E25\u8083\u5730\u8BF4\uFF0C\u6211\u8BA4\u4E3A\u6709\u5FC5\u8981\u63D0\u5230\uFF0C\u9009\u62E9\u8FD9\u4E9B\u540D\u5B57\u662F\u6709\u6B63\u5F53\u7406\u7531\u7684\u3002 \u547D\u540D\u5E76\u4E0D\u5BB9\u6613\uFF0C\u6211\u66FE\u7ECF\u8003\u8651\u8FC7\u5728\u8FD9\u672C\u4E66\u4E2D\u91CD\u547D\u540D <code>Unpin</code> \u548C<code>!UnPin</code> ,\u4F7F\u4ED6\u4EEC\u66F4\u5BB9\u6613\u7406\u89E3\u3002</p><p>\u7136\u800C\uFF0C\u4E00\u4F4D\u7ECF\u9A8C\u4E30\u5BCC\u7684Rust\u793E\u533A\u6210\u5458\u8BA9\u6211\u76F8\u4FE1\uFF0C\u5F53\u7B80\u5355\u5730\u7ED9\u8FD9\u4E9B\u6807\u8BB0\u8D77\u4E0D\u540C\u7684\u540D\u5B57\u65F6\uFF0C\u6709\u592A\u591A\u7684\u7EC6\u5FAE\u5DEE\u522B\u548C\u8FB9\u7F18\u60C5\u51B5\u9700\u8981\u8003\u8651\uFF0C\u800C\u8FD9\u4E9B\u5F88\u5BB9\u6613\u88AB\u5FFD\u7565\uFF0C\u6211\u76F8\u4FE1\u6211\u4EEC\u5C06\u4E0D\u5F97\u4E0D\u4E60\u60EF\u5B83\u4EEC\u5E76\u6309\u539F\u6837\u4F7F\u7528\u5B83\u4EEC\u3002</p><p>\u5982\u679C\u4F60\u613F\u610F\uFF0C\u4F60\u53EF\u4EE5\u4ECE<a href="https://internals.rust-lang.org/t/naming-pin-anchor-move/6864" target="_blank" rel="noopener noreferrer">\u5185\u90E8\u8BA8\u8BBA</a>\u4E2D\u8BFB\u5230\u4E00\u4E9B\u8BA8\u8BBA\u3002</p><h3 id="pinning\u548C\u81EA\u5F15\u7528\u7ED3\u6784" tabindex="-1">Pinning\u548C\u81EA\u5F15\u7528\u7ED3\u6784 <a class="header-anchor" href="#pinning\u548C\u81EA\u5F15\u7528\u7ED3\u6784" aria-hidden="true">#</a></h3><p>\u8BA9\u6211\u4EEC\u4ECE\u4E0A\u4E00\u7AE0(\u751F\u6210\u5668\u90A3\u4E00\u7AE0)\u505C\u6B62\u7684\u5730\u65B9\u5F00\u59CB\uFF0C\u901A\u8FC7\u4F7F\u7528\u4E00\u4E9B\u6BD4\u72B6\u6001\u673A\u66F4\u5BB9\u6613\u63A8\u7406\u7684\u81EA\u5F15\u7528\u7ED3\u6784\uFF0C\u4F7F\u6211\u4EEC\u5728\u751F\u6210\u5668\u4E2D\u770B\u5230\u7684\u4F7F\u7528\u81EA\u5F15\u7528\u7ED3\u6784\u7684\u95EE\u9898\u53D8\u5F97\u7B80\u5355\u5F97\u591A:</p><p>\u73B0\u5728\u6211\u4EEC\u7684\u4F8B\u5B50\u662F\u8FD9\u6837\u7684:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>pin<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">;</span>

  <span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Test</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    b<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>txt<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Test</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">,</span>
            b<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> self_ref<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>b <span class="token operator">=</span> self_ref<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">fn</span> <span class="token function-definition function">a</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>a
    <span class="token punctuation">}</span> 
    
    <span class="token keyword">fn</span> <span class="token function-definition function">b</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>\u8BA9\u6211\u4EEC\u6765\u56DE\u987E\u4E00\u4E0B\u8FD9\u4E2A\u4F8B\u5B50\uFF0C\u56E0\u4E3A\u6211\u4EEC\u5C06\u5728\u672C\u7AE0\u7684\u5176\u4F59\u90E8\u5206\u4F7F\u7528\u5B83\u3002</p><p>\u6211\u4EEC\u6709\u4E00\u4E2A\u81EA\u5F15\u7528\u7ED3\u6784\u4F53<code>Test</code>\u3002 Test\u9700\u8981\u521B\u5EFA\u4E00\u4E2Ainit\u65B9\u6CD5\uFF0C\u8FD9\u4E2A\u65B9\u6CD5\u5F88\u5947\u602A\uFF0C\u4F46\u662F\u4E3A\u4E86\u5C3D\u53EF\u80FD\u7B80\u77ED\uFF0C\u6211\u4EEC\u9700\u8981\u8FD9\u4E2A\u65B9\u6CD5\u3002</p><p>Test \u63D0\u4F9B\u4E86\u4E24\u79CD\u65B9\u6CD5\u6765\u83B7\u53D6\u5B57\u6BB5 a \u548C b \u503C\u7684\u5F15\u7528\u3002 \u56E0\u4E3A b \u662F a \u7684\u53C2\u8003\uFF0C\u6240\u4EE5\u6211\u4EEC\u628A\u5B83\u5B58\u50A8\u4E3A\u4E00\u4E2A\u6307\u9488\uFF0C\u56E0\u4E3A Rust \u7684\u501F\u7528\u89C4\u5219\u4E0D\u5141\u8BB8\u6211\u4EEC\u5B9A\u4E49\u8FD9\u4E2A\u751F\u547D\u5468\u671F\u3002</p><p>\u73B0\u5728\uFF0C\u8BA9\u6211\u4EEC\u7528\u8FD9\u4E2A\u4F8B\u5B50\u6765\u8BE6\u7EC6\u89E3\u91CA\u6211\u4EEC\u9047\u5230\u7684\u95EE\u9898:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test1 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test1<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test2 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test2<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u5728main\u51FD\u6570\u4E2D,\u6211\u4EEC\u9996\u5148\u5B9E\u4F8B\u5316Test\u7684\u4E24\u4E2A\u5B9E\u4F8B,\u7136\u540E\u8F93\u51FAtest1\u548Ctest2\u5404\u5B57\u6BB5\u7684\u503C,\u7ED3\u679C\u5982\u6211\u4EEC\u6240\u6599:</p><div class="language-"><pre><code>a: test1, b: test1
a: test2, b: test2
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u8BA9\u6211\u4EEC\u770B\u770B\uFF0C\u5982\u679C\u6211\u4EEC\u5C06\u5B58\u50A8\u5728 test1\u6307\u5411\u7684\u5185\u5B58\u4F4D\u7F6E\u7684\u6570\u636E\u4E0E\u5B58\u50A8\u5728 test2\u6307\u5411\u7684\u5185\u5B58\u4F4D\u7F6E\u7684\u6570\u636E\u8FDB\u884C\u4EA4\u6362\uFF0C\u4F1A\u53D1\u751F\u4EC0\u4E48\u60C5\u51B5\uFF0C\u53CD\u4E4B\u4EA6\u7136\u3002</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test1 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test1<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test2 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test2<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> test1<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u6211\u4EEC\u53EF\u80FD\u4F1A\u8BA4\u4E3A\u4F1A\u6253\u5370\u4E24\u8FB9test1,\u6BD4\u5982:</p><div class="language-rust line-numbers-mode"><pre><code>a<span class="token punctuation">:</span> test1<span class="token punctuation">,</span> b<span class="token punctuation">:</span> test1
a<span class="token punctuation">:</span> test1<span class="token punctuation">,</span> b<span class="token punctuation">:</span> test1
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u4F46\u662F\u5B9E\u9645\u4E0A\u6211\u4EEC\u5F97\u5230\u7684\u662F:</p><div class="language-"><pre><code>a: test1, b: test1
a: test1, b: test2
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u6307\u5411 test2.b \u7684\u6307\u9488\u4ECD\u7136\u6307\u5411test1\u5185\u90E8\u7684\u65E7\u4F4D\u7F6E\u3002 \u8BE5\u7ED3\u6784\u4E0D\u518D\u662F\u81EA\u5F15\u7528\u7684\uFF0C\u5B83\u4FDD\u5B58\u6307\u5411\u4E0D\u540C\u5BF9\u8C61\u4E2D\u7684\u5B57\u6BB5\u7684\u6307\u9488\u3002 \u8FD9\u610F\u5473\u7740\u6211\u4EEC\u4E0D\u80FD\u518D\u4F9D\u8D56test2.b\u7684\u751F\u5B58\u671F\u4E0Etest2\u7684\u751F\u5B58\u671F\u7ED1\u5B9A\u5728\u4E00\u8D77\u3002</p><p>\u5982\u679C\u4F60\u4ECD\u7136\u4E0D\u76F8\u4FE1\uFF0C\u8FD9\u81F3\u5C11\u53EF\u4EE5\u8BF4\u670D\u4F60:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test1 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test1<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test2 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test2<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> test1<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    test1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&quot;I&#39;ve totally changed now!&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u8FD9\u662F\u4E0D\u5E94\u8BE5\u53D1\u751F\u7684\u3002 \u76EE\u524D\u8FD8\u6CA1\u6709\u4E25\u91CD\u7684\u9519\u8BEF\uFF0C\u4F46\u662F\u60A8\u53EF\u4EE5\u60F3\u8C61\uFF0C\u4F7F\u7528\u8FD9\u4E9B\u4EE3\u7801\u5F88\u5BB9\u6613\u521B\u5EFA\u4E25\u91CD\u7684\u9519\u8BEF\u3002</p><p>\u6211\u521B\u5EFA\u4E86\u4E00\u4E2A\u56FE\u8868\u6765\u5E2E\u52A9\u53EF\u89C6\u5316\u6B63\u5728\u53D1\u751F\u7684\u4E8B\u60C5:</p><p><img alt="" data-src="swap_problem.jpg" loading="lazy" class="lazy"> \u56FE1: \u4EA4\u6362\u524D\u540E</p><p>\u6B63\u5982\u4F60\u770B\u5230\u7684,\u8FD9\u4E0D\u662F\u6211\u4EEC\u60F3\u8981\u7684\u7ED3\u679C. \u8FD9\u5F88\u5BB9\u6613\u5BFC\u81F4\u6BB5\u9519\u8BEF,\u4E5F\u5F88\u5BB9\u6613\u5BFC\u81F4\u5176\u4ED6\u610F\u60F3\u4E0D\u5230\u7684\u672A\u77E5\u884C\u4E3A\u4EE5\u53CA\u5931\u8D25.</p><h3 id="\u56FA\u5B9A\u5728\u6808\u4E0A" tabindex="-1">\u56FA\u5B9A\u5728\u6808\u4E0A <a class="header-anchor" href="#\u56FA\u5B9A\u5728\u6808\u4E0A" aria-hidden="true">#</a></h3><p>\u73B0\u5728\uFF0C\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7\u4F7F\u7528<code>Pin</code>\u6765\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\u3002 \u8BA9\u6211\u4EEC\u6765\u770B\u770B\u6211\u4EEC\u7684\u4F8B\u5B50\u662F\u4EC0\u4E48\u6837\u7684:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>pin<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>marker<span class="token punctuation">::</span></span><span class="token class-name">PhantomPinned</span><span class="token punctuation">;</span>

 <span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Test</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    b<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    _marker<span class="token punctuation">:</span> <span class="token class-name">PhantomPinned</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>


<span class="token keyword">impl</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>txt<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Test</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">,</span>
            b<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// This makes our type \`!Unpin\`</span>
            _marker<span class="token punctuation">:</span> <span class="token class-name">PhantomPinned</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">init</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> self_ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
        <span class="token keyword">let</span> this <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get_unchecked_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        this<span class="token punctuation">.</span>b <span class="token operator">=</span> self_ptr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">a</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">b</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>\u73B0\u5728\uFF0C\u6211\u4EEC\u5728\u8FD9\u91CC\u6240\u505A\u7684\u5C31\u662F\u56FA\u5B9A\u5230\u4E00\u4E2A\u6808\u5730\u5740\u3002\u5982\u679C\u6211\u4EEC\u7684\u7C7B\u578B\u5B9E\u73B0\u4E86<code>!UnPin</code>\uFF0C\u90A3\u4E48\u5B83\u5C06\u603B\u662F<code>unsafe</code>\u3002</p><p>\u6211\u4EEC\u5728\u8FD9\u91CC\u4F7F\u7528\u76F8\u540C\u7684\u6280\u5DE7\uFF0C\u5305\u62EC\u9700\u8981 init\u3002 \u5982\u679C\u6211\u4EEC\u60F3\u8981\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\u5E76\u8BA9\u7528\u6237\u907F\u514D<code>unsafe</code>\uFF0C\u6211\u4EEC\u9700\u8981\u5C06\u6570\u636E\u9489\u5728\u5806\u4E0A\uFF0C\u6211\u4EEC\u9A6C\u4E0A\u5C31\u4F1A\u5C55\u793A\u8FD9\u4E00\u70B9\u3002</p><p>\u8BA9\u6211\u4EEC\u770B\u770B\u5982\u679C\u6211\u4EEC\u73B0\u5728\u8FD0\u884C\u6211\u4EEC\u7684\u4F8B\u5B50\u4F1A\u53D1\u751F\u4EC0\u4E48:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// test1 is safe to move before we initialize it</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test1 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Notice how we shadow \`test1\` to prevent it from beeing accessed again</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test1 <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> test1<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test2 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test2 <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> test2<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">a</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">b</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">a</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">b</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u73B0\u5728\uFF0C\u5982\u679C\u6211\u4EEC\u5C1D\u8BD5\u4F7F\u7528\u4E0A\u6B21\u4F7F\u6211\u4EEC\u9677\u5165\u9EBB\u70E6\u7684\u95EE\u9898\uFF0C\u60A8\u5C06\u5F97\u5230\u4E00\u4E2A\u7F16\u8BD1\u9519\u8BEF\u3002</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test1 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test1 <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> test1<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test2 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test2 <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> test2<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">a</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">b</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">swap</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">a</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">b</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u6B63\u5982\u60A8\u4ECE\u8FD0\u884C\u4EE3\u7801\u6240\u5F97\u5230\u7684\u9519\u8BEF\u4E2D\u770B\u5230\u7684\u90A3\u6837\uFF0C\u7C7B\u578B\u7CFB\u7EDF\u963B\u6B62\u6211\u4EEC\u4EA4\u6362\u56FA\u5B9A\u6307\u9488\u3002</p><blockquote><p>\u9700\u8981\u6CE8\u610F\u7684\u662F\uFF0C\u6808pinning\u603B\u662F\u4F9D\u8D56\u4E8E\u6211\u4EEC\u6240\u5728\u7684\u5F53\u524D\u6808\u5E27\uFF0C\u56E0\u6B64\u6211\u4EEC\u4E0D\u80FD\u5728\u4E00\u4E2A\u6808\u5E27\u4E2D\u521B\u5EFA\u4E00\u4E2A\u81EA\u5F15\u7528\u5BF9\u8C61\u5E76\u8FD4\u56DE\u5B83\uFF0C\u56E0\u4E3A\u4EFB\u4F55\u6307\u5411\u201Cself\u201D\u7684\u6307\u9488\u90FD\u662F\u65E0\u6548\u7684\u3002 \u5982\u679C\u4F60\u628A\u4E00\u4E2A\u503C\u56FA\u5B9A\u5728\u4E00\u4E2A\u6808\u4E0A\uFF0C\u8FD9\u4E5F\u4F1A\u8BA9\u4F60\u627F\u62C5\u5F88\u591A\u8D23\u4EFB\u3002 \u4E00\u4E2A\u5F88\u5BB9\u6613\u72AF\u7684\u9519\u8BEF\u662F\uFF0C\u5FD8\u8BB0\u5BF9\u539F\u59CB\u53D8\u91CF\u8FDB\u884C\u9634\u5F71\u5904\u7406\uFF0C\u56E0\u4E3A\u8FD9\u6837\u53EF\u4EE5\u5728\u521D\u59CB\u5316\u540Edrop\u56FA\u5B9A\u7684\u6307\u9488\u5E76\u8BBF\u95EE\u539F\u6765\u7684\u503C:</p></blockquote><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> <span class="token keyword">mut</span> test1 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">let</span> <span class="token keyword">mut</span> test1_pin <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> test1<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span>test1_pin<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">drop</span><span class="token punctuation">(</span>test1_pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token keyword">let</span> <span class="token keyword">mut</span> test2 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> test1<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Not self referential anymore: {:?}&quot;</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="\u56FA\u5B9A\u5728\u5806\u4E0A" tabindex="-1">\u56FA\u5B9A\u5728\u5806\u4E0A <a class="header-anchor" href="#\u56FA\u5B9A\u5728\u5806\u4E0A" aria-hidden="true">#</a></h3><p>\u4E3A\u4E86\u5B8C\u6574\u6027\uFF0C\u8BA9\u6211\u4EEC\u5220\u9664\u4E00\u4E9B\u4E0D\u5B89\u5168\u7684\u5185\u5BB9\uFF0C\u901A\u8FC7\u4EE5\u5806\u5206\u914D\u4E3A\u4EE3\u4EF7\u6765\u6D88\u9664<code>init</code>\u65B9\u6CD5\u3002 \u56FA\u5B9A\u5230\u5806\u662F\u5B89\u5168\u7684\uFF0C\u8FD9\u6837\u7528\u6237\u4E0D\u9700\u8981\u5B9E\u73B0\u4EFB\u4F55\u4E0D\u5B89\u5168\u7684\u4EE3\u7801:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>pin<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>marker<span class="token punctuation">::</span></span><span class="token class-name">PhantomPinned</span><span class="token punctuation">;</span>

 <span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Test</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    b<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    _marker<span class="token punctuation">:</span> <span class="token class-name">PhantomPinned</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>txt<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">,</span>
            b<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            _marker<span class="token punctuation">:</span> <span class="token class-name">PhantomPinned</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> boxed <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">pin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> self_ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>boxed<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> boxed<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get_unchecked_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>b <span class="token operator">=</span> self_ptr <span class="token punctuation">}</span><span class="token punctuation">;</span>

        boxed
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">a</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">b</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test1 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test2 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span>test1<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test1<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a: {}, b: {}&quot;</span><span class="token punctuation">,</span>test2<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test2<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>\u4E8B\u5B9E\u4E0A\u5C31\u7B97\u662F<code>!Unpin</code>\u6709\u610F\u4E49,\u56FA\u5B9A\u4E00\u4E2A\u5806\u5206\u914D\u7684\u503C\u4E5F\u662F\u5B89\u5168\u7684\u3002 \u4E00\u65E6\u5728\u5806\u4E0A\u5206\u914D\u4E86\u6570\u636E\uFF0C\u5B83\u5C31\u4F1A\u6709\u4E00\u4E2A\u7A33\u5B9A\u7684\u5730\u5740\u3002</p><p>\u4F5C\u4E3A API \u7684\u7528\u6237\uFF0C\u6211\u4EEC\u4E0D\u9700\u8981\u7279\u522B\u6CE8\u610F\u5E76\u786E\u4FDD\u81EA\u5F15\u7528\u6307\u9488\u4FDD\u6301\u6709\u6548\u3002</p><p>\u4E5F\u6709\u4E00\u4E9B\u65B9\u6CD5\u80FD\u591F\u5BF9\u56FA\u5B9A\u6808\u4E0A\u63D0\u4F9B\u4E00\u4E9B\u5B89\u5168\u4FDD\u8BC1\uFF0C\u4F46\u662F\u73B0\u5728\u6211\u4EEC\u4F7F\u7528<a href="https://docs.rs/pin-project/" target="_blank" rel="noopener noreferrer">pin_project</a>\u8FD9\u4E2A\u5305\u6765\u5B9E\u73B0\u8FD9\u4E00\u70B9\u3002</p><h3 id="pinning\u7684\u4E00\u4E9B\u5B9E\u7528\u89C4\u5219" tabindex="-1">Pinning\u7684\u4E00\u4E9B\u5B9E\u7528\u89C4\u5219 <a class="header-anchor" href="#pinning\u7684\u4E00\u4E9B\u5B9E\u7528\u89C4\u5219" aria-hidden="true">#</a></h3><ol><li>\u9488\u5BF9<code>T:UnPin</code>(\u8FD9\u662F\u9ED8\u8BA4\u503C),<code>Pin&lt;&#39;a,T&gt;</code>\u5B8C\u5168\u5B9A\u4EF7\u4E0E<code>&amp;&#39;a mut T</code>. \u6362\u53E5\u8BDD\u8BF4: <code>UnPin</code>\u610F\u5473\u7740\u8FD9\u4E2A\u7C7B\u578B\u5373\u4F7F\u5728\u56FA\u5B9A\u65F6\u4E5F\u53EF\u4EE5\u79FB\u52A8\uFF0C\u6240\u4EE5Pin\u5BF9\u8FD9\u4E2A\u7C7B\u578B\u6CA1\u6709\u5F71\u54CD\u3002</li><li>\u9488\u5BF9<code>T:!UnPin</code>,\u4ECE<code>Pin&lt; T&gt;</code>\u83B7\u53D6\u5230<code>&amp;mut T</code>,\u5219\u5FC5\u987B\u4F7F\u7528unsafe. \u6362\u53E5\u8BDD\u8BF4,<code>!Unpin</code>\u80FD\u591F\u963B\u6B62API\u7684\u4F7F\u7528\u8005\u79FB\u52A8T,\u9664\u975E\u4ED6\u5199\u51FAunsafe\u7684\u4EE3\u7801.</li><li>Pinning\u5BF9\u4E8E\u5185\u5B58\u5206\u914D\u6CA1\u6709\u4EC0\u4E48\u7279\u522B\u7684\u4F5C\u7528\uFF0C\u6BD4\u5982\u5C06\u5176\u653E\u5165\u67D0\u4E2A\u201C\u53EA\u8BFB\u201D\u5185\u5B58\u6216\u4EFB\u4F55\u5947\u7279\u7684\u5185\u5B58\u4E2D\u3002 \u5B83\u53EA\u4F7F\u7528\u7C7B\u578B\u7CFB\u7EDF\u6765\u9632\u6B62\u5BF9\u8BE5\u503C\u8FDB\u884C\u67D0\u4E9B\u64CD\u4F5C\u3002</li><li>\u5927\u591A\u6570\u6807\u51C6\u5E93\u7C7B\u578B\u5B9E\u73B0 Unpin\u3002 \u8FD9\u540C\u6837\u9002\u7528\u4E8E\u4F60\u5728 Rust \u4E2D\u9047\u5230\u7684\u5927\u591A\u6570\u201C\u6B63\u5E38\u201D\u7C7B\u578B\u3002 <code>Future</code>\u548C<code>Generators</code>\u662F\u4E24\u4E2A\u4F8B\u5916\u3002</li><li>Pin\u7684\u4E3B\u8981\u7528\u9014\u5C31\u662F\u81EA\u5F15\u7528\u7C7B\u578B,Rust\u8BED\u8A00\u7684\u6240\u6709\u8FD9\u4E9B\u8C03\u6574\u5C31\u662F\u4E3A\u4E86\u5141\u8BB8\u8FD9\u4E2A. \u8FD9\u4E2AAPI\u4E2D\u4ECD\u7136\u6709\u4E00\u4E9B\u95EE\u9898\u9700\u8981\u63A2\u8BA8.</li><li><code>!UnPin</code>\u8FD9\u4E9B\u7C7B\u578B\u7684\u5B9E\u73B0\u5F88\u6709\u53EF\u80FD\u662F\u4E0D\u5B89\u5168\u7684. \u5728\u8FD9\u79CD\u7C7B\u578B\u88AB\u9489\u4F4F\u540E\u79FB\u52A8\u5B83\u53EF\u80FD\u4F1A\u5BFC\u81F4\u7A0B\u5E8F\u5D29\u6E83\u3002 \u5728\u64B0\u5199\u672C\u4E66\u65F6\uFF0C\u521B\u5EFA\u548C\u8BFB\u53D6\u81EA\u5F15\u7528\u7ED3\u6784\u7684\u5B57\u6BB5\u4ECD\u7136\u9700\u8981\u4E0D\u5B89\u5168\u7684\u65B9\u6CD5(\u552F\u4E00\u7684\u65B9\u6CD5\u662F\u521B\u5EFA\u4E00\u4E2A\u5305\u542B\u6307\u5411\u81EA\u8EAB\u7684\u539F\u59CB\u6307\u9488\u7684\u7ED3\u6784)\u3002</li><li>\u5F53\u4F7F\u7528nightly\u7248\u672C\u65F6,\u4F60\u53EF\u4EE5\u5728\u4E00\u4E2A\u4F7F\u7528\u7279\u6027\u6807\u8BB0\u5728\u4E00\u4E2A\u7C7B\u578B\u4E0A\u6DFB\u52A0<code>!UnPin</code>. \u5F53\u4F7F\u7528stable\u7248\u672C\u65F6,\u53EF\u4EE5\u5C06std: : marker: : PhantomPinned \u6DFB\u52A0\u5230\u7C7B\u578B\u4E0A\u3002</li><li>\u4F60\u65E2\u53EF\u4EE5\u56FA\u5B9A\u4E00\u4E2A\u6808\u4E0A\u7684\u5BF9\u8C61\u4E5F\u53EF\u4EE5\u56FA\u5B9A\u4E00\u4E2A\u5806\u4E0A\u7684\u5BF9\u8C61.</li><li>\u5C06\u4E00\u4E2A<code>!UnPin</code>\u7684\u6307\u5411\u6808\u4E0A\u7684\u6307\u9488\u56FA\u5B9A\u9700\u8981unsafe.</li><li>\u5C06\u4E00\u4E2A<code>!UnPin</code>\u7684\u6307\u5411\u5806\u4E0A\u7684\u6307\u9488\u56FA\u5B9A,\u4E0D\u9700\u8981unsafe,\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528<code>Box::Pin</code>.</li></ol><blockquote><p>\u4E0D\u5B89\u5168\u7684\u4EE3\u7801\u5E76\u4E0D\u610F\u5473\u7740\u5B83\u771F\u7684\u201Cunsafe\u201D \uFF0C\u5B83\u53EA\u662F\u51CF\u8F7B\u4E86\u901A\u5E38\u4ECE\u7F16\u8BD1\u5668\u5F97\u5230\u7684\u4FDD\u8BC1\u3002 \u4E00\u4E2A\u4E0D\u5B89\u5168\u7684\u5B9E\u73B0\u53EF\u80FD\u662F\u5B8C\u5168\u5B89\u5168\u7684\uFF0C\u4F46\u662F\u60A8\u6CA1\u6709\u7F16\u8BD1\u5668\u4FDD\u8BC1\u7684\u5B89\u5168\u7F51\u3002</p></blockquote><h3 id="\u6620\u5C04-\u7ED3\u6784\u4F53\u7684\u56FA\u5B9A" tabindex="-1">\u6620\u5C04/\u7ED3\u6784\u4F53\u7684\u56FA\u5B9A <a class="header-anchor" href="#\u6620\u5C04-\u7ED3\u6784\u4F53\u7684\u56FA\u5B9A" aria-hidden="true">#</a></h3><p>\u7B80\u800C\u8A00\u4E4B\uFF0C\u6295\u5F71\u662F\u4E00\u4E2A\u7F16\u7A0B\u8BED\u8A00\u672F\u8BED\u3002 Mystruct.field1\u662F\u4E00\u4E2A\u6295\u5F71\u3002 \u7ED3\u6784\u4F53\u7684\u56FA\u5B9A\u662F\u5728\u6BCF\u4E00\u4E2A\u5B57\u6BB5\u4E0A\u4F7F\u7528Pin\u3002 \u8FD9\u91CC\u6709\u4E00\u4E9B\u6CE8\u610F\u4E8B\u9879\uFF0C\u60A8\u901A\u5E38\u4E0D\u4F1A\u770B\u5230\uFF0C\u56E0\u6B64\u6211\u53C2\u8003\u76F8\u5173\u6587\u6863\u3002</p><h3 id="pin\u548Cdrop" tabindex="-1">Pin\u548CDrop <a class="header-anchor" href="#pin\u548Cdrop" aria-hidden="true">#</a></h3><p>Pin\u4FDD\u8BC1\u4ECE\u503C\u88AB\u56FA\u5B9A\u5230\u88AB\u5220\u9664\u7684\u90A3\u4E00\u523B\u8D77\u4E00\u76F4\u5B58\u5728\u3002 \u800C\u5728Drop\u5B9E\u73B0\u4E2D\uFF0C\u60A8\u9700\u8981\u4E00\u4E2A\u53EF\u53D8\u7684 self \u5F15\u7528\uFF0C\u8FD9\u610F\u5473\u7740\u5728\u9488\u5BF9\u56FA\u5B9A\u7C7B\u578B\u5B9E\u73B0 Drop \u65F6\u5FC5\u987B\u683C\u5916\u5C0F\u5FC3\u3002</p><h3 id="\u628A\u5B83\u4EEC\u653E\u5728\u4E00\u8D77" tabindex="-1">\u628A\u5B83\u4EEC\u653E\u5728\u4E00\u8D77 <a class="header-anchor" href="#\u628A\u5B83\u4EEC\u653E\u5728\u4E00\u8D77" aria-hidden="true">#</a></h3><p>\u5F53\u6211\u4EEC\u5B9E\u73B0\u81EA\u5DF1\u7684<code>Futures</code>\u7684\u65F6\u5019,\u8FD9\u6B63\u662F\u6211\u4EEC\u8981\u505A\u7684\uFF0C\u6211\u4EEC\u5F88\u5FEB\u5C31\u5B8C\u6210\u4E86\u3002</p><h3 id="\u5956\u52B1\u90E8\u5206-2" tabindex="-1">\u5956\u52B1\u90E8\u5206 <a class="header-anchor" href="#\u5956\u52B1\u90E8\u5206-2" aria-hidden="true">#</a></h3><p><strong>\u4FEE\u590D\u6211\u4EEC\u5B9E\u73B0\u7684\u81EA\u5F15\u7528\u751F\u6210\u5668\u4EE5\u53CA\u5B66\u4E60\u66F4\u591A\u7684\u5173\u4E8EPin\u7684\u77E5\u8BC6.</strong></p><p>\u4F46\u662F\u73B0\u5728\uFF0C\u8BA9\u6211\u4EEC\u4F7F\u7528 Pin \u6765\u9632\u6B62\u8FD9\u4E2A\u95EE\u9898\u3002 \u6211\u4E00\u76F4\u5728\u8BC4\u8BBA\uFF0C\u4EE5\u4FBF\u66F4\u5BB9\u6613\u5730\u53D1\u73B0\u548C\u7406\u89E3\u6211\u4EEC\u9700\u8981\u505A\u51FA\u7684\u6539\u53D8\u3002</p><div class="language-rust line-numbers-mode"><pre><code> <span class="token attribute attr-name">#![feature(optin_builtin_traits, negative_impls)]</span> <span class="token comment">// needed to implement \`!Unpin\`</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>pin<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> gen1 <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> gen2 <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Before we pin the pointers, this is safe to do</span>
    <span class="token comment">// std::mem::swap(&amp;mut gen, &amp;mut gen2);</span>

    <span class="token comment">// constructing a \`Pin::new()\` on a type which does not implement \`Unpin\` is</span>
    <span class="token comment">// unsafe. A value pinned to heap can be constructed while staying in safe</span>
    <span class="token comment">// Rust so we can use that to avoid unsafe. You can also use crates like</span>
    <span class="token comment">// \`pin_utils\` to pin to the stack safely, just remember that they use</span>
    <span class="token comment">// unsafe under the hood so it&#39;s like using an already-reviewed unsafe</span>
    <span class="token comment">// implementation.</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> pinned1 <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">pin</span><span class="token punctuation">(</span>gen1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> pinned2 <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">pin</span><span class="token punctuation">(</span>gen2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Uncomment these if you think it&#39;s safe to pin the values to the stack instead </span>
    <span class="token comment">// (it is in this case). Remember to comment out the two previous lines first.</span>
    <span class="token comment">//let mut pinned1 = unsafe { Pin::new_unchecked(&amp;mut gen1) };</span>
    <span class="token comment">//let mut pinned2 = unsafe { Pin::new_unchecked(&amp;mut gen2) };</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> pinned1<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Gen1 got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> pinned2<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Gen2 got value {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// This won&#39;t work:</span>
    <span class="token comment">// std::mem::swap(&amp;mut gen, &amp;mut gen2);</span>
    <span class="token comment">// This will work but will just swap the pointers so nothing bad happens here:</span>
    <span class="token comment">// std::mem::swap(&amp;mut pinned1, &amp;mut pinned2);</span>

    <span class="token keyword">let</span> _ <span class="token operator">=</span> pinned1<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> pinned2<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token class-name">Y</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Yielded</span><span class="token punctuation">(</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    <span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">}</span>

<span class="token keyword">trait</span> <span class="token type-definition class-name">Generator</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token class-name">Enter</span><span class="token punctuation">,</span>
    <span class="token class-name">Yield1</span> <span class="token punctuation">{</span>
        to_borrow<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        borrowed<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Exit</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// This tells us that the underlying pointer is not safe to move after pinning.</span>
<span class="token comment">// In this case, only we as implementors &quot;feel&quot; this, however, if someone is</span>
<span class="token comment">// relying on our Pinned pointer this will prevent them from moving it. You need</span>
<span class="token comment">// to enable the feature flag \` #![feature(optin_builtin_traits)]\` and use the</span>
<span class="token comment">// nightly compiler to implement \`!Unpin\`. Normally, you would use</span>
<span class="token comment">// \`std::marker::PhantomPinned\` to indicate that the struct is \`!Unpin\`.</span>
<span class="token keyword">impl</span> <span class="token operator">!</span><span class="token class-name">Unpin</span> <span class="token keyword">for</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Generator</span> <span class="token keyword">for</span> <span class="token class-name">GeneratorA</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Yield</span> <span class="token operator">=</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Return</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">resume</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">GeneratorState</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Yield</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Return</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// lets us get ownership over current state</span>
        <span class="token keyword">let</span> this <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get_unchecked_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">match</span> this <span class="token punctuation">{</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Enter</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> to_borrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> borrowed <span class="token operator">=</span> <span class="token operator">&amp;</span>to_borrow<span class="token punctuation">;</span>
                <span class="token keyword">let</span> res <span class="token operator">=</span> borrowed<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>this <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

                <span class="token comment">// Trick to actually get a self reference. We can&#39;t reference</span>
                <span class="token comment">// the \`String\` earlier since these references will point to the</span>
                <span class="token comment">// location in this stack frame which will not be valid anymore</span>
                <span class="token comment">// when this function returns.</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>to_borrow<span class="token punctuation">,</span> borrowed<span class="token punctuation">}</span> <span class="token operator">=</span> this <span class="token punctuation">{</span>
                    <span class="token operator">*</span>borrowed <span class="token operator">=</span> to_borrow<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Yielded</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Yield1</span> <span class="token punctuation">{</span>borrowed<span class="token punctuation">,</span> <span class="token punctuation">..</span><span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> borrowed<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token operator">*</span>borrowed<span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} world&quot;</span><span class="token punctuation">,</span> borrowed<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>this <span class="token operator">=</span> <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span><span class="token punctuation">;</span>
                <span class="token class-name">GeneratorState</span><span class="token punctuation">::</span><span class="token class-name">Complete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">GeneratorA</span><span class="token punctuation">::</span><span class="token class-name">Exit</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t advance an exited generator!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br></div></div><p>\u73B0\u5728\uFF0C\u6B63\u5982\u4F60\u6240\u770B\u5230\u7684\uFF0C\u8FD9\u4E2A API \u7684\u4F7F\u7528\u8005\u5FC5\u987B:</p><ol><li>\u5C06\u503C\u88C5\u7BB1\uFF0C\u4ECE\u800C\u5728\u5806\u4E0A\u5206\u914D\u5B83</li><li>\u4F7F\u7528<code>unafe</code>\u7136\u540E\u628A\u503C\u56FA\u5B9A\u5230\u6808\u4E0A\u3002 \u7528\u6237\u77E5\u9053\u5982\u679C\u4ED6\u4EEC\u4E8B\u540E\u79FB\u52A8\u4E86\u8FD9\u4E2A\u503C\uFF0C\u90A3\u4E48\u4ED6\u4EEC\u5728\u5C31\u8FDD\u53CD\u4E86\u5F53\u4ED6\u4EEC\u4F7F\u7528unsafe\u65F6\u5019\u505A\u51FA\u7684\u627F\u8BFA,\u4E5F\u5C31\u662F\u4E00\u76F4\u6301\u6709.</li></ol><p>\u5E0C\u671B\u5728\u8FD9\u4E4B\u540E\uFF0C\u4F60\u4F1A\u77E5\u9053\u5F53\u4F60\u5728\u4E00\u4E2A\u5F02\u6B65\u51FD\u6570\u4E2D\u4F7F\u7528<code>yield</code>\u6216\u8005<code>await</code>\u5173\u952E\u8BCD\u65F6\u4F1A\u53D1\u751F\u4EC0\u4E48\uFF0C\u4EE5\u53CA\u5982\u679C\u6211\u4EEC\u60F3\u8981\u5B89\u5168\u5730\u8DE8yield/await\u501F\u7528\u65F6\u3002,\u4E3A\u4EC0\u4E48\u6211\u4EEC\u9700\u8981<code>Pin</code></p><h2 id="\u4E03-\u5B9E\u73B0futures-\u4E3B\u8981\u4F8B\u5B50" tabindex="-1">\u4E03 \u5B9E\u73B0Futures--\u4E3B\u8981\u4F8B\u5B50 <a class="header-anchor" href="#\u4E03-\u5B9E\u73B0futures-\u4E3B\u8981\u4F8B\u5B50" aria-hidden="true">#</a></h2><p>\u6211\u4EEC\u5C06\u7528\u4E00\u4E2A\u4F2Areactor\u548C\u4E00\u4E2A\u7B80\u5355\u7684\u6267\u884C\u5668\u521B\u5EFA\u6211\u4EEC\u81EA\u5DF1\u7684<code>Futures</code>\uFF0C\u5B83\u5141\u8BB8\u4F60\u5728\u6D4F\u89C8\u5668\u4E2D\u7F16\u8F91\u548C\u8FD0\u884C\u4EE3\u7801</p><p>\u6211\u5C06\u5411\u60A8\u4ECB\u7ECD\u8FD9\u4E2A\u793A\u4F8B\uFF0C\u4F46\u662F\u5982\u679C\u60A8\u60F3\u66F4\u6DF1\u5165\u7684\u7814\u7A76\u5B83\uFF0C\u60A8\u53EF\u4EE5<a href="https://github.com/cfsamson/examples-futures" target="_blank" rel="noopener noreferrer">\u514B\u9686\u5B58\u50A8\u5E93</a>\u5E76\u81EA\u5DF1\u5904\u7406\u4EE3\u7801\uFF0C\u6216\u8005\u76F4\u63A5\u4ECE\u4E0B\u4E00\u7AE0\u590D\u5236\u4EE3\u7801\u3002</p><p>readme\u6587\u4EF6\u4E2D\u89E3\u91CA\u4E86\u51E0\u4E2A\u5206\u652F\uFF0C\u5176\u4E2D\u6709\u4E24\u4E2A\u5206\u652F\u4E0E\u672C\u7AE0\u76F8\u5173\u3002 \u4E3B\u5206\u652F\u662F\u6211\u4EEC\u5728\u8FD9\u91CC\u7ECF\u8FC7\u7684\u4F8B\u5B50\uFF0C<code>basic_example_commented</code>\u5206\u652F\u662F\u8FD9\u4E2A\u5177\u6709\u5927\u91CF\u6CE8\u91CA\u7684\u4F8B\u5B50</p><blockquote><p>\u5982\u679C\u60A8\u5E0C\u671B\u8DDF\u968F\u6211\u4EEC\u7684\u6B65\u9AA4\uFF0C\u53EF\u4EE5\u901A\u8FC7\u521B\u5EFA\u4E00\u4E2A\u65B0\u7684\u6587\u4EF6\u5939\u521D\u59CB\u5316\u4E00\u4E2A\u65B0\u7684 cargo \u9879\u76EE\uFF0C\u5E76\u5728\u5176\u4E2D\u8FD0\u884C cargo init\u3002\u6240\u6709\u7684\u4E00\u5207\u90FD\u5728main.rs\u6587\u4EF6\u4E2D.</p></blockquote><h3 id="\u5B9E\u73B0\u6211\u4EEC\u81EA\u5DF1\u7684futures" tabindex="-1">\u5B9E\u73B0\u6211\u4EEC\u81EA\u5DF1\u7684Futures <a class="header-anchor" href="#\u5B9E\u73B0\u6211\u4EEC\u81EA\u5DF1\u7684futures" aria-hidden="true">#</a></h3><p>\u8BA9\u6211\u4EEC\u5148\u4ECE\u5F15\u5165\u4F9D\u8D56\u5F00\u59CB:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">future<span class="token punctuation">::</span></span><span class="token class-name">Future</span><span class="token punctuation">,</span> <span class="token namespace">pin<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">,</span> <span class="token namespace">sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token punctuation">{</span>channel<span class="token punctuation">,</span> <span class="token class-name">Sender</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Arc</span><span class="token punctuation">,</span> <span class="token class-name">Mutex</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">task<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Poll</span><span class="token punctuation">,</span> <span class="token class-name">RawWaker</span><span class="token punctuation">,</span> <span class="token class-name">RawWakerVTable</span><span class="token punctuation">,</span> <span class="token class-name">Waker</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">JoinHandle</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Duration</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="\u6267\u884C\u5668" tabindex="-1">\u6267\u884C\u5668 <a class="header-anchor" href="#\u6267\u884C\u5668" aria-hidden="true">#</a></h3><p>\u6267\u884C\u5668\u7684\u8D23\u4EFB\u662F\u83B7\u53D6\u4E00\u4E2A\u6216\u591A\u4E2A<code>Future</code>\u7136\u540E\u8FD0\u884C\u4ED6\u4EEC\u5230\u5B8C\u6210\u3002</p><p>\u6267\u884C\u5668\u62FF\u5230<code>Future</code>\u540E\u7684\u7B2C\u4E00\u4EF6\u4E8B\u5C31\u662F\u8F6E\u8BE2\u5B83.</p><p>\u8F6E\u8BE2\u540E\u53EF\u4EE5\u53D1\u73B0\u4EE5\u4E0B\u4E09\u79CD\u60C5\u51B5:</p><ol><li><code>Future</code>\u8FD4\u56DEReady,\u7136\u540E\u5C31\u53EF\u4EE5\u8C03\u5EA6\u5176\u4ED6\u4EFB\u4F55\u540E\u7EED\u64CD\u4F5C.</li><li>\u8FD9\u4E2A<code>Future</code>\u4ECE\u672A\u88AB\u8F6E\u8BE2\u8FC7,\u6240\u4EE5\u4F20\u5165\u4E00\u4E2A<code>Waker</code>,\u7136\u540E\u5C06\u5B83\u6302\u8D77</li><li>\u8FD9\u4E2A<code>Future</code>\u5DF2\u7ECF\u88AB\u8F6E\u8BE2\u8FC7,\u4F46\u662F\u8FD4\u56DE<code>Pending</code></li></ol><p>Rust\u901A\u8FC7<code>Waker</code>\u4E3AReactor\u548C\u6267\u884C\u5668\u63D0\u4F9B\u4E86\u901A\u4FE1\u65B9\u5F0F. reactor\u5B58\u50A8\u8FD9\u4E2A<code>Waker</code>,\u7136\u540E\u5728<code>Future</code>\u7B49\u5F85\u7684\u4E8B\u4EF6\u5B8C\u6210\u7684\u65F6\u5019\u8C03\u7528<code>Waker: : wake ()</code>,\u8FD9\u6837<code>Future</code>\u5C31\u4F1A\u88AB\u518D\u6B21\u8F6E\u8BE2.</p><p>\u6211\u4EEC\u7684\u6267\u884C\u5668\u4F1A\u662F\u8FD9\u4E2A\u6837\u5B50:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">// Our executor takes any object which implements the \`Future\` trait</span>
<span class="token keyword">fn</span> <span class="token function-definition function">block_on</span><span class="token operator">&lt;</span><span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token class-name">Future</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">mut</span> future<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">F</span><span class="token punctuation">::</span><span class="token class-name">Output</span> <span class="token punctuation">{</span>

    <span class="token comment">// the first thing we do is to construct a \`Waker\` which we&#39;ll pass on to</span>
    <span class="token comment">// the \`reactor\` so it can wake us up when an event is ready. </span>
    <span class="token keyword">let</span> mywaker <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">MyWaker</span><span class="token punctuation">{</span> thread<span class="token punctuation">:</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">let</span> waker <span class="token operator">=</span> <span class="token function">waker_into_waker</span><span class="token punctuation">(</span><span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">into_raw</span><span class="token punctuation">(</span>mywaker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// The context struct is just a wrapper for a \`Waker\` object. Maybe in the</span>
    <span class="token comment">// future this will do more, but right now it&#39;s just a wrapper.</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> cx <span class="token operator">=</span> <span class="token class-name">Context</span><span class="token punctuation">::</span><span class="token function">from_waker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>waker<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// So, since we run this on one thread and run one future to completion</span>
    <span class="token comment">// we can pin the \`Future\` to the stack. This is unsafe, but saves an</span>
    <span class="token comment">// allocation. We could \`Box::pin\` it too if we wanted. This is however</span>
    <span class="token comment">// safe since we shadow \`future\` so it can&#39;t be accessed again and will</span>
    <span class="token comment">// not move until it&#39;s dropped.</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> future <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> future<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// We poll in a loop, but it&#39;s not a busy loop. It will only run when</span>
    <span class="token comment">// an event occurs, or a thread has a &quot;spurious wakeup&quot; (an unexpected wakeup</span>
    <span class="token comment">// that can happen for no good reason).</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        
        <span class="token keyword">match</span> <span class="token class-name">Future</span><span class="token punctuation">::</span><span class="token function">poll</span><span class="token punctuation">(</span>pinned<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cx<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// when the Future is ready we&#39;re finished</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">break</span> val<span class="token punctuation">,</span>

            <span class="token comment">// If we get a \`pending\` future we just go to sleep...</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span> <span class="token operator">=&gt;</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>\u5728\u672C\u7AE0\u7684\u6240\u6709\u4F8B\u5B50\u4E2D\uFF0C\u6211\u90FD\u9009\u62E9\u4E86\u5BF9\u4EE3\u7801\u8FDB\u884C\u5E7F\u6CDB\u7684\u6CE8\u91CA\u3002 \u6211\u53D1\u73B0\u6CBF\u7740\u8FD9\u6761\u8DEF\u8D70\u4F1A\u66F4\u5BB9\u6613\u4E00\u4E9B\uFF0C\u6240\u4EE5\u6211\u4E0D\u4F1A\u5728\u8FD9\u91CC\u91CD\u590D\u81EA\u5DF1\u7684\u8BDD\uFF0C\u53EA\u5173\u6CE8\u4E00\u4E9B\u53EF\u80FD\u9700\u8981\u8FDB\u4E00\u6B65\u89E3\u91CA\u7684\u91CD\u8981\u65B9\u9762\u3002</p><p>\u73B0\u5728\u4F60\u5DF2\u7ECF\u9605\u8BFB\u4E86\u8FD9\u4E48\u591A\u5173\u4E8E\u751F\u6210\u5668\u548C Pin \u7684\u5185\u5BB9\uFF0C\u8FD9\u5E94\u8BE5\u5F88\u5BB9\u6613\u7406\u89E3\u3002 <code>Future</code>\u662F\u4E00\u4E2A\u72B6\u6001\u673A\uFF0C\u6BCF\u4E00\u4E2A<code>await</code>\u70B9\u4E5F\u662F\u4E00\u4E2A<code>yield</code>\u70B9\u3002 \u6211\u4EEC\u53EF\u4EE5\u8DE8\u8D8A<code>await</code>\u501F\u7528\uFF0C\u6211\u4EEC\u9047\u5230\u7684\u95EE\u9898\u4E0E\u8DE8<code>yield</code>\u501F\u7528\u65F6\u5B8C\u5168\u4E00\u6837\u3002</p><blockquote><p><code>Context</code>\u53EA\u662F <code>Waker</code> \u7684\u5305\u88C5\u5668, \u81F3\u5C11\u5728\u6211\u5199\u8FD9\u672C\u4E66\u7684\u65F6\u5019\uFF0C\u5B83\u4EC5\u4EC5\u662F\u8FD9\u6837\u3002 \u5728\u672A\u6765\uFF0C<code>Context</code>\u5BF9\u8C61\u53EF\u80FD\u4E0D\u4EC5\u4EC5\u662F\u5305\u88C5\u4E00\u4E2A<code>Waker</code>(\u8BD1\u8005\u6CE8,\u539F\u6587\u662FFuture,\u5E94\u8BE5\u6709\u8BEF)\uFF0C\u56E0\u6B64\u8FD9\u79CD\u989D\u5916\u7684\u62BD\u8C61\u53EF\u4EE5\u63D0\u4F9B\u4E00\u4E9B\u7075\u6D3B\u6027\u3002</p></blockquote><p>\u6B63\u5982\u5728\u5173\u4E8E\u751F\u6210\u5668\u7684\u7AE0\u8282\u4E2D\u89E3\u91CA\u7684\u90A3\u6837\uFF0C\u6211\u4EEC\u4F7F\u7528Pin\u6765\u4FDD\u8BC1\u5141\u8BB8<code>Future</code>\u6709\u81EA\u5F15\u7528\u3002</p><h3 id="future\u7684\u6267\u884C" tabindex="-1">Future\u7684\u6267\u884C <a class="header-anchor" href="#future\u7684\u6267\u884C" aria-hidden="true">#</a></h3><p><code>Future</code>\u6709\u4E00\u4E2A\u5B9A\u4E49\u826F\u597D\u7684\u63A5\u53E3\uFF0C\u8FD9\u610F\u5473\u7740\u4ED6\u4EEC\u53EF\u4EE5\u7528\u4E8E\u6574\u4E2A\u751F\u6001\u7CFB\u7EDF\u3002</p><p>\u6211\u4EEC\u53EF\u4EE5\u5C06\u8FD9\u4E9B<code>Future</code>\u8FDE\u63A5\u8D77\u6765\uFF0C\u8FD9\u6837\u4E00\u65E6<code>leaf-future</code>\u51C6\u5907\u597D\u4E86\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u6267\u884C\u4E00\u7CFB\u5217\u64CD\u4F5C\uFF0C\u76F4\u5230\u4EFB\u52A1\u5B8C\u6210\u6216\u8005\u6211\u4EEC\u5230\u8FBE\u53E6\u4E00\u4E2A<code>leaf-future</code>\uFF0C\u6211\u4EEC\u5C06\u7B49\u5F85\u5E76\u5C06\u63A7\u5236\u6743\u4EA4\u7ED9\u8C03\u5EA6\u7A0B\u5E8F\u3002</p><p>\u6211\u4EEC<code>Future</code>\u7684\u5B9E\u73B0\u662F\u8FD9\u6837\u7684:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">// This is the definition of our \`Waker\`. We use a regular thread-handle here.</span>
<span class="token comment">// It works but it&#39;s not a good solution. It&#39;s easy to fix though, I&#39;ll explain</span>
<span class="token comment">// after this code snippet.</span>
 <span class="token attribute attr-name">#[derive(Clone)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">MyWaker</span> <span class="token punctuation">{</span>
    thread<span class="token punctuation">:</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token class-name">Thread</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// This is the definition of our \`Future\`. It keeps all the information we</span>
<span class="token comment">// need. This one holds a reference to our \`reactor\`, that&#39;s just to make</span>
<span class="token comment">// this example as easy as possible. It doesn&#39;t need to hold a reference to</span>
<span class="token comment">// the whole reactor, but it needs to be able to register itself with the</span>
<span class="token comment">// reactor.</span>
 <span class="token attribute attr-name">#[derive(Clone)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Task</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    reactor<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Reactor</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    is_registered<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// These are function definitions we&#39;ll use for our waker. Remember the</span>
<span class="token comment">// &quot;Trait Objects&quot; chapter earlier.</span>
<span class="token keyword">fn</span> <span class="token function-definition function">mywaker_wake</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">MyWaker</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> waker_ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token keyword">let</span> waker_arc <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span><span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>waker_ptr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    waker_arc<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Since we use an \`Arc\` cloning is just increasing the refcount on the smart</span>
<span class="token comment">// pointer.</span>
<span class="token keyword">fn</span> <span class="token function-definition function">mywaker_clone</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">MyWaker</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">RawWaker</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arc <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">forget</span><span class="token punctuation">(</span>arc<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// increase ref count</span>
    <span class="token class-name">RawWaker</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">into_raw</span><span class="token punctuation">(</span>arc<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token constant">VTABLE</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// This is actually a &quot;helper funtcion&quot; to create a \`Waker\` vtable. In contrast</span>
<span class="token comment">// to when we created a \`Trait Object\` from scratch we don&#39;t need to concern</span>
<span class="token comment">// ourselves with the actual layout of the \`vtable\` and only provide a fixed</span>
<span class="token comment">// set of functions</span>
<span class="token keyword">const</span> <span class="token constant">VTABLE</span><span class="token punctuation">:</span> <span class="token class-name">RawWakerVTable</span> <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token class-name">RawWakerVTable</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
        <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">mywaker_clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// clone</span>
        <span class="token operator">|</span>s<span class="token operator">|</span> <span class="token function">mywaker_wake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// wake</span>
        <span class="token operator">|</span>s<span class="token operator">|</span> <span class="token function">mywaker_wake</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">&amp;</span><span class="token class-name">MyWaker</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// wake by ref</span>
        <span class="token operator">|</span>s<span class="token operator">|</span> <span class="token function">drop</span><span class="token punctuation">(</span><span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">// decrease refcount</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Instead of implementing this on the \`MyWaker\` oject in \`impl Mywaker...\` we</span>
<span class="token comment">// just use this pattern instead since it saves us some lines of code.</span>
<span class="token keyword">fn</span> <span class="token function-definition function">waker_into_waker</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Waker</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> raw_waker <span class="token operator">=</span> <span class="token class-name">RawWaker</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token constant">VTABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Waker</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>raw_waker<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>reactor<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Reactor</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">Task</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">,</span>
            reactor<span class="token punctuation">,</span>
            data<span class="token punctuation">,</span>
            is_registered<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// This is our \`Future\` implementation</span>
<span class="token keyword">impl</span> <span class="token class-name">Future</span> <span class="token keyword">for</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>

    <span class="token comment">// The output for our kind of \`leaf future\` is just an \`usize\`. For other</span>
    <span class="token comment">// futures this could be something more interesting like a byte array.</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Output</span> <span class="token operator">=</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> cx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Output</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> r <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>reactor<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// we check with the \`Reactor\` if this future is in its &quot;readylist&quot;</span>
        <span class="token comment">// i.e. if it&#39;s \`Ready\`</span>
        <span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">is_ready</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// if it is, we return the data. In this case it&#39;s just the ID of</span>
            <span class="token comment">// the task since this is just a very simple example.</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>is_registered <span class="token punctuation">{</span>

            <span class="token comment">// If the future is registered alredy, we just return \`Pending\`</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

            <span class="token comment">// If we get here, it must be the first time this \`Future\` is polled</span>
            <span class="token comment">// so we register a task with our \`reactor\`</span>
            r<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> cx<span class="token punctuation">.</span><span class="token function">waker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// oh, we have to drop the lock on our \`Mutex\` here because we can&#39;t</span>
            <span class="token comment">// have a shared and exclusive borrow at the same time</span>
            <span class="token function">drop</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>is_registered <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br></div></div><p>\u8FD9\u5927\u90E8\u5206\u90FD\u662F\u76F4\u622A\u4E86\u5F53\u7684\u3002 \u4EE4\u4EBA\u56F0\u60D1\u7684\u90E8\u5206\u662F\u6211\u4EEC\u9700\u8981\u6784\u5EFA Waker \u7684\u5947\u602A\u65B9\u5F0F\uFF0C\u4F46\u662F\u7531\u4E8E\u6211\u4EEC\u5DF2\u7ECF\u4ECE\u539F\u59CB\u90E8\u5206\u521B\u5EFA\u4E86\u6211\u4EEC\u81EA\u5DF1\u7684 trait \u5BF9\u8C61\uFF0C\u8FD9\u770B\u8D77\u6765\u5F88\u719F\u6089\u3002 \u4E8B\u5B9E\u4E0A\uFF0C\u8FD9\u66F4\u7B80\u5355\u3002</p><p>\u6211\u4EEC\u5728\u8FD9\u91CC\u4F7F\u7528\u4E00\u4E2AArc\u6765\u4F20\u9012\u4E00\u4E2A\u5F15\u7528\u8BA1\u6570\u7684MyWaker\u7684\u501F\u7528\u3002 \u8FD9\u662F\u76F8\u5F53\u6B63\u5E38\u7684\uFF0C\u5E76\u4E14\u4F7F\u5F97\u8FD9\u4E2A\u64CD\u4F5C\u53D8\u5F97\u7B80\u5355\u548C\u5B89\u5168\u3002 \u514B\u9686\u4E00\u4E2AWaker\u53EA\u662F\u589E\u52A0\u4E00\u4E2A\u8BA1\u6570\u3002Drop\u4E00\u4E2AWaker\u53EA\u662F\u7B80\u5355\u5730\u51CF\u5C11\u4E00\u4E2A\u8BA1\u6570.</p><p>\u5728\u6211\u4EEC\u8FD9\u79CD\u7279\u5B9A\u573A\u666F\u4E0B,\u6211\u4EEC\u9009\u62E9\u4E0D\u4F7F\u7528<code>Arc</code>. \u800C\u4F7F\u7528\u8FD9\u79CD\u66F4\u4F4E\u5C42\u6B21\u65B9\u5F0F\u5B9E\u73B0\u7684Waker\u624D\u53EF\u4EE5\u5141\u8BB8\u6211\u4EEC\u8FD9\u4E48\u505A.</p><p>\u4E8B\u5B9E\u4E0A\uFF0C\u5982\u679C\u6211\u4EEC\u53EA\u4F7F\u7528 Arc\uFF0C\u90A3\u4E48\u6211\u4EEC\u5C31\u6CA1\u6709\u7406\u7531\u8D39\u5C3D\u5FC3\u601D\u53BB\u521B\u5EFA\u81EA\u5DF1\u7684 vtable \u548C RawWaker\u3002 \u6211\u4EEC\u53EF\u4EE5\u5B9E\u73B0\u4E00\u4E2A\u666E\u901A\u7684trait\u3002</p><p>\u5E78\u8FD0\u7684\u662F\uFF0C\u5C06\u6765\u5728\u6807\u51C6\u5E93\u4E2D\u4E5F\u53EF\u4EE5\u5B9E\u73B0\u8FD9\u4E2A\u529F\u80FD\u3002 \u76EE\u524D<a href="https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.13/futures/task/trait.ArcWake.html" target="_blank" rel="noopener noreferrer">\u8FD9\u4E2A\u7279\u6027\u4ECD\u7136\u5728\u5B9E\u9A8C\u4E2D</a>\uFF0C\u4F46\u662F\u6211\u731C\u60F3\u5728\u6210\u719F\u4E4B\u540E\uFF0C\u8FD9\u4E2A\u7279\u6027\u5C06\u4F1A\u6210\u4E3A\u6807\u51C6\u5E93\u7684\u4E00\u90E8\u5206\u3002</p><p>\u6211\u4EEC\u9009\u62E9\u5728\u8FD9\u91CC\u4F20\u5165\u4E00\u4E2A\u6574\u4E2Areactor\u7684\u5F15\u7528, \u8FD9\u4E0D\u6B63\u5E38\u3002 reactor\u901A\u5E38\u662F\u4E00\u4E2A\u5168\u5C40\u6027\u7684\u8D44\u6E90\uFF0C\u8BA9\u6211\u4EEC\u6CE8\u518C\u611F\u5174\u8DA3\u7684\u4E8B\u800C\u4E0D\u9700\u8981\u4F20\u5165\u4E00\u4E2A\u5F15\u7528.</p><blockquote><p><strong>\u4E3A\u4EC0\u4E48\u5728\u4E00\u4E2ALib\u4E2D\u4F7F\u7528park/unpark\u662F\u4E00\u4E2A\u574F\u4E3B\u610F</strong></p><p>\u4ED6\u5F88\u5BB9\u6613\u6B7B\u9501,\u56E0\u4E3A\u4EFB\u4F55\u4EBA\u90FD\u53EF\u4EE5\u83B7\u5F97\u6267\u884C\u5668\u6240\u5728\u7EBF\u7A0B\u7684\u53E5\u67C4,\u7136\u540E\u8C03\u7528park/unpark.</p></blockquote><blockquote><ol><li>\u4E00\u4E2Afuture\u53EF\u4EE5\u5728\u53E6\u4E00\u4E2A\u4E0D\u540C\u7684\u7EBF\u7A0B\u4E0Aunpark\u6267\u884C\u5668\u7EBF\u7A0B</li><li>\u6211\u4EEC\u7684\u6267\u884C\u5668\u8BA4\u4E3A\u6570\u636E\u51C6\u5907\u597D\u4E86,\u7136\u540E\u9192\u6765\u53BB\u8F6E\u8BE2\u8FD9\u4E2A<code>Future</code></li><li>\u5F53\u88AB\u8F6E\u8BE2\u65F6,\u8FD9\u4E2A<code>Future</code>\u8FD8\u6CA1\u6709\u51C6\u5907\u597D,\u4F46\u662F\u6070\u5728\u6B64\u65F6,<code>Reactor</code>\u6536\u5230\u4E8B\u4EF6,\u8C03\u7528\u4E86<code>Wake()</code>\u6765unpark\u6211\u4EEC\u7684\u7EBF\u7A0B.</li><li>\u8FD9\u53EF\u80FD\u53D1\u751F\u5728\u6211\u4EEC\u518D\u6B21\u7761\u7720\u4E4B\u524D,\u56E0\u4E3A\u8FD9\u4E9B\u64CD\u4F5C\u5B8C\u5168\u662F\u5E76\u884C\u7684.</li><li>\u6211\u4EEC\u7684reactor\u5DF2\u7ECF\u8C03\u7528\u8FC7<code>wake</code>,\u4F46\u662F\u6211\u4EEC\u7684\u7EBF\u7A0B\u4ECD\u7136\u5728\u7761\u7720,\u56E0\u4E3A\u521A\u521A\u8C03\u7528wake\u7684\u65F6\u5019,\u6211\u4EEC\u7684\u7EBF\u7A0B\u662F\u9192\u7740\u7684.</li><li>\u6211\u4EEC\u53D1\u751F\u4E86\u6B7B\u9501,\u7136\u540E\u6211\u4EEC\u7684\u7A0B\u5E8F\u505C\u6B62\u5DE5\u4F5C.</li></ol></blockquote><blockquote><p>\u6709\u4E00\u79CD\u60C5\u51B5\u662F\uFF0C\u6211\u4EEC\u7684\u7EBF\u7A0B\u53EF\u80FD\u4F1A\u51FA\u73B0\u6240\u8C13\u7684\u865A\u5047\u5524\u9192(\u53EF\u80FD\u4F1A\u51FA\u4E4E\u610F\u6599\u5730\u53D1\u751F) \uFF0C\u5982\u679C\u6211\u4EEC\u8FD0\u6C14\u4E0D\u597D\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u5BFC\u81F4\u540C\u6837\u7684\u6B7B\u9501</p></blockquote><p>\u6709\u51E0\u79CD\u66F4\u597D\u7684\u65B9\u6848,\u6BD4\u5982:</p><ul><li>std::sync::CondVar</li><li>crossbeam::sync::Parker</li></ul><h3 id="reactor" tabindex="-1">Reactor <a class="header-anchor" href="#reactor" aria-hidden="true">#</a></h3><p>\u8FD9\u662F\u6700\u540E\u7684\u51B2\u523A\u9636\u6BB5\uFF0C\u5E76\u4E0D\u5B8C\u5168\u4E0E<code>Future</code>\u76F8\u5173\uFF0C\u4F46\u662F\u6211\u4EEC\u9700\u8981\u5B83\u6765\u8BA9\u6211\u4EEC\u7684\u4F8B\u5B50\u8FD0\u884C\u8D77\u6765\u3002</p><p>\u7531\u4E8E\u5927\u591A\u6570\u65F6\u5019\u5E76\u53D1\u53EA\u6709\u5728\u4E0E\u5916\u90E8\u4E16\u754C(\u6216\u8005\u81F3\u5C11\u662F\u4E00\u4E9B\u5916\u56F4\u8BBE\u5907)\u8FDB\u884C\u4EA4\u4E92\u65F6\u624D\u6709\u610F\u4E49\uFF0C\u56E0\u6B64\u6211\u4EEC\u9700\u8981\u4E00\u4E9B\u4E1C\u897F\u6765\u62BD\u8C61\u8FD9\u4E9B\u5F02\u6B65\u7684\u4EA4\u4E92.</p><p>\u8FD9\u5C31\u662Freacotor\u7684\u5DE5\u4F5C. \u5927\u591A\u6570\u65F6\u5019\u4F60\u770B\u5230\u7684reactor\u90FD\u662F\u7528<a href="https://github.com/tokio-rs/mio" target="_blank" rel="noopener noreferrer">Mio</a>\u8FD9\u4E2A\u5E93. \u5B83\u65E9\u591A\u4E2A\u5E73\u53F0\u4E0A\u63D0\u4F9B\u4E86\u975E\u963B\u585EAPI\u548C\u4E8B\u4EF6\u901A\u77E5\u673A\u5236.</p><p>reactor\u901A\u5E38\u4F1A\u63D0\u4F9B\u7C7B\u4F3C\u4E8ETcpStream(\u6216\u4EFB\u4F55\u5176\u4ED6\u8D44\u6E90)\u7684\u4E1C\u897F\uFF0C\u53EA\u4E0D\u8FC7\u60A8\u7528TcpStream\u6765\u521B\u5EFAI/O\u8BF7\u6C42,\u800C\u7528reactor\u6765\u521B\u5EFAFuture.</p><p>\u6211\u4EEC\u7684\u793A\u4F8B\u4EFB\u52A1\u662F\u4E00\u4E2A\u8BA1\u65F6\u5668\uFF0C\u5B83\u53EA\u751F\u6210\u4E00\u4E2A\u7EBF\u7A0B\uFF0C\u5E76\u5C06\u5176\u7F6E\u4E8E\u4F11\u7720\u72B6\u6001\uFF0C\u4F11\u7720\u65F6\u95F4\u4E3A\u6211\u4EEC\u6307\u5B9A\u7684\u79D2\u6570\u3002 \u6211\u4EEC\u5728\u8FD9\u91CC\u521B\u5EFA\u7684reactor\u5C06\u521B\u5EFA\u4E00\u4E2A\u8868\u793A\u6BCF\u4E2A\u8BA1\u65F6\u5668\u7684<code>leaf-future</code>\u3002 \u4F5C\u4E3A\u56DE\u62A5\uFF0Creactor\u63A5\u6536\u5230\u4E00\u4E2A\u5524\u9192\u5668\uFF0C\u4E00\u65E6\u4EFB\u52A1\u5B8C\u6210reactor\u5C06\u8C03\u7528\u8FD9\u4E2A\u5524\u9192\u5668\u3002</p><p>\u4E3A\u4E86\u80FD\u591F\u5728\u6D4F\u89C8\u5668\u4E2D\u8FD0\u884C\u8FD9\u91CC\u7684\u4EE3\u7801\uFF0C\u6CA1\u6709\u592A\u591A\u771F\u6B63\u7684I/O\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5047\u88C5\u8FD9\u5B9E\u9645\u4E0A\u4EE3\u8868\u4E86\u4E00\u4E9B\u6709\u7528\u7684I/O\u64CD\u4F5C\u3002</p><p>\u6211\u4EEC\u7684reactor\u770B\u8D77\u6765\u50CF\u8FD9\u6837:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">// This is a &quot;fake&quot; reactor. It does no real I/O, but that also makes our</span>
<span class="token comment">// code possible to run in the book and in the playground</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Reactor</span> <span class="token punctuation">{</span>

    <span class="token comment">// we need some way of registering a Task with the reactor. Normally this</span>
    <span class="token comment">// would be an &quot;interest&quot; in an I/O event</span>
    dispatcher<span class="token punctuation">:</span> <span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token class-name">Event</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    handle<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">JoinHandle</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">// This is a list of tasks that are ready, which means they should be polled</span>
    <span class="token comment">// for data.</span>
    readylist<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// We just have two kind of events. An event called \`Timeout\`</span>
<span class="token comment">// and a \`Close\` event to close down our reactor.</span>
 <span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">Event</span> <span class="token punctuation">{</span>
    <span class="token class-name">Close</span><span class="token punctuation">,</span>
    <span class="token class-name">Timeout</span><span class="token punctuation">(</span><span class="token class-name">Waker</span><span class="token punctuation">,</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Reactor</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token comment">// The way we register new events with our reactor is using a regular</span>
        <span class="token comment">// channel</span>
        <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">channel</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Event</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> readylist <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> rl_clone <span class="token operator">=</span> readylist<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// This \`Vec\` will hold handles to all the threads we spawn so we can</span>
        <span class="token comment">// join them later on and finish our programm in a good manner</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> handles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">// This will be the &quot;Reactor thread&quot;</span>
        <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> event <span class="token keyword">in</span> rx <span class="token punctuation">{</span>
                <span class="token keyword">let</span> rl_clone <span class="token operator">=</span> rl_clone<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">match</span> event <span class="token punctuation">{</span>

                    <span class="token comment">// If we get a close event we break out of the loop we&#39;re in</span>
                    <span class="token class-name">Event</span><span class="token punctuation">::</span><span class="token class-name">Close</span> <span class="token operator">=&gt;</span> <span class="token keyword">break</span><span class="token punctuation">,</span>
                    <span class="token class-name">Event</span><span class="token punctuation">::</span><span class="token class-name">Timeout</span><span class="token punctuation">(</span>waker<span class="token punctuation">,</span> duration<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

                        <span class="token comment">// When we get an event we simply spawn a new thread</span>
                        <span class="token comment">// which will simulate some I/O resource...</span>
                        <span class="token keyword">let</span> event_handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>

                            <span class="token comment">//... by sleeping for the number of seconds</span>
                            <span class="token comment">// we provided when creating the \`Task\`.</span>
                            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                            <span class="token comment">// When it&#39;s done sleeping we put the ID of this task</span>
                            <span class="token comment">// on the &quot;readylist&quot;</span>
                            rl_clone<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> rl<span class="token closure-punctuation punctuation">|</span></span> rl<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                            <span class="token comment">// Then we call \`wake\` which will wake up our</span>
                            <span class="token comment">// executor and start polling the futures</span>
                            waker<span class="token punctuation">.</span><span class="token function">wake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        handles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>event_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// When we exit the Reactor we first join all the handles on</span>
            <span class="token comment">// the child threads we&#39;ve spawned so we catch any panics and</span>
            <span class="token comment">// release any resources.</span>
            <span class="token keyword">for</span> handle <span class="token keyword">in</span> handles <span class="token punctuation">{</span>
                handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Reactor</span> <span class="token punctuation">{</span>
            readylist<span class="token punctuation">,</span>
            dispatcher<span class="token punctuation">:</span> tx<span class="token punctuation">,</span>
            handle<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> waker<span class="token punctuation">:</span> <span class="token class-name">Waker</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// registering an event is as simple as sending an \`Event\` through</span>
        <span class="token comment">// the channel.</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>dispatcher
            <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">::</span><span class="token class-name">Timeout</span><span class="token punctuation">(</span>waker<span class="token punctuation">,</span> duration<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">::</span><span class="token class-name">Close</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// We need a way to check if any event&#39;s are ready. This will simply</span>
    <span class="token comment">// look through the &quot;readylist&quot; for an event macthing the ID we want to</span>
    <span class="token comment">// check for.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">is_ready</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> id_to_check<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>readylist
            <span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>rl<span class="token closure-punctuation punctuation">|</span></span> rl<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>id<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>id <span class="token operator">==</span> id_to_check<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// When our \`Reactor\` is dropped we join the reactor thread with the thread</span>
<span class="token comment">// owning our \`Reactor\` so we catch any panics and release all resources.</span>
<span class="token comment">// It&#39;s not needed for this to work, but it really is a best practice to join</span>
<span class="token comment">// all threads you spawn.</span>
<span class="token keyword">impl</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">Reactor</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>handle<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>h<span class="token closure-punctuation punctuation">|</span></span> h<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br></div></div><p>\u867D\u7136\u4EE3\u7801\u91CF\u5F88\u5927\uFF0C\u4F46\u5B9E\u9645\u4E0A\u6211\u4EEC\u53EA\u662F\u4EA7\u751F\u4E86\u4E00\u4E2A\u65B0\u7EBF\u7A0B\uFF0C\u5E76\u8BA9\u5B83\u4F11\u7720\u4E00\u6BB5\u65F6\u95F4\uFF0C\u8FD9\u662F\u6211\u4EEC\u5728\u521B\u5EFA\u4EFB\u52A1\u65F6\u6307\u5B9A\u7684\u3002</p><p>\u867D\u7136\u4EE3\u7801\u91CF\u5F88\u5927\uFF0C\u4F46\u5B9E\u9645\u4E0A\u6211\u4EEC\u53EA\u662F\u4EA7\u751F\u4E86\u4E00\u4E2A\u65B0\u7EBF\u7A0B\uFF0C\u5E76\u8BA9\u5B83\u4F11\u7720\u4E00\u6BB5\u65F6\u95F4\uFF0C\u8FD9\u662F\u6211\u4EEC\u5728\u521B\u5EFA\u4EFB\u52A1\u65F6\u6307\u5B9A\u7684\u3002</p><p>\u5728\u6700\u540E\u4E00\u7AE0\u4E2D\uFF0C\u6211\u4EEC\u5728\u4E00\u4E2A\u53EF\u7F16\u8F91\u7684\u7A97\u53E3\u4E2D\u6709\u6574\u6574200\u884C\uFF0C\u4F60\u53EF\u4EE5\u6309\u7167\u81EA\u5DF1\u559C\u6B22\u7684\u65B9\u5F0F\u8FDB\u884C\u7F16\u8F91\u548C\u4FEE\u6539\u3002</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is just to make it easier for us to see when our Future was resolved</span>
    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Many runtimes create a glocal \`reactor\` we pass it as an argument</span>
    <span class="token keyword">let</span> reactor <span class="token operator">=</span> <span class="token class-name">Reactor</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Since we&#39;ll share this between threads we wrap it in a </span>
    <span class="token comment">// atmically-refcounted- mutex.</span>
    <span class="token keyword">let</span> reactor <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reactor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// We create two tasks:</span>
    <span class="token comment">// - first parameter is the \`reactor\`</span>
    <span class="token comment">// - the second is a timeout in seconds</span>
    <span class="token comment">// - the third is an \`id\` to identify the task</span>
    <span class="token keyword">let</span> future1 <span class="token operator">=</span> <span class="token class-name">Task</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reactor<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> future2 <span class="token operator">=</span> <span class="token class-name">Task</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reactor<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// an \`async\` block works the same way as an \`async fn\` in that it compiles</span>
    <span class="token comment">// our code into a state machine, \`yielding\` at every \`await\` point.</span>
    <span class="token keyword">let</span> fut1 <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> dur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs_f32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Future got {} at time: {:.2}.&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> dur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> fut2 <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> future2<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> dur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs_f32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Future got {} at time: {:.2}.&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> dur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Our executor can only run one and one future, this is pretty normal</span>
    <span class="token comment">// though. You have a set of operations containing many futures that</span>
    <span class="token comment">// ends up as a single future that drives them all to completion.</span>
    <span class="token keyword">let</span> mainfut <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
        fut1<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
        fut2<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// This executor will block the main thread until the futures is resolved</span>
    <span class="token function">block_on</span><span class="token punctuation">(</span>mainfut<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// When we&#39;re done, we want to shut down our reactor thread so our program</span>
    <span class="token comment">// ends nicely.</span>
    reactor<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> r<span class="token closure-punctuation punctuation">|</span></span> r<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><p>\u6211\u6DFB\u52A0\u4E86\u4E00\u4E2Areactor\u611F\u5174\u8DA3\u7684\u4E8B\u4EF6\u7684\u8C03\u8BD5\u8F93\u51FA\uFF0C\u8FD9\u6837\u6211\u4EEC\u53EF\u4EE5\u89C2\u5BDF\u5230\u4E24\u4EF6\u4E8B:</p><ol><li><code>Waker</code>\u8FD9\u4E2A\u5BF9\u8C61\u5982\u4F55\u50CF\u524D\u9762\u6211\u4EEC\u8BA8\u8BBA\u7684trai\u5BF9\u8C61</li><li>\u4E8B\u4EF6\u4EE5\u4F55\u79CD\u987A\u5E8F\u5411reactor\u6CE8\u518C\u611F\u5174\u8DA3\u7684\u4FE1\u606F</li></ol><h3 id="async-await\u548C\u5E76\u53D1async-await" tabindex="-1">Async/Await\u548C\u5E76\u53D1Async/Await <a class="header-anchor" href="#async-await\u548C\u5E76\u53D1async-await" aria-hidden="true">#</a></h3><p>Async \u5173\u952E\u5B57\u53EF\u4EE5\u7528\u5728 async fn (...)\u4E2D\u7684\u51FD\u6570\u4E0A\uFF0C\u4E5F\u53EF\u4EE5\u7528\u5728 async { ... }\u4E2D\u7684\u5757\u4E0A\u3002 \u4E24\u8005\u90FD\u53EF\u4EE5\u8BB2\u4E00\u4E2A\u51FD\u6570\u6216\u8005\u4EE3\u7801\u5757\u8F6C\u6362\u6210\u4E00\u4E2A<code>Future</code></p><p>\u8FD9\u4E9B<code>Future</code>\u662F\u76F8\u5F53\u7B80\u5355\u7684\u3002 \u60F3\u8C61\u4E00\u4E0B\u51E0\u7AE0\u524D\u6211\u4EEC\u7684\u751F\u6210\u5668\u3002</p><p>\u6BCF\u4E00\u4E2Aawait\u5C31\u50CF\u4E00\u4E2Ayield,\u53EA\u4E0D\u8FC7\u4E0D\u662F\u751F\u6210\u4E00\u4E2A\u503C,\u800C\u662F\u751F\u6210Future,\u7136\u540E\u5F53\u8F6E\u8BE2\u7684\u65F6\u5019\u8FD4\u56DE\u54CD\u5E94\u7684\u7ED3\u679C.</p><p>\u6211\u4EEC\u7684<code>mainfut</code>\u5305\u542B\u4E24\u4E2A<code>non-leaf-future</code>\uFF0C\u5B83\u5C06\u5728\u8F6E\u8BE2\u4E2D\u8C03\u7528\u3002<code>non-leaf-future</code>\u6709\u4E00\u4E2A<code>poll</code>\u65B9\u6CD5, \u8FD9\u4E2A\u65B9\u6CD5\u7B80\u5355\u7684\u8F6E\u8BE2\u4ED6\u81EA\u5DF1\u7684\u5185\u90E8Future,\u5B83\u5185\u90E8\u7684Future\u4F1A\u88AB\u7EE7\u7EED\u8F6E\u8BE2,\u76F4\u5230<code>leaf-future</code>\u8FD4\u56DE<code>Ready</code>\u6216\u8005<code>Pending</code>.</p><p>\u5C31\u6211\u4EEC\u73B0\u5728\u7684\u4F8B\u5B50\u6765\u770B\uFF0C\u5B83\u5E76\u4E0D\u6BD4\u5E38\u89C4\u7684\u540C\u6B65\u4EE3\u7801\u597D\u591A\u5C11\u3002 \u5BF9\u4E8E\u6211\u4EEC\u6765\u8BF4\uFF0C\u5982\u679C\u9700\u8981\u5728\u540C\u4E00\u65F6\u95F4\u7B49\u5F85\u591A\u4E2A<code>Future</code>\uFF0C\u6211\u4EEC\u9700\u8981<code>spawn</code>\u5B83\u4EEC\uFF0C\u4EE5\u4FBF\u6267\u884C\u5668\u540C\u65F6\u8FD0\u884C\u5B83\u4EEC\u3002</p><p>\u73B0\u5728\u6211\u4EEC\u7684\u4F8B\u5B50\u8FD4\u56DE\u5982\u4E0B\u7ED3\u679C:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token class-name">Future</span> got <span class="token number">1</span> at time<span class="token punctuation">:</span> <span class="token number">1.00</span><span class="token punctuation">.</span>
<span class="token class-name">Future</span> got <span class="token number">2</span> at time<span class="token punctuation">:</span> <span class="token number">3.00</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-rust line-numbers-mode"><pre><code><span class="token class-name">Future</span> got <span class="token number">1</span> at time<span class="token punctuation">:</span> <span class="token number">1.00</span><span class="token punctuation">.</span>
<span class="token class-name">Future</span> got <span class="token number">2</span> at time<span class="token punctuation">:</span> <span class="token number">2.00</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>\u8BF7\u6CE8\u610F\uFF0C\u8FD9\u5E76\u4E0D\u610F\u5473\u7740\u5B83\u4EEC\u9700\u8981\u5E76\u884C\u8FD0\u884C\u3002 \u5B83\u4EEC\u53EF\u4EE5\u5E76\u884C\u8FD0\u884C\uFF0C\u4F46\u6CA1\u6709\u8981\u6C42\u3002 \u8BF7\u8BB0\u4F4F\uFF0C\u6211\u4EEC\u6B63\u5728\u7B49\u5F85\u4E00\u4E9B\u5916\u90E8\u8D44\u6E90\uFF0C\u8FD9\u6837\u6211\u4EEC\u5C31\u53EF\u4EE5\u5728\u4E00\u4E2A\u7EBF\u7A0B\u4E0A\u53D1\u51FA\u8BB8\u591A\u8FD9\u6837\u7684\u8C03\u7528\uFF0C\u5E76\u5728\u4E8B\u4EF6\u53D1\u751F\u65F6\u5904\u7406\u6BCF\u4E2A\u4E8B\u4EF6</p></blockquote><p>\u73B0\u5728\uFF0C\u6211\u5C06\u5411\u60A8\u4ECB\u7ECD\u4E00\u4E9B\u66F4\u597D\u7684\u8D44\u6E90\uFF0C\u4EE5\u5B9E\u73B0\u4E00\u4E2A\u66F4\u597D\u7684\u6267\u884C\u5668\u3002 \u73B0\u5728\u4F60\u5E94\u8BE5\u5DF2\u7ECF\u5BF9<code>Future</code>\u7684\u6982\u5FF5\u6709\u4E86\u4E00\u4E2A\u5F88\u597D\u7684\u7406\u89E3\u3002</p><p>\u4E0B\u4E00\u6B65\u5E94\u8BE5\u662F\u4E86\u89E3\u66F4\u9AD8\u7EA7\u7684\u8FD0\u884C\u65F6\u662F\u5982\u4F55\u5DE5\u4F5C\u7684\uFF0C\u4EE5\u53CA\u5B83\u4EEC\u5982\u4F55\u5B9E\u73B0\u4E0D\u540C\u7684\u8FD0\u884C Futures \u7684\u65B9\u5F0F\u3002</p><p>\u5982\u679C\u6211\u662F\u4F60\uFF0C\u6211\u63A5\u4E0B\u6765\u5C31\u4F1A\u8BFB\u8FD9\u7BC7\u6587\u7AE0\uFF0C\u5E76\u8BD5\u7740\u628A\u5B83\u5E94\u7528\u5230\u6211\u4EEC\u7684\u4F8B\u5B50\u4E2D\u53BB\u3002</p><p>\u5982\u679C\u6211\u662F\u4F60\uFF0C\u6211\u63A5\u4E0B\u6765\u5C31\u4F1A\u8BFB\u8FD9\u7BC7\u6587\u7AE0\uFF0C\u5E76\u8BD5\u7740\u628A\u5B83\u5E94\u7528\u5230\u6211\u4EEC\u7684\u4F8B\u5B50\u4E2D\u53BB\u3002</p><p>\u6211\u5E0C\u671B\u5728\u9605\u8BFB\u5B8C\u8FD9\u7BC7\u6587\u7AE0\u540E\uFF0C\u80FD\u591F\u66F4\u5BB9\u6613\u5730\u63A2\u7D22Future\u548C\u5F02\u6B65\uFF0C\u6211\u771F\u7684\u5E0C\u671B\u4F60\u4EEC\u80FD\u591F\u7EE7\u7EED\u6DF1\u5165\u63A2\u7D22\u3002</p><p>\u522B\u5FD8\u4E86\u6700\u540E\u4E00\u7AE0\u7684\u7EC3\u4E60\u3002</p><h2 id="\u516B-\u5B8C\u6574\u7684\u4F8B\u5B50" tabindex="-1">\u516B \u5B8C\u6574\u7684\u4F8B\u5B50 <a class="header-anchor" href="#\u516B-\u5B8C\u6574\u7684\u4F8B\u5B50" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">future<span class="token punctuation">::</span></span><span class="token class-name">Future</span><span class="token punctuation">,</span> <span class="token namespace">pin<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">,</span> <span class="token namespace">sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token punctuation">{</span>channel<span class="token punctuation">,</span> <span class="token class-name">Sender</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Arc</span><span class="token punctuation">,</span> <span class="token class-name">Mutex</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">task<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Poll</span><span class="token punctuation">,</span> <span class="token class-name">RawWaker</span><span class="token punctuation">,</span> <span class="token class-name">RawWakerVTable</span><span class="token punctuation">,</span> <span class="token class-name">Waker</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">JoinHandle</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Duration</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> reactor <span class="token operator">=</span> <span class="token class-name">Reactor</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> reactor <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reactor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> future1 <span class="token operator">=</span> <span class="token class-name">Task</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reactor<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> future2 <span class="token operator">=</span> <span class="token class-name">Task</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reactor<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> fut1 <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> dur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs_f32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Future got {} at time: {:.2}.&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> dur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> fut2 <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> future2<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> dur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs_f32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Future got {} at time: {:.2}.&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> dur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> mainfut <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
        fut1<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
        fut2<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">block_on</span><span class="token punctuation">(</span>mainfut<span class="token punctuation">)</span><span class="token punctuation">;</span>
    reactor<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> r<span class="token closure-punctuation punctuation">|</span></span> r<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ============================= EXECUTOR ====================================</span>
<span class="token keyword">fn</span> <span class="token function-definition function">block_on</span><span class="token operator">&lt;</span><span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token class-name">Future</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">mut</span> future<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">F</span><span class="token punctuation">::</span><span class="token class-name">Output</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mywaker <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">MyWaker</span><span class="token punctuation">{</span> thread<span class="token punctuation">:</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">let</span> waker <span class="token operator">=</span> <span class="token function">waker_into_waker</span><span class="token punctuation">(</span><span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">into_raw</span><span class="token punctuation">(</span>mywaker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> cx <span class="token operator">=</span> <span class="token class-name">Context</span><span class="token punctuation">::</span><span class="token function">from_waker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>waker<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// SAFETY: we shadow \`future\` so it can&#39;t be accessed again.</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> future <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token function">new_unchecked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> future<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token keyword">match</span> <span class="token class-name">Future</span><span class="token punctuation">::</span><span class="token function">poll</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> cx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">break</span> val<span class="token punctuation">,</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span> <span class="token operator">=&gt;</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    val
<span class="token punctuation">}</span>

<span class="token comment">// ====================== FUTURE IMPLEMENTATION ==============================</span>
 <span class="token attribute attr-name">#[derive(Clone)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">MyWaker</span> <span class="token punctuation">{</span>
    thread<span class="token punctuation">:</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token class-name">Thread</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

 <span class="token attribute attr-name">#[derive(Clone)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Task</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    reactor<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Reactor</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    is_registered<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">mywaker_wake</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">MyWaker</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> waker_ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token keyword">let</span> waker_arc <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span><span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>waker_ptr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    waker_arc<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">mywaker_clone</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">MyWaker</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">RawWaker</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arc <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">forget</span><span class="token punctuation">(</span>arc<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// increase ref count</span>
    <span class="token class-name">RawWaker</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">into_raw</span><span class="token punctuation">(</span>arc<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token constant">VTABLE</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">VTABLE</span><span class="token punctuation">:</span> <span class="token class-name">RawWakerVTable</span> <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token class-name">RawWakerVTable</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
        <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">mywaker_clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// clone</span>
        <span class="token operator">|</span>s<span class="token operator">|</span> <span class="token function">mywaker_wake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// wake</span>
        <span class="token operator">|</span>s<span class="token operator">|</span> <span class="token function">mywaker_wake</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">&amp;</span><span class="token class-name">MyWaker</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// wake by ref</span>
        <span class="token operator">|</span>s<span class="token operator">|</span> <span class="token function">drop</span><span class="token punctuation">(</span><span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">// decrease refcount</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">waker_into_waker</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token class-name">MyWaker</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Waker</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> raw_waker <span class="token operator">=</span> <span class="token class-name">RawWaker</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>s <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token constant">VTABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Waker</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>raw_waker<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>reactor<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Reactor</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">Task</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">,</span>
            reactor<span class="token punctuation">,</span>
            data<span class="token punctuation">,</span>
            is_registered<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Future</span> <span class="token keyword">for</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Output</span> <span class="token operator">=</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> cx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Output</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> r <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>reactor<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">is_ready</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>is_registered <span class="token punctuation">{</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            r<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> cx<span class="token punctuation">.</span><span class="token function">waker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">drop</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>is_registered <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// =============================== REACTOR ===================================</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Reactor</span> <span class="token punctuation">{</span>
    dispatcher<span class="token punctuation">:</span> <span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token class-name">Event</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    handle<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">JoinHandle</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    readylist<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
 <span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">Event</span> <span class="token punctuation">{</span>
    <span class="token class-name">Close</span><span class="token punctuation">,</span>
    <span class="token class-name">Timeout</span><span class="token punctuation">(</span><span class="token class-name">Waker</span><span class="token punctuation">,</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Reactor</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">channel</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Event</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> readylist <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> rl_clone <span class="token operator">=</span> readylist<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> handles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token comment">// This simulates some I/O resource</span>
            <span class="token keyword">for</span> event <span class="token keyword">in</span> rx <span class="token punctuation">{</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;REACTOR: {:?}&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> rl_clone <span class="token operator">=</span> rl_clone<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">match</span> event <span class="token punctuation">{</span>
                    <span class="token class-name">Event</span><span class="token punctuation">::</span><span class="token class-name">Close</span> <span class="token operator">=&gt;</span> <span class="token keyword">break</span><span class="token punctuation">,</span>
                    <span class="token class-name">Event</span><span class="token punctuation">::</span><span class="token class-name">Timeout</span><span class="token punctuation">(</span>waker<span class="token punctuation">,</span> duration<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token keyword">let</span> event_handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
                            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            rl_clone<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token keyword">mut</span> rl<span class="token closure-punctuation punctuation">|</span></span> rl<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            waker<span class="token punctuation">.</span><span class="token function">wake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        handles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>event_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">for</span> handle <span class="token keyword">in</span> handles <span class="token punctuation">{</span>
                handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Reactor</span> <span class="token punctuation">{</span>
            readylist<span class="token punctuation">,</span>
            dispatcher<span class="token punctuation">:</span> tx<span class="token punctuation">,</span>
            handle<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> waker<span class="token punctuation">:</span> <span class="token class-name">Waker</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>dispatcher
            <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">::</span><span class="token class-name">Timeout</span><span class="token punctuation">(</span>waker<span class="token punctuation">,</span> duration<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">::</span><span class="token class-name">Close</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">is_ready</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> id_to_check<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>readylist
            <span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>rl<span class="token closure-punctuation punctuation">|</span></span> rl<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>id<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>id <span class="token operator">==</span> id_to_check<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">Reactor</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>handle<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>h<span class="token closure-punctuation punctuation">|</span></span> h<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br></div></div><h2 id="\u4E5D-\u7ED3\u8BBA\u548C\u7EC3\u4E60" tabindex="-1">\u4E5D \u7ED3\u8BBA\u548C\u7EC3\u4E60 <a class="header-anchor" href="#\u4E5D-\u7ED3\u8BBA\u548C\u7EC3\u4E60" aria-hidden="true">#</a></h2><p>\u6211\u4EEC\u7684\u5B9E\u73B0\u91C7\u53D6\u4E86\u4E00\u4E9B\u660E\u663E\u7684\u6377\u5F84\uFF0C\u53EF\u4EE5\u4F7F\u7528\u4E00\u4E9B\u6539\u8FDB\u3002 \u5B9E\u9645\u4E0A\uFF0C\u6DF1\u5165\u7814\u7A76\u4EE3\u7801\u5E76\u81EA\u5DF1\u5C1D\u8BD5\u4E00\u4E9B\u4E8B\u60C5\u662F\u4E00\u4E2A\u5F88\u597D\u7684\u5B66\u4E60\u65B9\u5F0F\u3002 \u5982\u679C\u4F60\u60F3\u63A2\u7D22\u66F4\u591A\uFF0C\u8FD9\u91CC\u6709\u4E00\u4E9B\u5F88\u597D\u7684\u7EC3\u4E60</p><h3 id="\u7F16\u7801park" tabindex="-1">\u7F16\u7801park <a class="header-anchor" href="#\u7F16\u7801park" aria-hidden="true">#</a></h3><p>\u4F7F\u7528 Thread: : park \u548C Thread: : unpark \u7684\u5927\u95EE\u9898\u662F\u7528\u6237\u53EF\u4EE5\u4ECE\u81EA\u5DF1\u7684\u4EE3\u7801\u8BBF\u95EE\u8FD9\u4E9B\u76F8\u540C\u7684\u65B9\u6CD5\u3002 \u5C1D\u8BD5\u4F7F\u7528\u53E6\u4E00\u79CD\u65B9\u6CD5\u6765\u6302\u8D77\u7EBF\u7A0B\u5E76\u6839\u636E\u6211\u4EEC\u7684\u547D\u4EE4\u518D\u6B21\u5524\u9192\u5B83\u3002 \u4E00\u4E9B\u63D0\u793A:</p><ul><li><a href="https://doc.rust-lang.org/stable/std/sync/struct.Condvar.html" target="_blank" rel="noopener noreferrer">std::sync::CondVar</a></li><li><a href="https://github.com/crossbeam-rs/crossbeam" target="_blank" rel="noopener noreferrer">crossbeam::sync::Parker</a></li></ul><h3 id="\u7F16\u7801\u4F20\u9012reactor" tabindex="-1">\u7F16\u7801\u4F20\u9012reactor <a class="header-anchor" href="#\u7F16\u7801\u4F20\u9012reactor" aria-hidden="true">#</a></h3><p>\u907F\u514D\u5305\u88C5\u6574\u4E2AReactor in a mutex and pass it around \u5728\u4E92\u65A5\u5BF9\u8C61\u4E2D\u4F20\u9012</p><p>\u9996\u5148\uFF0C\u4FDD\u62A4\u6574\u4E2Areactor\u5E76\u4F20\u9012\u5B83\u662F\u8FC7\u5206\u7684\u3002 \u6211\u4EEC\u53EA\u5BF9\u540C\u6B65\u5B83\u5305\u542B\u7684\u90E8\u5206\u4FE1\u606F\u611F\u5174\u8DA3\u3002 \u5C1D\u8BD5\u5C06\u5176\u91CD\u6784\u51FA\u6765\uFF0C\u53EA\u540C\u6B65\u8BBF\u95EE\u771F\u6B63\u9700\u8981\u7684\u5185\u5BB9\u3002</p><p>\u6211\u5EFA\u8BAE\u60A8\u770B\u770B<a href="https://github.com/async-rs/async-std/blob/master/src/net/driver/mod.rs" target="_blank" rel="noopener noreferrer">async_std\u9A71\u52A8\u7A0B\u5E8F</a>\u662F\u5982\u4F55\u5B9E\u73B0\u7684\uFF0C\u4EE5\u53CA<a href="https://github.com/tokio-rs/tokio/blob/master/tokio/src/runtime/basic_scheduler.rs" target="_blank" rel="noopener noreferrer">tokio\u8C03\u5EA6\u7A0B\u5E8F</a>\u662F\u5982\u4F55\u5B9E\u73B0\u7684\uFF0C\u4EE5\u83B7\u5F97\u4E00\u4E9B\u7075\u611F\u3002</p><ul><li>\u4F60\u60F3\u4F7F\u7528Arc\u6765\u4F20\u9012\u8FD9\u4E9B\u4FE1\u606F\u7684\u5F15\u7528?</li><li>\u4F60\u662F\u5426\u60F3\u521B\u5EFA\u4E00\u4E2A\u5168\u5C40\u7684reactor,\u8FD9\u6837\u4ED6\u53EF\u4EE5\u968F\u65F6\u968F\u5730\u88AB\u8BBF\u95EE?</li></ul><h3 id="\u521B\u5EFA\u4E00\u4E2A\u66F4\u597D\u7684\u6267\u884C\u5668" tabindex="-1">\u521B\u5EFA\u4E00\u4E2A\u66F4\u597D\u7684\u6267\u884C\u5668 <a class="header-anchor" href="#\u521B\u5EFA\u4E00\u4E2A\u66F4\u597D\u7684\u6267\u884C\u5668" aria-hidden="true">#</a></h3><p>\u73B0\u5728\u6211\u4EEC\u53EA\u652F\u6301\u4E00\u4E2A\u4E00\u4E2AFuture\u8FD0\u884C. \u5927\u591A\u6570\u8FD0\u884C\u65F6\u90FD\u6709\u4E00\u4E2Aspawn\u51FD\u6570,\u8BA9\u4F60\u80FD\u591F\u542F\u52A8\u4E00\u4E2Afuture,\u7136\u540Eawait\u5B83. \u8FD9\u6837\u4F60\u5C31\u53EF\u4EE5\u540C\u65F6\u8FD0\u884C\u591A\u4E2AFuture.</p><p>\u6B63\u5982\u6211\u5728\u672C\u4E66\u5F00\u5934\u6240\u5EFA\u8BAE\u7684\u90A3\u6837\uFF0C\u8BBF\u95EE<a href="https://stjepang.github.io/2020/01/31/build-your-own-executor.html" target="_blank" rel="noopener noreferrer">stjepan \u7684\u535A\u5BA2\u7CFB\u5217</a>\uFF0C\u4E86\u89E3\u5982\u4F55\u5B9E\u73B0\u4F60\u81EA\u5DF1\u7684\u6267\u884C\u8005\uFF0C\u662F\u6211\u5C06\u8981\u5F00\u59CB\u7684\u5730\u65B9\uFF0C\u5E76\u4ECE\u90A3\u91CC\u5F00\u59CB\u3002</p><h3 id="\u8FDB\u4E00\u6B65\u9605\u8BFB" tabindex="-1">\u8FDB\u4E00\u6B65\u9605\u8BFB <a class="header-anchor" href="#\u8FDB\u4E00\u6B65\u9605\u8BFB" aria-hidden="true">#</a></h3><ul><li><p><a href="https://rust-lang.github.io/async-book/01_getting_started/01_chapter.html" target="_blank" rel="noopener noreferrer">The official Asyc book</a></p></li><li><p><a href="https://book.async.rs/" target="_blank" rel="noopener noreferrer"> The async_std book</a></p></li><li><p><a href="https://aturon.github.io/blog/2016/09/07/futures-design/" target="_blank" rel="noopener noreferrer">Aron Turon: Designing futures for Rust</a></p></li><li><p><a href="https://www.infoq.com/presentations/rust-2019/" target="_blank" rel="noopener noreferrer">Steve Klabnik&#39;s presentation: Rust&#39;s journey to Async/Await</a></p></li><li><p><a href="https://tokio.rs/blog/2019-10-scheduler/" target="_blank" rel="noopener noreferrer">The Tokio Blog</a></p></li><li><p><a href="https://stjepang.github.io/" target="_blank" rel="noopener noreferrer">Stjepan&#39;s blog with a series where he implements an Executor</a></p></li><li><p><a href="https://youtu.be/DkMwYxfSYNQ" target="_blank" rel="noopener noreferrer">Jon Gjengset&#39;s video on The Why, What and How of Pinning in Rust</a> \u6709\u4E2D\u82F1\u6587\u5B57\u5E55\u7684<a href="https://www.bilibili.com/video/BV1tK411L7s5/" target="_blank" rel="noopener noreferrer">B\u7AD9\u94FE\u63A5</a></p></li><li><p><a href="https://boats.gitlab.io/blog/post/2018-01-25-async-i-self-referential-structs/" target="_blank" rel="noopener noreferrer">Withoutboats blog series about async/await</a></p></li></ul><h2 id="\u8F6C\u8F7D\u8BF4\u660E" tabindex="-1">\u8F6C\u8F7D\u8BF4\u660E <a class="header-anchor" href="#\u8F6C\u8F7D\u8BF4\u660E" aria-hidden="true">#</a></h2><p>\u672C\u6587\u5141\u8BB8\u8F6C\u8F7D,\u4F46\u662F\u8BF7\u6CE8\u660E\u51FA\u5904.\u4F5C\u8005:stevenbai \u672C\u4EBA\u535A\u5BA2:<a href="https://stevenbai.top/" target="_blank" rel="noopener noreferrer">https://stevenbai.top/</a></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>\u6808\u62F7\u8D1D,\u6307\u9488\u7B49\u95EE\u9898 <a href="#fnref1" class="footnote-backref">\u21A9\uFE0E</a></p></li></ol></section>`,409),o=[e];function c(l,u,r,i,k,m){return a(),s("div",null,o)}var f=n(t,[["render",c]]);export{d as __pageData,f as default};
