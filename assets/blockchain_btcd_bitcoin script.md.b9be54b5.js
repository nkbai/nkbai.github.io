import{_ as s,c as a,o as n,N as p}from"./chunks/framework.3a9190c5.js";const y=JSON.parse('{"title":"bitcoin script","description":"","frontmatter":{"title":"bitcoin script","date":"2018-11-21T06:12:53.000Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/btcd/bitcoin script.md"}'),e={name:"blockchain/btcd/bitcoin script.md"},l=p(`<h1 id="p2pk-p2pkh-ms-p2sh-op-return-等的区别" tabindex="-1">P2PK P2PKH,MS,P2SH,OP_RETURN 等的区别 <a class="header-anchor" href="#p2pk-p2pkh-ms-p2sh-op-return-等的区别" aria-label="Permalink to &quot;P2PK P2PKH,MS,P2SH,OP_RETURN 等的区别&quot;">​</a></h1><h2 id="_1-p2pk-pay-to-public-key" tabindex="-1">1.P2PK pay_to_public_key <a class="header-anchor" href="#_1-p2pk-pay-to-public-key" aria-label="Permalink to &quot;1.P2PK pay_to_public_key&quot;">​</a></h2><p>pubkey script:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> &lt;pubkey&gt; OP_CHECKSIG</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>signature script: [sig]</p><h2 id="_2-p2pkh-pay-to-public-key-hash" tabindex="-1">2. P2PKH pay_to_public_key_hash <a class="header-anchor" href="#_2-p2pkh-pay-to-public-key-hash" aria-label="Permalink to &quot;2. P2PKH pay_to_public_key_hash&quot;">​</a></h2><p>pubkey script:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> OP_DUP OP_HASH160 hash(pubkey) OP_EQUALVERIFY </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>signature script:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[sig] &lt;pubkey&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_3-p2sh-pay-to-script-hash" tabindex="-1">3.P2SH pay_to_script_hash <a class="header-anchor" href="#_3-p2sh-pay-to-script-hash" aria-label="Permalink to &quot;3.P2SH pay_to_script_hash&quot;">​</a></h2><p>pubkey script:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">OP_HASH160 hash(Redeem script) OP_EQUAL</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>signature script 此处和上面两个都不一样,解锁需要分成两部 第一步: 验证 redeem script hash 值是否正确,也就是将redeem script 作为数据放到栈上,然后执行 OP_HASH160,如果为真才会执行第二步,否则失败 第二步:执行redeem script, 将signature script+redeem script 一起执行,如果为真则成功,否则交易失败</p><h2 id="_4-p2wpkh-pay-to-witness-public-key-hash" tabindex="-1">4.P2WPKH pay_to_witness_public_key_hash <a class="header-anchor" href="#_4-p2wpkh-pay-to-witness-public-key-hash" aria-label="Permalink to &quot;4.P2WPKH pay_to_witness_public_key_hash&quot;">​</a></h2><p>pubkey script:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">0 HASH160(public key)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>解锁脚本 signature script(scriptSig): 空 还增加了一个 witness 字段,用于验证交易合法性 <code>witness: &lt;signature&gt;</code></p><p>如果按照前面的验证规则,所有的隔离见证交易都是合法的,所以这是一个软分叉.</p><h2 id="_5-p2wsh-pay-to-witness-script-hash" tabindex="-1">5. P2WSH pay_to_witness_script_hash <a class="header-anchor" href="#_5-p2wsh-pay-to-witness-script-hash" aria-label="Permalink to &quot;5. P2WSH pay_to_witness_script_hash&quot;">​</a></h2><p>pubkey script:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">0 SHA256(redeem script)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>scriptSig: 空 <code>witness: &lt;signature&gt; &lt;redeem script&gt;</code></p><h2 id="矿工如何区分交易类型" tabindex="-1">矿工如何区分交易类型? <a class="header-anchor" href="#矿工如何区分交易类型" aria-label="Permalink to &quot;矿工如何区分交易类型?&quot;">​</a></h2><p>主要是根据 pubkey script 的模式进行匹配,不同的模式匹配不同的验证规则.尤其是隔离见证部分.</p><h2 id="scriptsig包含什么内容" tabindex="-1">scriptSig包含什么内容? <a class="header-anchor" href="#scriptsig包含什么内容" aria-label="Permalink to &quot;scriptSig包含什么内容?&quot;">​</a></h2><p>没看源码,纯属个人猜想. 一个 tx 的结构如下:</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MsgTx</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	Version  </span><span style="color:#C792EA;">int32</span></span>
<span class="line"><span style="color:#A6ACCD;">	TxIn     </span><span style="color:#89DDFF;">[]*</span><span style="color:#A6ACCD;">TxIn</span></span>
<span class="line"><span style="color:#A6ACCD;">	TxOut    </span><span style="color:#89DDFF;">[]*</span><span style="color:#A6ACCD;">TxOut</span></span>
<span class="line"><span style="color:#A6ACCD;">	LockTime </span><span style="color:#C792EA;">uint32</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// TxIn defines a bitcoin transaction input.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TxIn</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	PreviousOutPoint OutPoint</span></span>
<span class="line"><span style="color:#A6ACCD;">	SignatureScript  </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	Witness          TxWitness</span></span>
<span class="line"><span style="color:#A6ACCD;">	Sequence         </span><span style="color:#C792EA;">uint32</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// TxOut defines a bitcoin transaction output.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TxOut</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	Value    </span><span style="color:#C792EA;">int64</span></span>
<span class="line"><span style="color:#A6ACCD;">	PkScript </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>签名放在 TxIn 中,因此签名应该是对hash(Version,LockTime, current TxIn(exclude signature script),all TxOut)) 进行签名.</p><p>这样矿工可以验证交易,但是不能修改交易. 至于 TxID 为什么会变,是否因为 TxIn以及 TxOut 的顺序可以被矿工调整?</p>`,30),t=[l];function i(r,c,o,u,b,h){return n(),a("div",null,t)}const m=s(e,[["render",i]]);export{y as __pageData,m as default};
