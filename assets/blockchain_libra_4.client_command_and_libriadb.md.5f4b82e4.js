import{o as n,c as s,f as a,e}from"./app.9f1c34e3.js";const t='{"title":"4.打通client与libradb模块的任督二脉","description":"","frontmatter":{"title":"4.打通client与libradb模块的任督二脉","date":"2019-06-25T03:00:34.000Z","draft":false,"tags":["rust","blockchain","libra"],"series":["libra"],"categories":["技术相关"]},"headers":[{"level":2,"title":"client实现","slug":"client实现"},{"level":3,"title":"一个具体例子","slug":"一个具体例子"},{"level":2,"title":"libradb","slug":"libradb"},{"level":3,"title":"save_transactions","slug":"save-transactions"},{"level":3,"title":"getaccountstatewithproofbystate_root","slug":"get-account-state-with-proof-by-state-root"},{"level":3,"title":"getexecutorstartup_info","slug":"get-executor-startup-info"},{"level":3,"title":"get_transactions","slug":"get-transactions"},{"level":3,"title":"updatetolatest_ledger","slug":"update-to-latest-ledger"},{"level":3,"title":"AccountState请求是如何处理的","slug":"accountstate请求是如何处理的"},{"level":2,"title":"结束语","slug":"结束语"}],"relativePath":"blockchain/libra/4.client_command_and_libriadb.md","lastUpdated":1641604782000}',p={},o=e('<ul><li><a href="#client%E5%AE%9E%E7%8E%B0"> client实现</a><ul><li><a href="#%E4%B8%80%E4%B8%AA%E5%85%B7%E4%BD%93%E4%BE%8B%E5%AD%90"> 一个具体例子</a><ul><li><a href="#1-execute"> 1. execute</a></li><li><a href="#2-clientproxycreate_next_account"> 2. ClientProxy.create_next_account</a></li></ul></li></ul></li><li><a href="#libradb"> libradb</a><ul><li><a href="#save_transactions"> save_transactions</a></li><li><a href="#get_account_state_with_proof_by_state_root"> get_account_state_with_proof_by_state_root</a></li><li><a href="#get_executor_startup_info"> get_executor_startup_info</a></li><li><a href="#get_transactions"> get_transactions</a></li><li><a href="#update_to_latest_ledger"> update_to_latest_ledger </a></li><li><a href="#accountstate%E8%AF%B7%E6%B1%82%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E7%9A%84"> AccountState请求是如何处理的</a></li></ul></li><li><a href="#%E7%BB%93%E6%9D%9F%E8%AF%AD"> 结束语</a></li></ul>',1),c=e('<p>这篇文章目的是打通client命令行工具与底层数据库模块libradb之间的管理. <code>client</code>指的是 <a href="./1.start_in_one_minute.html">一分钟上手Libra</a> 中提到的client命令行工具. <code>libradb</code>指的是<code>storage/libradb</code>模块.</p><h2 id="client实现"><a class="header-anchor" href="#client实现" aria-hidden="true">#</a> client实现</h2><p>client本身主要提供了<code>account</code>,<code>transfer</code>和<code>query</code>三个命令,其中每个命令还有若干子命令. 这些命令中除了transfer是修改账本以外,其他都是直接查询的账本数据库.</p><h3 id="一个具体例子"><a class="header-anchor" href="#一个具体例子" aria-hidden="true">#</a> 一个具体例子</h3><p>这里就绕开client模块的枝枝蔓蔓,直接关注它最核心大部分. 我们找一个具体的子命令,追踪他的执行,然后看看他是怎么实现的. <code>account create</code>命令对应的就是<code>AccountCommandCreate</code>这个结构体,当我们敲下回车,在参数解析完毕以后就会进入execute函数.</p><h4 id="_1-execute"><a class="header-anchor" href="#_1-execute" aria-hidden="true">#</a> 1. execute</h4><p><code>fn execute(&amp;self, client: &amp;mut ClientProxy, _params: &amp;[&amp;str])</code> 第一个参数可以忽略,没有任何内容,第二个client是一个grpc client,就是与服务器的链接. <code>_params</code>则是空了,因为我们没有任何附加参数了. 这个函数会直接调用ClientProxy.create_next_account</p><h4 id="_2-clientproxy-create-next-account"><a class="header-anchor" href="#_2-clientproxy-create-next-account" aria-hidden="true">#</a> 2. ClientProxy.create_next_account</h4><ol><li>调用wallet.new_address获取新的地址, 这里的Wallet使用的是<code>WalletLibrary</code>,这个钱包中的私钥生成以及管理机制和比特币中的BIP32原理是完全一样,只是细节稍微不同. 我会在其他文章专门介绍钱包的实现.</li><li>调用get_account_data_from_address从服务器上获取该新生成地址的账户信息.</li></ol><div class="language-rust line-numbers-mode"><pre><code>   <span class="token keyword">fn</span> <span class="token function-definition function">get_account_data_from_address</span><span class="token punctuation">(</span>\n        client<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">GRPCClient</span><span class="token punctuation">,</span>\n        address<span class="token punctuation">:</span> <span class="token class-name">AccountAddress</span><span class="token punctuation">,</span>\n        key_pair<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">KeyPair</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">AccountData</span><span class="token operator">&gt;</span> \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个函数很简单就是调用get_account_blob然后对返回的信息封装成<code>AccountData</code>. 3. 调用GRPCClient的get_account_blob 获取AccountStateBlob以及Version信息</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_account_blob</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        address<span class="token punctuation">:</span> <span class="token class-name">AccountAddress</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">AccountStateBlob</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Version</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> req_item <span class="token operator">=</span> <span class="token class-name">RequestItem</span><span class="token punctuation">::</span><span class="token class-name">GetAccountState</span> <span class="token punctuation">{</span> address <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> response <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get_with_proof_sync</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span>req_item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n        <span class="token punctuation">...</span><span class="token comment">//处理返回结果</span>\n\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个函数组装请求参数<code>GetAccountState</code>,然后就是调用<code>get_with_proof_sync</code>然后解码response. 4. 调用GRPCClient的get_with_proof_sync</p><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_with_proof_sync</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        requested_items<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">RequestItem</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">UpdateToLatestLedgerResponse</span><span class="token operator">&gt;</span> \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个函数功能非常简单,就是调用<code>get_with_proof_async</code>,将异步转换为同步,同时会多次尝试. 具体代码也很简单就是一句话:</p><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">let</span> <span class="token keyword">mut</span> resp<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">UpdateToLatestLedgerResponse</span><span class="token operator">&gt;</span> <span class="token operator">=</span>\n            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get_with_proof_async</span><span class="token punctuation">(</span>requested_items<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这里其实也体现了怎么使用future库. 5. GRPCClient.get_with_proof_async</p><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">fn</span> <span class="token function-definition function">get_with_proof_async</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        requested_items<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">RequestItem</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">impl</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span><span class="token class-name">Item</span> <span class="token operator">=</span> <span class="token class-name">UpdateToLatestLedgerResponse</span><span class="token punctuation">,</span> <span class="token class-name">Error</span> <span class="token operator">=</span> <span class="token namespace">failure<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个函数做了两件事,一个是调用<code>update_to_latest_ledger_async_opt</code>发出请求,然后对结果进行验证,如果符合要求(主要是指validator的签名是否正确以及足够数量). <code>update_to_latest_ledger_async_opt</code>是一个protobuf自动生成的函数,可以直接忽略. 6. 服务端处理 客户端的请求发出以后,服务端处理代码位于<code>storage\\storage_service</code>中</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">impl</span> <span class="token class-name">Storage</span> <span class="token keyword">for</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">update_to_latest_ledger</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>\n        ctx<span class="token punctuation">:</span> <span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">RpcContext</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        req<span class="token punctuation">:</span> <span class="token class-name">UpdateToLatestLedgerRequest</span><span class="token punctuation">,</span>\n        sink<span class="token punctuation">:</span> <span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">UnarySink</span><span class="token operator">&lt;</span><span class="token class-name">UpdateToLatestLedgerResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">debug!</span><span class="token punctuation">(</span><span class="token string">&quot;[GRPC] Storage::update_to_latest_ledger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> _timer <span class="token operator">=</span> <span class="token constant">SVC_COUNTERS</span><span class="token punctuation">.</span><span class="token function">req</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">update_to_latest_ledger_inner</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">provide_grpc_response</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>其中的<code>update_to_latest_ledger_inner</code>简单处理以后就会走到<code>storage\\libradb\\lib.rs</code>中的<code>update_to_latest_ledger</code>.</p><h2 id="libradb"><a class="header-anchor" href="#libradb" aria-hidden="true">#</a> libradb</h2><p>所有libra中需要持久化存储的数据入口都在这里.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">/// This holds a handle to the underlying DB responsible for physical storage and provides APIs for</span>\n<span class="token comment">/// access to the core Libra data structures.</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">LibraDB</span> <span class="token punctuation">{</span>\n    db<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token constant">DB</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    ledger_store<span class="token punctuation">:</span> <span class="token class-name">LedgerStore</span><span class="token punctuation">,</span>\n    transaction_store<span class="token punctuation">:</span> <span class="token class-name">TransactionStore</span><span class="token punctuation">,</span>\n    state_store<span class="token punctuation">:</span> <span class="token class-name">StateStore</span><span class="token punctuation">,</span>\n    event_store<span class="token punctuation">:</span> <span class="token class-name">EventStore</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">LibraDB</span> <span class="token punctuation">{</span>\n    <span class="token comment">/// This creates an empty LibraDB instance on disk or opens one if it already exists.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token operator">&lt;</span><span class="token class-name">P</span><span class="token punctuation">:</span> <span class="token class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">Path</span><span class="token operator">&gt;</span> <span class="token operator">+</span> <span class="token class-name">Clone</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>db_root_path<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> \n\n      <span class="token comment">/// Persist transactions. Called by the executor module when either syncing nodes or committing</span>\n    <span class="token comment">/// blocks during normal operation.</span>\n    <span class="token comment">///</span>\n    <span class="token comment">/// When `ledger_info_with_sigs` is provided, verify that the transaction accumulator root hash</span>\n    <span class="token comment">/// it carries is generated after the `txns_to_commit` are applied.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">save_transactions</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        txns_to_commit<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">TransactionToCommit</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        first_version<span class="token punctuation">:</span> <span class="token class-name">Version</span><span class="token punctuation">,</span>\n        ledger_info_with_sigs<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">LedgerInfoWithSignatures</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>  <span class="token punctuation">;</span>\n \n     <span class="token comment">/// This backs the `UpdateToLatestLedger` public read API which returns the latest</span>\n    <span class="token comment">/// [`LedgerInfoWithSignatures`] together with items requested and proofs relative to the same</span>\n    <span class="token comment">/// ledger info.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">update_to_latest_ledger</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        _client_known_version<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        request_items<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">RequestItem</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>\n        <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">ResponseItem</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        <span class="token class-name">LedgerInfoWithSignatures</span><span class="token punctuation">,</span>\n        <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">ValidatorChangeEventWithProof</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token operator">&gt;</span> \n\n     <span class="token comment">/// Gets an account state by account address, out of the ledger state indicated by the state</span>\n    <span class="token comment">/// Merkle tree root hash.</span>\n    <span class="token comment">///</span>\n    <span class="token comment">/// This is used by the executor module internally.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_account_state_with_proof_by_state_root</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        address<span class="token punctuation">:</span> <span class="token class-name">AccountAddress</span><span class="token punctuation">,</span>\n        state_root<span class="token punctuation">:</span> <span class="token class-name">HashValue</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">AccountStateBlob</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">SparseMerkleProof</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n       <span class="token comment">/// Gets information needed from storage during the startup of the executor module.</span>\n    <span class="token comment">///</span>\n    <span class="token comment">/// This is used by the executor module internally.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_executor_startup_info</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">ExecutorStartupInfo</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>\n\n       <span class="token comment">/// Gets a batch of transactions for the purpose of synchronizing state to another node.</span>\n    <span class="token comment">///</span>\n    <span class="token comment">/// This is used by the State Synchronizer module internally.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_transactions</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        start_version<span class="token punctuation">:</span> <span class="token class-name">Version</span><span class="token punctuation">,</span>\n        limit<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        ledger_version<span class="token punctuation">:</span> <span class="token class-name">Version</span><span class="token punctuation">,</span>\n        fetch_events<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">TransactionListWithProof</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><p><code>LibraDB</code>只提供了有限的几个公共函数,</p><h3 id="save-transactions"><a class="header-anchor" href="#save-transactions" aria-hidden="true">#</a> save_transactions</h3><p>这是共识模块达成共识以后,生成了新的block,需要将这些Tx存储到账本中. 从参数中可以看出他既包含了Tx也包含了这些Tx的相关证明(Validator的签名).</p><h3 id="get-account-state-with-proof-by-state-root"><a class="header-anchor" href="#get-account-state-with-proof-by-state-root" aria-hidden="true">#</a> get_account_state_with_proof_by_state_root</h3><p>用来查询账户在指定Merkle树下的状态.</p><h3 id="get-executor-startup-info"><a class="header-anchor" href="#get-executor-startup-info" aria-hidden="true">#</a> get_executor_startup_info</h3><p>这个是<code>executor</code>内部使用.</p><h3 id="get-transactions"><a class="header-anchor" href="#get-transactions" aria-hidden="true">#</a> get_transactions</h3><p>这个是<code>Synchronizer</code>内部使用</p><h3 id="update-to-latest-ledger"><a class="header-anchor" href="#update-to-latest-ledger" aria-hidden="true">#</a> update_to_latest_ledger</h3><p>这个函数式我们重点分析的对象.</p><div class="language-rust line-numbers-mode"><pre><code>\n    <span class="token comment">/// This backs the `UpdateToLatestLedger` public read API which returns the latest</span>\n    <span class="token comment">/// [`LedgerInfoWithSignatures`] together with items requested and proofs relative to the same</span>\n    <span class="token comment">/// ledger info.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">update_to_latest_ledger</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        _client_known_version<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        request_items<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">RequestItem</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>\n        <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">ResponseItem</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        <span class="token class-name">LedgerInfoWithSignatures</span><span class="token punctuation">,</span>\n        <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">ValidatorChangeEventWithProof</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n       <span class="token punctuation">...</span>\n        <span class="token comment">// Fulfill all request items</span>\n        <span class="token keyword">let</span> response_items <span class="token operator">=</span> request_items\n            <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>request_item<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">match</span> request_item <span class="token punctuation">{</span>\n                <span class="token class-name">RequestItem</span><span class="token punctuation">::</span><span class="token class-name">GetAccountState</span> <span class="token punctuation">{</span> address <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">ResponseItem</span><span class="token punctuation">::</span><span class="token class-name">GetAccountState</span> <span class="token punctuation">{</span>\n                   <span class="token punctuation">...</span> <span class="token comment">//处理GetAccountState请求  query balance|sequence|account_state等命令 </span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token class-name">RequestItem</span><span class="token punctuation">::</span><span class="token class-name">GetAccountTransactionBySequenceNumber</span> <span class="token punctuation">{</span>\n                    account<span class="token punctuation">,</span>\n                    sequence_number<span class="token punctuation">,</span>\n                    fetch_events<span class="token punctuation">,</span>\n                <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                   <span class="token punctuation">...</span> <span class="token comment">//处理GetAccountTransactionBySequenceNumber请求 query txn_acc_seq命令</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token class-name">RequestItem</span><span class="token punctuation">::</span><span class="token class-name">GetEventsByEventAccessPath</span> <span class="token punctuation">{</span>\n                    access_path<span class="token punctuation">,</span>\n                    start_event_seq_num<span class="token punctuation">,</span>\n                    ascending<span class="token punctuation">,</span>\n                    limit<span class="token punctuation">,</span>\n                <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                   <span class="token punctuation">...</span> <span class="token comment">//query event</span>\n                <span class="token punctuation">}</span>\n                <span class="token class-name">RequestItem</span><span class="token punctuation">::</span><span class="token class-name">GetTransactions</span> <span class="token punctuation">{</span>\n                    start_version<span class="token punctuation">,</span>\n                    limit<span class="token punctuation">,</span>\n                    fetch_events<span class="token punctuation">,</span>\n                <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                   <span class="token comment">//query txn_range命令</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n            <span class="token punctuation">...</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><p>这里针对用户的请求,分成四类分别处理. 实际上这正是RequestItem的定义.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">RequestItem</span> <span class="token punctuation">{</span>\n    <span class="token class-name">GetAccountTransactionBySequenceNumber</span> <span class="token punctuation">{</span>\n        account<span class="token punctuation">:</span> <span class="token class-name">AccountAddress</span><span class="token punctuation">,</span>\n        sequence_number<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        fetch_events<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// this can&#39;t be the first variant, tracked here https://github.com/AltSysrq/proptest/issues/141</span>\n    <span class="token class-name">GetAccountState</span> <span class="token punctuation">{</span>\n        address<span class="token punctuation">:</span> <span class="token class-name">AccountAddress</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token class-name">GetEventsByEventAccessPath</span> <span class="token punctuation">{</span>\n        access_path<span class="token punctuation">:</span> <span class="token class-name">AccessPath</span><span class="token punctuation">,</span>\n        start_event_seq_num<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        ascending<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n        limit<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token class-name">GetTransactions</span> <span class="token punctuation">{</span>\n        start_version<span class="token punctuation">:</span> <span class="token class-name">Version</span><span class="token punctuation">,</span>  \n        limit<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        fetch_events<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="accountstate请求是如何处理的"><a class="header-anchor" href="#accountstate请求是如何处理的" aria-hidden="true">#</a> AccountState请求是如何处理的</h3><div class="language-rust line-numbers-mode"><pre><code>    <span class="token keyword">fn</span> <span class="token function-definition function">get_account_state_with_proof</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        address<span class="token punctuation">:</span> <span class="token class-name">AccountAddress</span><span class="token punctuation">,</span>\n        version<span class="token punctuation">:</span> <span class="token class-name">Version</span><span class="token punctuation">,</span>\n        ledger_version<span class="token punctuation">:</span> <span class="token class-name">Version</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">AccountStateWithProof</span><span class="token operator">&gt;</span> \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>该请求的处理,调用的是LibraDB的get_account_state_with_proof</p><ol><li>调用get_latest_version读取数据库,或者最新的latest_version</li><li>验证传递进来的ledger_version必须小于等于latest_version</li><li>调用LedgerStore的get_transaction_info_with_proof获取指定Version的<code>txn_info</code>和<code>txn_info_accumulator_proof</code></li><li>调用StateStore.get_account_state_with_proof_by_state_root获取指定地址的<code>account_state_blob</code>和<code>sparse_merkle_proof</code></li><li>组装返回结果</li></ol><p>走到这里我们终于把client命令和数据库之间的关联起来了. 至于如何读取数据库的内容,请参考<a href="./3.Libra_Schema.html">3.Libra中数据存储的Schema</a>一文</p><h2 id="结束语"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h2><p>整个文章分文两部分,一个是grpc的client实现,一个是grpc服务端实现, 整体框架还是非常清晰的. Libra作为一个联盟链,其数据结构设计尤其独特之处,整个过程我没有看到任何Block相关字样,都是围绕着Tx展开,这应该是他为了提高TPS所做的优化吧. 虽然Libra称之为BlockChain,但是这里面既没有Block也没有Chain,实际上是一个基于稀疏默克尔树的大状态机.</p>',45);p.render=function(e,t,p,l,r,u){return n(),s("div",null,[a(' @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} '),a(" code_chunk_output "),o,a(" /code_chunk_output "),c])};export{t as __pageData,p as default};
