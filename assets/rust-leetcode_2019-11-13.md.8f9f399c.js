import{_ as n,c as s,o as a,a as p}from"./app.3ef0f76b.js";const d='{"title":"1145. \u4E8C\u53C9\u6811\u7740\u8272\u6E38\u620F","description":"","frontmatter":{"title":"1145. \u4E8C\u53C9\u6811\u7740\u8272\u6E38\u620F","date":"2019-11-12T19:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["\u6280\u672F\u76F8\u5173"],"plugins":["viz"]},"headers":[{"level":2,"title":"\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-11-13)","slug":"\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-11-13"},{"level":2,"title":"\u9898\u76EE\u63CF\u8FF0","slug":"\u9898\u76EE\u63CF\u8FF0"},{"level":2,"title":"\u89E3\u9898\u601D\u8DEF","slug":"\u89E3\u9898\u601D\u8DEF"},{"level":2,"title":"\u89E3\u9898\u8FC7\u7A0B","slug":"\u89E3\u9898\u8FC7\u7A0B"},{"level":2,"title":"\u4E00\u70B9\u611F\u609F","slug":"\u4E00\u70B9\u611F\u609F"},{"level":2,"title":"\u5176\u4ED6","slug":"\u5176\u4ED6"}],"relativePath":"rust-leetcode/2019-11-13.md"}',t={},o=p(`<h2 id="\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-11-13" tabindex="-1">\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-11-13) <a class="header-anchor" href="#\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-11-13" aria-hidden="true">#</a></h2><p>\u575A\u6301\u6BCF\u5929\u4E00\u9053\u9898,\u5237\u9898\u5B66\u4E60Rust.</p><h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1">\u9898\u76EE\u63CF\u8FF0 <a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a></h2><p>\u6709\u4E24\u4F4D\u6781\u5BA2\u73A9\u5BB6\u53C2\u4E0E\u4E86\u4E00\u573A\u300C\u4E8C\u53C9\u6811\u7740\u8272\u300D\u7684\u6E38\u620F\u3002\u6E38\u620F\u4E2D\uFF0C\u7ED9\u51FA\u4E8C\u53C9\u6811\u7684\u6839\u8282\u70B9\xA0root\uFF0C\u6811\u4E0A\u603B\u5171\u6709 n \u4E2A\u8282\u70B9\uFF0C\u4E14 n \u4E3A\u5947\u6570\uFF0C\u5176\u4E2D\u6BCF\u4E2A\u8282\u70B9\u4E0A\u7684\u503C\u4ECE\xA01 \u5230\xA0n\xA0\u5404\u4E0D\u76F8\u540C\u3002</p><p>\u6E38\u620F\u4ECE\u300C\u4E00\u53F7\u300D\u73A9\u5BB6\u5F00\u59CB\uFF08\u300C\u4E00\u53F7\u300D\u73A9\u5BB6\u4E3A\u7EA2\u8272\uFF0C\u300C\u4E8C\u53F7\u300D\u73A9\u5BB6\u4E3A\u84DD\u8272\uFF09\uFF0C\u6700\u5F00\u59CB\u65F6\uFF0C</p><p>\u300C\u4E00\u53F7\u300D\u73A9\u5BB6\u4ECE [1, n]\xA0\u4E2D\u53D6\u4E00\u4E2A\u503C\xA0x\uFF081 &lt;= x &lt;= n\uFF09\uFF1B</p><p>\u300C\u4E8C\u53F7\u300D\u73A9\u5BB6\u4E5F\u4ECE\xA0[1, n]\xA0\u4E2D\u53D6\u4E00\u4E2A\u503C\xA0y\uFF081 &lt;= y &lt;= n\uFF09\u4E14\xA0y != x\u3002</p><p>\u300C\u4E00\u53F7\u300D\u73A9\u5BB6\u7ED9\u503C\u4E3A\xA0x\xA0\u7684\u8282\u70B9\u67D3\u4E0A\u7EA2\u8272\uFF0C\u800C\u300C\u4E8C\u53F7\u300D\u73A9\u5BB6\u7ED9\u503C\u4E3A\xA0y\xA0\u7684\u8282\u70B9\u67D3\u4E0A\u84DD\u8272\u3002</p><p>\u4E4B\u540E\u4E24\u4F4D\u73A9\u5BB6\u8F6E\u6D41\u8FDB\u884C\u64CD\u4F5C\uFF0C\u6BCF\u4E00\u56DE\u5408\uFF0C\u73A9\u5BB6\u9009\u62E9\u4E00\u4E2A\u4ED6\u4E4B\u524D\u6D82\u597D\u989C\u8272\u7684\u8282\u70B9\uFF0C\u5C06\u6240\u9009\u8282\u70B9\u4E00\u4E2A \u672A\u7740\u8272 \u7684\u90BB\u8282\u70B9\uFF08\u5373\u5DE6\u53F3\u5B50\u8282\u70B9\u3001\u6216\u7236\u8282\u70B9\uFF09\u8FDB\u884C\u67D3\u8272\u3002</p><p>\u5982\u679C\u5F53\u524D\u73A9\u5BB6\u65E0\u6CD5\u627E\u5230\u8FD9\u6837\u7684\u8282\u70B9\u6765\u67D3\u8272\u65F6\uFF0C\u4ED6\u7684\u56DE\u5408\u5C31\u4F1A\u88AB\u8DF3\u8FC7\u3002</p><p>\u82E5\u4E24\u4E2A\u73A9\u5BB6\u90FD\u6CA1\u6709\u53EF\u4EE5\u67D3\u8272\u7684\u8282\u70B9\u65F6\uFF0C\u6E38\u620F\u7ED3\u675F\u3002\u7740\u8272\u8282\u70B9\u6700\u591A\u7684\u90A3\u4F4D\u73A9\u5BB6\u83B7\u5F97\u80DC\u5229 \u270C\uFE0F\u3002</p><p>\u73B0\u5728\uFF0C\u5047\u8BBE\u4F60\u662F\u300C\u4E8C\u53F7\u300D\u73A9\u5BB6\uFF0C\u6839\u636E\u6240\u7ED9\u51FA\u7684\u8F93\u5165\uFF0C\u5047\u5982\u5B58\u5728\u4E00\u4E2A\xA0y\xA0\u503C\u53EF\u4EE5\u786E\u4FDD\u4F60\u8D62\u5F97\u8FD9\u573A\u6E38\u620F\uFF0C\u5219\u8FD4\u56DE\xA0true\uFF1B\u82E5\u65E0\u6CD5\u83B7\u80DC\uFF0C\u5C31\u8BF7\u8FD4\u56DE false\u3002</p><p>\u793A\u4F8B\uFF1A</p><p><img alt="" data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/08/04/1480-binary-tree-coloring-game.png" loading="lazy" class="lazy"> \u8F93\u5165\uFF1Aroot = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3 \u8F93\u51FA\uFF1ATrue \u89E3\u91CA\uFF1A\u7B2C\u4E8C\u4E2A\u73A9\u5BB6\u53EF\u4EE5\u9009\u62E9\u503C\u4E3A 2 \u7684\u8282\u70B9\u3002</p><p>\u63D0\u793A\uFF1A</p><p>\u4E8C\u53C9\u6811\u7684\u6839\u8282\u70B9\u4E3A\xA0root\uFF0C\u6811\u4E0A\u7531 n \u4E2A\u8282\u70B9\uFF0C\u8282\u70B9\u4E0A\u7684\u503C\u4ECE 1 \u5230 n \u5404\u4E0D\u76F8\u540C\u3002 n \u4E3A\u5947\u6570\u3002 1 &lt;= x &lt;= n\xA0&lt;= 100</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1A<a href="https://leetcode-cn.com/problems/binary-tree-coloring-game" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/binary-tree-coloring-game</a> \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1">\u89E3\u9898\u601D\u8DEF <a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a></h2><ol><li>\u9996\u5148\u6811\u662F\u8054\u901A\u7684,\u4ECE\u4EFB\u610F\u4E00\u4E2A\u8282\u70B9\u90FD\u53EF\u4EE5\u8D70\u904D\u6574\u68F5\u6811\u7684\u4EFB\u610F\u8282\u70B9</li><li>\u4ECE\u4EFB\u610F\u56FA\u5B9A\u8282\u70B9\u62B5\u8FBE\u5176\u4ED6\u8282\u70B9\u90FD\u53EA\u6709\u4E00\u6761\u8DEF\u5F84,\u4E0D\u5B58\u5728\u591A\u6761\u8DEF\u5F84\u7684\u60C5\u51B5. \u5F53\u9009\u5B9Ax\u4EE5\u540E,\u6811\u5C31\u5206\u6210\u4E86\u4E09\u90E8\u5206,\u5DE6\u5B50\u6811,\u53F3\u5B50\u6811\u548C\u4ECE\u7236\u8282\u70B9\u51FA\u53D1\u7684\u8DEF \u90A3\u4E48\u5C31\u662F\u627E\u5BFB\u4E00\u4E0B\u80FD\u5426\u5728x\u7684\u8FD9\u4E09\u4E2A\u7D27\u90BB\u90E8\u5206\u9009\u4E00\u4E2Ay,\u8BA9y\u8986\u76D6\u7684\u8282\u70B9\u6570\u591A\u4F59\u5269\u4E0B\u7684\u4E24\u4E2A\u4E4B\u548C.</li></ol><h2 id="\u89E3\u9898\u8FC7\u7A0B" tabindex="-1">\u89E3\u9898\u8FC7\u7A0B <a class="header-anchor" href="#\u89E3\u9898\u8FC7\u7A0B" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>share<span class="token punctuation">::</span></span><span class="token class-name">TreeNode</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Solution</span><span class="token punctuation">;</span>
<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
    n:\u5B9E\u9645\u4E0A\u5C31\u662F\u6811\u4E2D\u8282\u70B9\u7684\u4E2A\u6570
    \u91C7\u7528\u524D\u5E8F\u904D\u5386,\u78B0\u5230x\u540E,\u5BF9x\u7684\u5DE6\u53F3\u5B50\u6811\u5206\u522B\u8BA1\u6570,
    \u5F97\u5230\u4E09\u4E2A\u90E8\u5206\u7684\u4E2A\u6570\u5373\u53EF
    \u53EA\u8981\u6709\u4E00\u4E2A\u90E8\u5206\u7684\u4E2A\u6570\u8D85\u8FC7\u53E6\u5916\u4E24\u4E2A\u4E4B\u548C,\u90A3\u5C31\u5E94\u8BE5\u8BA4\u4E3A\u6211\u53EF\u4EE5\u8D62.
    */</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">btree_game_winning_move</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">TreeNode</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">find_x</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> found<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>found <span class="token punctuation">{</span>
            <span class="token comment">//\u6CA1\u6709x</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> path1 <span class="token operator">=</span> l<span class="token punctuation">;</span>
        <span class="token keyword">let</span> path2 <span class="token operator">=</span> r<span class="token punctuation">;</span>
        <span class="token keyword">let</span> path3 <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> path1 <span class="token operator">&gt;</span> path2 <span class="token operator">+</span> path3 <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> path2 <span class="token operator">&gt;</span> path1 <span class="token operator">+</span> path3 <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> path3 <span class="token operator">&gt;</span> path1 <span class="token operator">+</span> path2 <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u5728\u6811\u4E2D\u67E5\u627Ex,\u5E76\u4E14\u8FD4\u56DEx\u5DE6\u53F3\u4E24\u9897\u5B50\u6811\u7684\u4E2A\u6570</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">find_x</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">TreeNode</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> found<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> root<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> r <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">==</span> x <span class="token punctuation">{</span>
            <span class="token comment">//\u627E\u5230\u4E86</span>
            <span class="token operator">*</span>found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">count_nodes</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">count_nodes</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">find_x</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> found<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token operator">*</span>found <span class="token punctuation">{</span>
                <span class="token keyword">return</span> l<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">find_x</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> found<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token operator">*</span>found <span class="token punctuation">{</span>
                <span class="token keyword">return</span> r<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">count_nodes</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">TreeNode</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> n<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">count_nodes</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">count_nodes</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>share<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token function">build_tree_ignore_parent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">btree_game_winning_move</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br></div></div><h2 id="\u4E00\u70B9\u611F\u609F" tabindex="-1">\u4E00\u70B9\u611F\u609F <a class="header-anchor" href="#\u4E00\u70B9\u611F\u609F" aria-hidden="true">#</a></h2><h2 id="\u5176\u4ED6" tabindex="-1">\u5176\u4ED6 <a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a></h2><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u7684<a href="https://github.com/nkbai/rust-leetcode" target="_blank" rel="noopener noreferrer">github</a>,\u672C\u9879\u76EE\u6587\u7AE0\u6240\u6709\u4EE3\u7801\u90FD\u53EF\u4EE5\u627E\u5230.</p>`,24),e=[o];function c(l,u,k,i,r,b){return a(),s("div",null,e)}var f=n(t,[["render",c]]);export{d as __pageData,f as default};
