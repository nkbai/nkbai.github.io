import{o as n,c as s,f as a,e as p}from"./app.7522cc54.js";const e='{"title":"6.libra的mempool模块解读-1","description":"","frontmatter":{"title":"6.libra的mempool模块解读-1","date":"2019-07-02T03:00:34.000Z","draft":false,"tags":["rust","blockchain","libra"],"series":["libra"],"categories":["技术相关"]},"headers":[{"level":2,"title":"基本功能","slug":"基本功能"},{"level":2,"title":"mempool的对外接口","slug":"mempool的对外接口"},{"level":3,"title":"接受新的Tx","slug":"接受新的tx"},{"level":3,"title":"remove_transaction 移除已打包交易","slug":"remove-transaction-移除已打包交易"},{"level":3,"title":"为consensus模块提供下一块交易数据","slug":"为consensus模块提供下一块交易数据"},{"level":3,"title":"其他几个函数","slug":"其他几个函数"}],"relativePath":"libra/6.libria_mempool_1.md","lastUpdated":1564531739000}',t={},o=p('<ul><li><a href="#%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD"> 基本功能</a></li><li><a href="#mempool%E7%9A%84%E5%AF%B9%E5%A4%96%E6%8E%A5%E5%8F%A3"> mempool的对外接口</a><ul><li><a href="#%E6%8E%A5%E5%8F%97%E6%96%B0%E7%9A%84tx"> 接受新的Tx</a></li><li><a href="#remove_transaction-%E7%A7%BB%E9%99%A4%E5%B7%B2%E6%89%93%E5%8C%85%E4%BA%A4%E6%98%93"> remove_transaction 移除已打包交易</a></li><li><a href="#%E4%B8%BAconsensus%E6%A8%A1%E5%9D%97%E6%8F%90%E4%BE%9B%E4%B8%8B%E4%B8%80%E5%9D%97%E4%BA%A4%E6%98%93%E6%95%B0%E6%8D%AE"> 为consensus模块提供下一块交易数据</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%87%A0%E4%B8%AA%E5%87%BD%E6%95%B0"> 其他几个函数</a></li></ul></li></ul>',1),c=p('<p>Mempool模块主要用于缓存未打包的合法交易,该模块和比特币,以太坊源码中的TxPool功能等价,只要包含两个功能:</p><ol><li>接收本地收到的Tx并验证</li><li>和其他节点之间互相同步Tx. 因为Libra使用的是不会分叉的PBFT共识,所以缓冲池的实现以及管理要简单许多.</li></ol><h2 id="基本功能"><a class="header-anchor" href="#基本功能" aria-hidden="true">#</a> 基本功能</h2><p>mempool的功能主要是接收来自AC模块的交易,同时和其他节点之间通过网络同步交易. mempool主要用于保存可能打包的交易,主要是指验证合法的交易(包括签名合法,账户金额足够). 可以简单分类:</p><ol><li>各方面都齐备,可以进入下一块的交易. 主要是seq_number连起来的.</li><li>因为seq_number没有连续不能被打包的交易 (比如当前AccountA的Tx中包含了[2,3,4,7,8]交易,但是5没有,所以[7,8]是不可能被打包的)</li></ol><p>同时libra中也有和以太坊一样的GasPrice概念(功能也一样),因此如果对于同一账号,seq_number相同的情况下,会选择GasPrice高的那个Tx. 根据以上讨论,可以看出实际上Libra唯一的ID可以不认为是交易数据的哈希值,可以把(Address,seq_number)作为唯一的ID,当然这个在比特币以太坊等公链中也行的通. 因为在Libra中把(Address,seq_number)二元组作为Tx唯一的ID,所以其代码设计中对于Tx的管理和以太坊也不太一样.</p><p>那么什么是mempool呢? 可以通俗的认为就是一个<code>HashMap&lt;AccountAddress, BTreeMap&lt;u64, MempoolTransaction&gt;&gt;</code>, 其中这里的u64就是对应账户的seq_number. 其所有功能都是围绕着这个数据结构展开.</p><h2 id="mempool的对外接口"><a class="header-anchor" href="#mempool的对外接口" aria-hidden="true">#</a> mempool的对外接口</h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token class-name">Mempool</span> <span class="token punctuation">{</span>\n    <span class="token comment">//主要用于接受来自AC的新增Tx</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">add_transaction_with_validation</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">RpcContext</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>mempool<span class="token punctuation">::</span></span><span class="token class-name">AddTransactionWithValidationRequest</span><span class="token punctuation">,</span> sink<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">UnarySink</span><span class="token operator">&lt;</span><span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>mempool<span class="token punctuation">::</span></span><span class="token class-name">AddTransactionWithValidationResponse</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//服务于consensus模块,从mempool中获取下一块可以打包的交易</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">get_block</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">RpcContext</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>mempool<span class="token punctuation">::</span></span><span class="token class-name">GetBlockRequest</span><span class="token punctuation">,</span> sink<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">UnarySink</span><span class="token operator">&lt;</span><span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>mempool<span class="token punctuation">::</span></span><span class="token class-name">GetBlockResponse</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//服务于consensus模块,当交易被打包以后,缓存的相关Tx就可以移除了.</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">commit_transactions</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">RpcContext</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>mempool<span class="token punctuation">::</span></span><span class="token class-name">CommitTransactionsRequest</span><span class="token punctuation">,</span> sink<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">UnarySink</span><span class="token operator">&lt;</span><span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>mempool<span class="token punctuation">::</span></span><span class="token class-name">CommitTransactionsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//健康检查,主要是检查缓冲区是否放得下更多Tx</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">health_check</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">RpcContext</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>mempool<span class="token punctuation">::</span></span><span class="token class-name">HealthCheckRequest</span><span class="token punctuation">,</span> sink<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">grpcio<span class="token punctuation">::</span></span><span class="token class-name">UnarySink</span><span class="token operator">&lt;</span><span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>mempool<span class="token punctuation">::</span></span><span class="token class-name">HealthCheckResponse</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>MempoolService的实现位于<code>mempool/src/mempool_service.rs</code>,这里的实现就是对于grpc接口数据的处理,真正的处理逻辑位于<code>CoreMempool</code></p><div class="language-rust line-numbers-mode"><pre><code><span class="token attribute attr-name">#[derive(Clone)]</span>\n<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MempoolService</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> core_mempool<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">CoreMempool</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Mempool</span> <span class="token punctuation">{</span>\n    <span class="token comment">// stores metadata of all transactions in mempool (of all states)</span>\n    transactions<span class="token punctuation">:</span> <span class="token class-name">TransactionStore</span><span class="token punctuation">,</span> <span class="token comment">//这是系统的核心</span>\n\n    sequence_number_cache<span class="token punctuation">:</span> <span class="token class-name">LruCache</span><span class="token operator">&lt;</span><span class="token class-name">AccountAddress</span><span class="token punctuation">,</span> <span class="token keyword">u64</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">//这里保存的是AccountAddress对应的下一个可以打包的Tx对应的seq_number</span>\n    <span class="token comment">// temporary DS. TODO: eventually retire it</span>\n    <span class="token comment">// for each transaction, entry with timestamp is added when transaction enters mempool</span>\n    <span class="token comment">// used to measure e2e latency of transaction in system, as well as time it takes to pick it up</span>\n    <span class="token comment">// by consensus</span>\n    metrics_cache<span class="token punctuation">:</span> <span class="token class-name">TtlCache</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">AccountAddress</span><span class="token punctuation">,</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">i64</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">//这个是为了</span>\n    <span class="token comment">//一个交易在缓冲池中不能呆的太久,如果迟迟不能被打包会被定期清理掉.这个时间就是其在缓冲池中呆的最长时间</span>\n    <span class="token keyword">pub</span> system_transaction_timeout<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/// TransactionStore is in-memory storage for all transactions in mempool</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">TransactionStore</span> <span class="token punctuation">{</span>\n    <span class="token comment">// main DS</span>\n    transactions<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">AccountAddress</span><span class="token punctuation">,</span> <span class="token class-name">AccountTransactions</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">/* 地址=&gt;{seq=&gt;Tx} 二重map,所有收集到的合法的Tx */</span>\n\n    <span class="token comment">// indexes</span>\n    priority_index<span class="token punctuation">:</span> <span class="token class-name">PriorityIndex</span><span class="token punctuation">,</span> <span class="token comment">/* 按照gas_price,expiration_time,address,\n                                    * sequence_number顺序排序的所有可以打包的Tx */</span>\n    <span class="token comment">// TTLIndex based on client-specified expiration time</span>\n    expiration_time_index<span class="token punctuation">:</span> <span class="token class-name">TTLIndex</span><span class="token punctuation">,</span> <span class="token comment">/* 这个过期时间是用户提交的,这个时间虽然是Duration,\n                                      * 但是其实也是绝对时间,保存所有合法的Tx */</span>\n    <span class="token comment">// TTLIndex based on system expiration time</span>\n    <span class="token comment">// we keep it separate from `expiration_time_index` so Mempool can&#39;t be clogged</span>\n    <span class="token comment">//  by old transactions even if it hasn&#39;t received commit callbacks for a while</span>\n    system_ttl_index<span class="token punctuation">:</span> <span class="token class-name">TTLIndex</span><span class="token punctuation">,</span> <span class="token comment">/* 这个时间是由mempool控制,\n                                 * 在进入缓冲池的时候会设置成当时的时间加上过期时间,\n                                 * 保存所有的合法Tx */</span>\n    timeline_index<span class="token punctuation">:</span> <span class="token class-name">TimelineIndex</span><span class="token punctuation">,</span> <span class="token comment">/* 里面保存的timeline_id,用于mempool之间的Tx同步,\n                                    * 这里面按序保存着可以打包的Tx */</span>\n    <span class="token comment">// keeps track of &quot;non-ready&quot; txns (transactions that can&#39;t be included in next block)</span>\n    parking_lot_index<span class="token punctuation">:</span> <span class="token class-name">ParkingLotIndex</span><span class="token punctuation">,</span> <span class="token comment">//暂时不满足条件,不能打包的Tx</span>\n\n    <span class="token comment">// configuration</span>\n    capacity<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>\n    capacity_per_user<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="接受新的tx"><a class="header-anchor" href="#接受新的tx" aria-hidden="true">#</a> 接受新的Tx</h3><p>在<code>add_transaction_with_validation</code>中只是简单解析一下参数就很快进入到<code>CoreMempool</code>的<code>add_txn</code>中,我们重点解析一下这个函数.</p><div class="language-rust line-numbers-mode"><pre><code>    <span class="token comment">/// Used to add a transaction to the Mempool</span>\n    <span class="token comment">/// Performs basic validation: checks account&#39;s balance and sequence number</span>\n    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_txn</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>\n        txn<span class="token punctuation">:</span> <span class="token class-name">SignedTransaction</span><span class="token punctuation">,</span>\n        gas_amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        db_sequence_number<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token comment">//已经确认的txn&#39;s sender的seq_number</span>\n        balance<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span><span class="token comment">//这个账户的金额</span>\n        timeline_state<span class="token punctuation">:</span> <span class="token class-name">TimelineState</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">MempoolAddTransactionStatus</span> <span class="token punctuation">{</span>\n        <span class="token macro property">debug!</span><span class="token punctuation">(</span>\n            <span class="token string">&quot;[Mempool] Adding transaction to mempool: {}:{}&quot;</span><span class="token punctuation">,</span>\n            <span class="token operator">&amp;</span>txn<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            db_sequence_number\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;signedTransaction:{:?}&quot;</span><span class="token punctuation">,</span> txn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//账户余额都不够付gas费了,直接护额略</span>\n        <span class="token keyword">if</span> <span class="token operator">!</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">check_balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>txn<span class="token punctuation">,</span> balance<span class="token punctuation">,</span> gas_amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">MempoolAddTransactionStatus</span><span class="token punctuation">::</span><span class="token class-name">InsufficientBalance</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">let</span> cached_value <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>sequence_number_cache<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>txn<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> sequence_number <span class="token operator">=</span> <span class="token keyword">match</span> cached_value <span class="token punctuation">{</span>\n            <span class="token class-name">Some</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">*</span>value<span class="token punctuation">,</span> db_sequence_number<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> db_sequence_number<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>sequence_number_cache\n            <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>txn<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sequence_number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可能sequence_number需要更新了. 如果发生了expiration呢?</span>\n\n        <span class="token comment">// don&#39;t accept old transactions (e.g. seq is less than account&#39;s current seq_number)</span>\n        <span class="token keyword">if</span> txn<span class="token punctuation">.</span><span class="token function">sequence_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> sequence_number <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">MempoolAddTransactionStatus</span><span class="token punctuation">::</span><span class="token class-name">InvalidSeqNumber</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//交易在缓冲池中的过期时间</span>\n        <span class="token keyword">let</span> expiration_time <span class="token operator">=</span> <span class="token class-name">SystemTime</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">duration_since</span><span class="token punctuation">(</span><span class="token constant">UNIX_EPOCH</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;init timestamp failure&quot;</span><span class="token punctuation">)</span>\n            <span class="token operator">+</span> <span class="token keyword">self</span><span class="token punctuation">.</span>system_transaction_timeout<span class="token punctuation">;</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>metrics_cache<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>\n            <span class="token punctuation">(</span>txn<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> txn<span class="token punctuation">.</span><span class="token function">sequence_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">Utc</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timestamp_millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//MempoolTransaction指的就是在缓冲池中的Tx,为了缓冲池管理方便,增添了过期时间以及TimelineState,还有gasAmount,</span>\n        <span class="token comment">//主要是为了索引</span>\n        <span class="token keyword">let</span> txn_info <span class="token operator">=</span> <span class="token class-name">MempoolTransaction</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>txn<span class="token punctuation">,</span> expiration_time<span class="token punctuation">,</span> gas_amount<span class="token punctuation">,</span> timeline_state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//真正的Tx,无论能否立即被打包,都在TransactionStore中保存着</span>\n        <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>transactions<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>txn_info<span class="token punctuation">,</span> sequence_number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token constant">OP_COUNTERS</span><span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;insert.{:?}&quot;</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        status\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h3 id="remove-transaction-移除已打包交易"><a class="header-anchor" href="#remove-transaction-移除已打包交易" aria-hidden="true">#</a> remove_transaction 移除已打包交易</h3><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">/// This function will be called once the transaction has been stored</span>\n    <span class="token comment">/// 共识模块确定Tx被打包了,那么缓冲池中的Tx就可以移除了. is_rejected表示没有被打包</span>\n    <span class="token comment">/// 同时is_rejected为false的时候,sequence_number也告诉mempool目前sender之前的Tx都被打包了,</span>\n    <span class="token comment">/// 本地的seqence_number也要更新到这里了</span>\n    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">remove_transaction</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>\n        sender<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">AccountAddress</span><span class="token punctuation">,</span>\n        sequence_number<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        is_rejected<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">debug!</span><span class="token punctuation">(</span>\n            <span class="token string">&quot;[Mempool] Removing transaction from mempool: {}:{}&quot;</span><span class="token punctuation">,</span>\n            sender<span class="token punctuation">,</span> sequence_number\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">log_latency</span><span class="token punctuation">(</span>sender<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sequence_number<span class="token punctuation">,</span> <span class="token string">&quot;e2e.latency&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>metrics_cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>sender<span class="token punctuation">,</span> sequence_number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// update current cached sequence number for account</span>\n        <span class="token keyword">let</span> cached_value <span class="token operator">=</span> <span class="token keyword">self</span>\n            <span class="token punctuation">.</span>sequence_number_cache\n            <span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">unwrap_or_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">let</span> new_sequence_number <span class="token operator">=</span> <span class="token keyword">if</span> is_rejected <span class="token punctuation">{</span>\n            <span class="token function">min</span><span class="token punctuation">(</span>sequence_number<span class="token punctuation">,</span> cached_value<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">max</span><span class="token punctuation">(</span>cached_value<span class="token punctuation">,</span> sequence_number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">//sequence_number_cache保存的就是下一个有效的seq_number</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>sequence_number_cache\n            <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sender<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_sequence_number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//核心处理其实还在`TransactionStore`中</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>transactions\n            <span class="token punctuation">.</span><span class="token function">commit_transaction</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sender<span class="token punctuation">,</span> sequence_number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="为consensus模块提供下一块交易数据"><a class="header-anchor" href="#为consensus模块提供下一块交易数据" aria-hidden="true">#</a> 为consensus模块提供下一块交易数据</h3><p>get_block功能非常简单,就是跳出来下一块可以打包的交易,主要就是seq_number连起来的交易.因为不合法的交易早就已经被踢了.</p><div class="language-rust line-numbers-mode"><pre><code>    <span class="token comment">/// Fetches next block of transactions for consensus</span>\n    <span class="token comment">/// `batch_size` - size of requested block</span>\n    <span class="token comment">/// `seen_txns` - transactions that were sent to Consensus but were not committed yet</span>\n    <span class="token comment">///  Mempool should filter out such transactions</span>\n    <span class="token comment">/// 共识模块需要从mempool中拉取下一个块可用的Tx集合</span>\n    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_block</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>\n        batch_size<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        <span class="token keyword">mut</span> seen<span class="token punctuation">:</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token class-name">TxnPointer</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">SignedTransaction</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n           get_block 实际上是找寻可以进入下一块的交易:\n           1. 已经送到共识模块中,但是还没有确认(确认后会从缓冲池中移除)\n           2.  这个Tx的seq刚好就是下一个可以打包的.比如上一块中AccountA的seq是3,那么现在seq=4的Tx就可以进入block\n           3. 或者当前块中已经包含了seq=4的,那么seq=5的就可以进入\n        */</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// Helper DS. Helps to mitigate scenarios where account submits several transactions</span>\n        <span class="token comment">// with increasing gas price (e.g. user submits transactions with sequence number 1, 2</span>\n        <span class="token comment">// and gas_price 1, 10 respectively)</span>\n        <span class="token comment">// Later txn has higher gas price and will be observed first in priority index iterator,</span>\n        <span class="token comment">// but can&#39;t be executed before first txn. Once observed, such txn will be saved in</span>\n        <span class="token comment">// `skipped` DS and rechecked once it&#39;s ancestor becomes available</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> skipped <span class="token operator">=</span> <span class="token class-name">HashSet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// iterate over the queue of transactions based on gas price</span>\n        <span class="token comment">//带标签的break用法</span>\n        <span class="token lifetime-annotation symbol">&#39;main</span><span class="token punctuation">:</span> <span class="token keyword">for</span> txn <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>transactions<span class="token punctuation">.</span><span class="token function">iter_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> seen<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">TxnPointer</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>txn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">continue</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">let</span> <span class="token keyword">mut</span> seq <span class="token operator">=</span> txn<span class="token punctuation">.</span>sequence_number<span class="token punctuation">;</span>\n            <span class="token comment">/*\n            这里打包是按照地址选,尽可能的把同一个地址的Tx都打包到一个block中去\n            */</span>\n            <span class="token keyword">let</span> account_sequence_number <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>sequence_number_cache<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>txn<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> seen_previous <span class="token operator">=</span> seq <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> seen<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>txn<span class="token punctuation">.</span>address<span class="token punctuation">,</span> seq <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// include transaction if it&#39;s &quot;next&quot; for given account or</span>\n            <span class="token comment">// we&#39;ve already sent its ancestor to Consensus</span>\n            <span class="token keyword">if</span> seen_previous <span class="token operator">||</span> account_sequence_number <span class="token operator">==</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token class-name">TxnPointer</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>txn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                seen<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token operator">==</span> batch_size <span class="token punctuation">{</span>\n                    <span class="token comment">//batch_size表示这块最多有多少个交易</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token comment">// check if we can now include some transactions</span>\n                <span class="token comment">// that were skipped before for given account</span>\n                <span class="token comment">//这是回头遍历,比如先走过了seq=7的,那么发现seq=6合适的时候,就还可以再把seq=7加入</span>\n                <span class="token keyword">let</span> <span class="token keyword">mut</span> skipped_txn <span class="token operator">=</span> <span class="token punctuation">(</span>txn<span class="token punctuation">.</span>address<span class="token punctuation">,</span> seq <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">while</span> skipped<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>skipped_txn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    seen<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>skipped_txn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>skipped_txn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token operator">==</span> batch_size <span class="token punctuation">{</span>\n                        <span class="token keyword">break</span> <span class="token lifetime-annotation symbol">&#39;main</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    skipped_txn <span class="token operator">=</span> <span class="token punctuation">(</span>txn<span class="token punctuation">.</span>address<span class="token punctuation">,</span> skipped_txn<span class="token number">.1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                skipped<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">TxnPointer</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>txn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// convert transaction pointers to real values</span>\n        <span class="token keyword">let</span> block<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> result\n            <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token comment">//filter_map 行为等于filter &amp; map</span>\n            <span class="token punctuation">.</span><span class="token function">filter_map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">self</span><span class="token punctuation">.</span>transactions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> transaction <span class="token keyword">in</span> <span class="token operator">&amp;</span>block <span class="token punctuation">{</span>\n            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">log_latency</span><span class="token punctuation">(</span>\n                transaction<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                transaction<span class="token punctuation">.</span><span class="token function">sequence_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token string">&quot;txn_pre_consensus_ms&quot;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        block <span class="token comment">//就是一个Tx的集合,没有任何附加信息</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br></div></div><h3 id="其他几个函数"><a class="header-anchor" href="#其他几个函数" aria-hidden="true">#</a> 其他几个函数</h3><p><code>gc_by_system_ttl</code>: 就是为了清除在mempool中呆的太久的交易,否则mempool因为空间已满而无法进来有效的交易 <code>gc_by_expiration_time</code>: 是在新的一块来临的时候,依据新块时间可以非常确定<strong>那些用户指定的在这个之前必须打包的交易</strong>必须被清理掉,因为再也不可能被打包了. <code>read_timeline</code>: 主要用于节点间mempool中的Tx同步用,就是为每一个Tx都给一个本地唯一的单增的编号,这样推送的时候就知道推送到哪里了,避免重复.</p><p>下一篇我会讲解<code>TransactionStore</code>,他是维护mempool中Tx的核心数据结构.</p>',22);t.render=function(p,e,t,l,u,i){return n(),s("div",null,[a(' @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} '),a(" code_chunk_output "),o,a(" /code_chunk_output "),c])};export{e as __pageData,t as default};
