import{o as s,c as n,e as a,b as p,d as t}from"./app.f9082c82.js";const e='{"title":"29. 两数相除","description":"","frontmatter":{"title":"29. 两数相除","date":"2019-08-22T19:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["技术相关"]},"headers":[{"level":2,"title":"每天一道Rust-LeetCode(2019-08-23)","slug":"每天一道rust-leetcode-2019-08-23"},{"level":2,"title":"题目描述","slug":"题目描述"},{"level":2,"title":"解题思路","slug":"解题思路"},{"level":2,"title":"解题过程","slug":"解题过程"},{"level":2,"title":"一点感悟","slug":"一点感悟"},{"level":2,"title":"其他","slug":"其他"}],"relativePath":"rust-leetcode/2019-08-23.md","lastUpdated":1641604782385}',o={},l=[a('<h2 id="每天一道rust-leetcode-2019-08-23"><a class="header-anchor" href="#每天一道rust-leetcode-2019-08-23" aria-hidden="true">#</a> 每天一道Rust-LeetCode(2019-08-23)</h2><p>坚持每天一道题,刷题学习Rust.</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。</p><p>返回被除数 dividend 除以除数 divisor 得到的商。</p><p>示例 1:</p><p>输入: dividend = 10, divisor = 3 输出: 3 示例 2:</p><p>输入: dividend = 7, divisor = -3 输出: -2 说明:</p><p>被除数和除数均为 32 位有符号整数。 除数不为 0。 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。</p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/divide-two-integers" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/divide-two-integers</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>思路:</p>',12),p("ol",null,[p("li",null,"首先两个数都取绝对值,比如被除数为23,除数为3"),p("li",null,[t("首先不断对除数左移1位,直到超过被除数,然后记下来临界值 比如左移3次超过,那么就说明被除数在"),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mn",null,"3"),p("mo",null,"∗"),p("msup",null,[p("mn",null,"2"),p("mn",null,"2")])]),p("annotation",{encoding:"application/x-tex"},"3*2^2")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),p("span",{class:"mord"},"3"),p("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),p("span",{class:"mbin"},"∗"),p("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.8141079999999999em","vertical-align":"0em"}}),p("span",{class:"mord"},[p("span",{class:"mord"},"2"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.8141079999999999em"}},[p("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"2")])])])])])])])])])]),t("~"),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mn",null,"3"),p("mo",null,"∗"),p("msup",null,[p("mn",null,"2"),p("mn",null,"3")])]),p("annotation",{encoding:"application/x-tex"},"3*2^3")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),p("span",{class:"mord"},"3"),p("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),p("span",{class:"mbin"},"∗"),p("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.8141079999999999em","vertical-align":"0em"}}),p("span",{class:"mord"},[p("span",{class:"mord"},"2"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.8141079999999999em"}},[p("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"3")])])])])])])])])])]),t("之间")]),p("li",null,[t("然后减去"),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mn",null,"3"),p("mo",null,"∗"),p("msup",null,[p("mn",null,"2"),p("mn",null,"2")])]),p("annotation",{encoding:"application/x-tex"},"3*2^2")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),p("span",{class:"mord"},"3"),p("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),p("span",{class:"mbin"},"∗"),p("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.8141079999999999em","vertical-align":"0em"}}),p("span",{class:"mord"},[p("span",{class:"mord"},"2"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.8141079999999999em"}},[p("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"2")])])])])])])])])])]),t(",继续处理,知道被除数小于除数为止")])],-1),a('<h2 id="解题过程"><a class="header-anchor" href="#解题过程" aria-hidden="true">#</a> 解题过程</h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Solution</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span>dividend<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> divisor<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> isNeg <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> dividend <span class="token operator">^</span> divisor <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n            isNeg <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//符号相反</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">let</span> dividend <span class="token operator">=</span> <span class="token keyword">if</span> dividend <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n            <span class="token number">0</span> <span class="token operator">-</span> dividend <span class="token keyword">as</span> <span class="token keyword">i64</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            dividend <span class="token keyword">as</span> <span class="token keyword">i64</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> divisor <span class="token operator">=</span> <span class="token keyword">if</span> divisor <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n            <span class="token number">0</span> <span class="token operator">-</span> divisor <span class="token keyword">as</span> <span class="token keyword">i64</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            divisor <span class="token keyword">as</span> <span class="token keyword">i64</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token keyword">if</span> divisor <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n            dividend <span class="token keyword">as</span> <span class="token keyword">i64</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide_internal</span><span class="token punctuation">(</span>dividend <span class="token keyword">as</span> <span class="token keyword">i64</span><span class="token punctuation">,</span> divisor <span class="token keyword">as</span> <span class="token keyword">i64</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> cnt <span class="token operator">&gt;=</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span> <span class="token keyword">as</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> isNeg <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MIN</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> isNeg <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">-</span> cnt<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> cnt <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">divide_internal</span><span class="token punctuation">(</span>dividend<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">,</span> divisor<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>\n        <span class="token comment">//小于被除数,就返回</span>\n        <span class="token keyword">if</span> dividend <span class="token operator">&lt;</span> divisor <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> c <span class="token operator">=</span> divisor<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> c <span class="token operator">&gt;=</span> dividend <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            last <span class="token operator">=</span> c<span class="token punctuation">;</span>\n            c <span class="token operator">=</span> c <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//每次左移1</span>\n            cnt <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 左移一次就是两倍</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//c--dividend--last</span>\n        <span class="token keyword">let</span> left <span class="token operator">=</span> c <span class="token operator">-</span> dividend<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> right <span class="token operator">=</span> dividend <span class="token operator">-</span> last<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n            <span class="token comment">//不可能等于右边的</span>\n            <span class="token keyword">return</span> cnt<span class="token punctuation">;</span> <span class="token comment">//刚好等于左边,</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">let</span> div <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide_internal</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> cnt <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> div<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">test_divide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2147483647</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">1021989372</span><span class="token punctuation">,</span> <span class="token number">82778243</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">302462516</span><span class="token punctuation">,</span> <span class="token number">82778243</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><h2 id="一点感悟"><a class="header-anchor" href="#一点感悟" aria-hidden="true">#</a> 一点感悟</h2><p>越简单越好, 一开始考虑除数左移超过被除数以后,左右两边选一个小的来处理,发现人为制造麻烦.</p><h2 id="其他"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>欢迎关注我的<a href="https://github.com/nkbai" target="_blank" rel="noopener noreferrer">github</a>,本项目文章所有代码都可以找到.</p>',6)];o.render=function(a,p,t,e,o,c){return s(),n("div",null,l)};export{e as __pageData,o as default};
