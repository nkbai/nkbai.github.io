import{_ as n,c as s,o as a,a as p}from"./app.577f36ad.js";const m='{"title":"go \u7B14\u8BB0","description":"","frontmatter":{"title":"go \u7B14\u8BB0","date":"2018-04-28T03:06:23.000Z","draft":false},"headers":[{"level":2,"title":"channel","slug":"channel-1"},{"level":3,"title":"\u591A\u4E2Asend\u7684\u60C5\u5F62","slug":"\u591A\u4E2Asend\u7684\u60C5\u5F62"}],"relativePath":"other/learn_go.md"}',e={},t=p(`<h1 id="go-\u7B14\u8BB0" tabindex="-1">go \u7B14\u8BB0 <a class="header-anchor" href="#go-\u7B14\u8BB0" aria-hidden="true">#</a></h1><h1 id="defer" tabindex="-1">defer <a class="header-anchor" href="#defer" aria-hidden="true">#</a></h1><p>defer \u7684\u53C2\u6570\u7ED1\u5B9A\u662F\u5728 defer \u65F6\uFF0C\u800C\u4E0D\u662F\u5728\u6267\u884C\u65F6\uFF0C\u548C go \u662F\u4E00\u6837\u7684\u3002</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u4F1A\u8F93\u51FA4 3 2 1 0</p><h1 id="make-new" tabindex="-1">make &amp;&amp; new <a class="header-anchor" href="#make-new" aria-hidden="true">#</a></h1><p>make \u53EA\u80FD\u5E94\u7528\u4E8E slice\uFF0Cmap\uFF0Cchannel\uFF0C\u8FD4\u56DE\u7684\u4E0D\u662F\u6307\u9488\u3002 \u4EE5 slice \u4E3A\u4F8B\uFF0C\u4E00\u4E2A slice \u662F\u5F15\u7528 copy\uFF0C\u4F46\u662F\u6BCF\u4E2A slice \u7ED3\u6784\u4F53\u6218\u4E09\u4E2A\u5B57\u3002</p><h1 id="channel" tabindex="-1">channel <a class="header-anchor" href="#channel" aria-hidden="true">#</a></h1><p>range \u7528\u6CD5\uFF0C\u4EE5\u53CA\u5982\u4F55idiomatic\u7684\u4F7F\u7528 closure</p><div class="language-"><pre><code>func handle(queue chan *Request) {
    for r := range queue {
        process(r)
    }
}

func Serve(queue chan *Request) {
    for req := range queue {
        req := req // Create new instance of req for the goroutine.
        sem &lt;- 1
        go func() {
            process(req)
            &lt;-sem
        }()
    }
}
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h1 id="panic" tabindex="-1">panic <a class="header-anchor" href="#panic" aria-hidden="true">#</a></h1><p>panic\u53EF\u4EE5\u7528\u4F5C\u590D\u6742\u7684\u9519\u8BEF\u5904\u7406\uFF0C\u4F46\u662F\u5982\u679C\u662F\u7528\u4F5C\u9519\u8BEF\u5904\u7406\uFF0C\u4E0D\u8981\u628A panic \u66B4\u9732\u5230\u5305\u5916\u3002</p><p>Useful though this pattern is, it should be used only within a package. Parse turns its internal panic calls into error values; it does not expose panics to its client. That is a good rule to follow.</p><div class="language-go line-numbers-mode"><pre><code>
<span class="token comment">// error is a method of *Regexp that reports parsing errors by</span>
<span class="token comment">// panicking with an Error.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>regexp <span class="token operator">*</span>Regexp<span class="token punctuation">)</span> <span class="token function">error</span><span class="token punctuation">(</span>err <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Compile returns a parsed representation of the regular expression.</span>
<span class="token keyword">func</span> <span class="token function">Compile</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>regexp <span class="token operator">*</span>Regexp<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    regexp <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Regexp<span class="token punctuation">)</span>
    <span class="token comment">// doParse will panic if there is a parse error.</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> e <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            regexp <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token comment">// Clear return value.</span>
            err <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span> <span class="token comment">// Will re-panic if not a parse error.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> regexp<span class="token punctuation">.</span><span class="token function">doParse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="channel-1" tabindex="-1">channel <a class="header-anchor" href="#channel-1" aria-hidden="true">#</a></h2><h3 id="\u591A\u4E2Asend\u7684\u60C5\u5F62" tabindex="-1">\u591A\u4E2Asend\u7684\u60C5\u5F62 <a class="header-anchor" href="#\u591A\u4E2Asend\u7684\u60C5\u5F62" aria-hidden="true">#</a></h3><p>golang\u4E2D\u7684channel\u53EF\u4EE5\u770B\u505A\u662F\u4E00\u4E2A\u52A0\u9501\u7684buffer,\u6240\u4EE5\u662F\u53EF\u4EE5\u5F53\u505Arust\u4E2D\u7684MPMC\u6765\u4F7F\u7528\u7684. \u6309\u7167\u8BBE\u8BA1,channel close\u7684\u4E00\u65B9\u5FC5\u987B\u662Fsender,\u90A3\u4E48\u5982\u679C\u6709\u591A\u4E2Asender\u4F1A\u662F\u4EC0\u4E48\u7ED3\u679C\u5462?</p><p>\u4E0B\u9762\u7684\u8FD9\u79CD\u60C5\u51B5\u662F\u4F1Apanic\u7684.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">TestSend</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	SendAndSleep <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%d panic&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;s %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		c <span class="token operator">&lt;-</span> <span class="token number">3</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">go</span> <span class="token function">SendAndSleep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">SendAndSleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">SendAndSleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>\u5176\u4E2D\u4E00\u79CD\u8F93\u51FA\u662F:</p><div class="language-"><pre><code>    cfg_test.go:44: s 1
    cfg_test.go:44: s 0
    cfg_test.go:44: s 2
    cfg_test.go:41: 2 panic
    cfg_test.go:41: 0 panic
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,21),o=[t];function c(l,r,u,i,k,b){return a(),s("div",null,o)}var f=n(e,[["render",c]]);export{m as __pageData,f as default};
