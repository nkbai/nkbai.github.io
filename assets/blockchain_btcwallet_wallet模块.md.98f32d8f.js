import{_ as a,c as s,o as l,N as e}from"./chunks/framework.3a9190c5.js";const y=JSON.parse('{"title":"wallet模块","description":"","frontmatter":{"title":"wallet模块","date":"2019-05-23T01:07:52.193Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/btcwallet/wallet模块.md"}'),n={name:"blockchain/btcwallet/wallet模块.md"},t=e(`<h1 id="wallet模块" tabindex="-1">wallet模块 <a class="header-anchor" href="#wallet模块" aria-label="Permalink to &quot;wallet模块&quot;">​</a></h1><p>wallet是整个btcwallet的核心</p><h2 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Loader implements the creating of new and opening of existing wallets, while</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// providing a callback system for other subsystems to handle the loading of a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// wallet.  This is primarily intended for use by the RPC servers, to enable</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// methods and services which require the wallet when the wallet is loaded by</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// another subsystem.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Loader is safe for concurrent access.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Loader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	callbacks      </span><span style="color:#89DDFF;">[]func(*</span><span style="color:#A6ACCD;">Wallet</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	chainParams    </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">chaincfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Params</span></span>
<span class="line"><span style="color:#A6ACCD;">	dbDirPath      </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">	recoveryWindow </span><span style="color:#C792EA;">uint32</span></span>
<span class="line"><span style="color:#A6ACCD;">	wallet         </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Wallet</span></span>
<span class="line"><span style="color:#A6ACCD;">	db             walletdb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DB</span></span>
<span class="line"><span style="color:#A6ACCD;">	mu             sync</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Mutex</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Loader主要负责创建打开钱包<code>Wallet</code>,他会提供一些callback方法,让钱包打开以后自动调用这些callback. 主要是<code>onLoaded</code>和<code>RunAfterLoad</code></p><h2 id="wallet-核心" tabindex="-1">Wallet 核心 <a class="header-anchor" href="#wallet-核心" aria-label="Permalink to &quot;Wallet 核心&quot;">​</a></h2><p>rpc接口简单封装以后,最后都是直接走到Wallet进行处理.Wallet内容非常丰富.</p><p>这里找一个简单rpc例子来介绍.</p><h3 id="http-rpc的walletpassphrase接口" tabindex="-1">http rpc的walletpassphrase接口 <a class="header-anchor" href="#http-rpc的walletpassphrase接口" aria-label="Permalink to &quot;http rpc的walletpassphrase接口&quot;">​</a></h3><ol><li>methods.go中的rpcHandlers进行注册<code> &quot;walletpassphrase&quot;: {handler: walletPassphrase},</code></li><li><code>func walletPassphrase(icmd interface{}, w *wallet.Wallet) (interface{}, error)</code>,</li><li><code>func (w *Wallet) Unlock(passphrase []byte, lock &lt;-chan time.Time) error </code> 进入Wallet</li><li>创建unlockRequest,发送给w.unlockRequests</li><li>进入Wallet.walletLocker 消息循环中,Wallet还有一个独立的消息循环txCreator</li><li>进入w.Manager.Unlock,Manager是waddrmgr.Manager类型</li><li>Unlock要做的工作有很多,首先将相关密码填充,这样下次需要解密的时候才能使用</li></ol><p>特别注意: 这里的timeout的用法, for,select组合的时候,一开始timeout完全没有准备好,只是在需要的时候准备好,用完了再次置为nil即可.</p><h2 id="wallet-txcreator-事件循环" tabindex="-1">Wallet.txCreator 事件循环 <a class="header-anchor" href="#wallet-txcreator-事件循环" aria-label="Permalink to &quot;Wallet.txCreator 事件循环&quot;">​</a></h2><p>主要是处理createTxRequest,在指定账户上,根据需要输出的金额一起其他要求,选择合适的UTXO,然后形成未签名的Tx</p>`,13),p=[t];function r(o,c,i,d,h,b){return l(),s("div",null,p)}const m=a(n,[["render",r]]);export{y as __pageData,m as default};
