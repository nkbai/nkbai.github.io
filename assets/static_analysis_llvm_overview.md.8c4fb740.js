import{_ as n,c as s,o as a,a as e}from"./app.3dd4ae37.js";const m='{"title":"llvm overview","description":"","frontmatter":{"title":"llvm overview","date":"2023-03-17T03:57:03.000Z","draft":false,"tags":["android","\u9759\u6001\u5206\u6790"],"series":["\u9759\u6001\u5206\u6790"],"categories":["\u6280\u672F\u76F8\u5173"]},"headers":[{"level":2,"title":"clang-check","slug":"clang-check"},{"level":2,"title":"LLVM IR\u7684attribute\u6709\u5565\u7528?","slug":"llvm-ir\u7684attribute\u6709\u5565\u7528"},{"level":3,"title":"readnone attribute","slug":"readnone-attribute"},{"level":2,"title":"LTO Link Time Optimization","slug":"lto-link-time-optimization"},{"level":3,"title":"BOLT Binary Optimization and Layout  Tool","slug":"bolt-binary-optimization-and-layout-tool"},{"level":2,"title":"tools","slug":"tools"},{"level":3,"title":"\u7F16\u8BD1\u671F","slug":"\u7F16\u8BD1\u671F"},{"level":3,"title":"\u8FD0\u884C\u671F","slug":"\u8FD0\u884C\u671F"}],"relativePath":"static_analysis/llvm_overview.md"}',t={},p=e(`<h2 id="clang-check" tabindex="-1">clang-check <a class="header-anchor" href="#clang-check" aria-hidden="true">#</a></h2><p>\u5982\u4F55\u6253\u5370ast</p><div class="language-c line-numbers-mode"><pre><code><span class="token comment">//min.c</span>
<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span>
\u3000\u3000  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
  <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u8FD0\u884C<code> clang-check min.c -ast-dump --</code></p><div class="language-txt line-numbers-mode"><pre><code>TranslationUnitDecl 0x7f7d66822408 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt;
|-TypedefDecl 0x7f7d66822c30 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __int128_t &#39;__int128&#39;
| \`-BuiltinType 0x7f7d668229d0 &#39;__int128&#39;
|-TypedefDecl 0x7f7d66822ca0 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __uint128_t &#39;unsigned __int128&#39;
| \`-BuiltinType 0x7f7d668229f0 &#39;unsigned __int128&#39;
|-TypedefDecl 0x7f7d66822fa8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __NSConstantString &#39;struct __NSConstantString_tag&#39;
| \`-RecordType 0x7f7d66822d80 &#39;struct __NSConstantString_tag&#39;
|   \`-Record 0x7f7d66822cf8 &#39;__NSConstantString_tag&#39;
|-TypedefDecl 0x7f7d66823040 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_ms_va_list &#39;char *&#39;
| \`-PointerType 0x7f7d66823000 &#39;char *&#39;
|   \`-BuiltinType 0x7f7d668224b0 &#39;char&#39;
|-TypedefDecl 0x7f7d66823338 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_va_list &#39;struct __va_list_tag[1]&#39;
| \`-ConstantArrayType 0x7f7d668232e0 &#39;struct __va_list_tag[1]&#39; 1
|   \`-RecordType 0x7f7d66823120 &#39;struct __va_list_tag&#39;
|     \`-Record 0x7f7d66823098 &#39;__va_list_tag&#39;
\`-FunctionDecl 0x7f7d66848760 &lt;/Users/bai/dev/llvm/example/min.c:1:1, line:5:1&gt; line:1:5 min &#39;int (int, int)&#39;
  |-ParmVarDecl 0x7f7d66848600 &lt;col:9, col:13&gt; col:13 used a &#39;int&#39;
  |-ParmVarDecl 0x7f7d66848680 &lt;col:16, col:20&gt; col:20 used b &#39;int&#39;
  \`-CompoundStmt 0x7f7d66848998 &lt;col:23, line:5:1&gt;
    |-IfStmt 0x7f7d66848930 &lt;line:2:3, line:3:16&gt;
    | |-BinaryOperator 0x7f7d668488c8 &lt;line:2:7, col:11&gt; &#39;int&#39; &#39;&lt;&#39;
    | | |-ImplicitCastExpr 0x7f7d66848898 &lt;col:7&gt; &#39;int&#39; &lt;LValueToRValue&gt;
    | | | \`-DeclRefExpr 0x7f7d66848858 &lt;col:7&gt; &#39;int&#39; lvalue ParmVar 0x7f7d66848600 &#39;a&#39; &#39;int&#39;
    | | \`-ImplicitCastExpr 0x7f7d668488b0 &lt;col:11&gt; &#39;int&#39; &lt;LValueToRValue&gt;
    | |   \`-DeclRefExpr 0x7f7d66848878 &lt;col:11&gt; &#39;int&#39; lvalue ParmVar 0x7f7d66848680 &#39;b&#39; &#39;int&#39;
    | \`-ReturnStmt 0x7f7d66848920 &lt;line:3:9, col:16&gt;
    |   \`-ImplicitCastExpr 0x7f7d66848908 &lt;col:16&gt; &#39;int&#39; &lt;LValueToRValue&gt;
    |     \`-DeclRefExpr 0x7f7d668488e8 &lt;col:16&gt; &#39;int&#39; lvalue ParmVar 0x7f7d66848600 &#39;a&#39; &#39;int&#39;
    \`-ReturnStmt 0x7f7d66848988 &lt;line:4:3, col:10&gt;
      \`-ImplicitCastExpr 0x7f7d66848970 &lt;col:10&gt; &#39;int&#39; &lt;LValueToRValue&gt;
        \`-DeclRefExpr 0x7f7d66848950 &lt;col:10&gt; &#39;int&#39; lvalue ParmVar 0x7f7d66848680 &#39;b&#39; &#39;int&#39;
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="llvm-ir\u7684attribute\u6709\u5565\u7528" tabindex="-1">LLVM IR\u7684attribute\u6709\u5565\u7528? <a class="header-anchor" href="#llvm-ir\u7684attribute\u6709\u5565\u7528" aria-hidden="true">#</a></h2><h3 id="readnone-attribute" tabindex="-1">readnone attribute <a class="header-anchor" href="#readnone-attribute" aria-hidden="true">#</a></h3><div class="language-c line-numbers-mode"><pre><code>var <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token comment">//bar();</span>
 <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>foo\u4E2D\u7684\u4E24\u6B21add,\u53EF\u4EE5\u5408\u5E76\u4E48?</p><div class="language-"><pre><code>; Function Attrs:norecurse nounwind readnone uwtable willreturn mustprogress
define dso_local i32 @_Z3fooii(i32 %x, i32 %y)
local_unnamed_addr #1 {
entry:
%call = tail call i32 @_Z3addii(i32 %x, i32 %y)
%add = shl nsw i32 %call, 1
ret i32 %add
3

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u56E0\u4E3Aadd\u6709readone attribute,\u8868\u793A:Function does not access memory \u6240\u6709,\u53EF\u4EE5\u5408\u5E76.</p><h2 id="lto-link-time-optimization" tabindex="-1">LTO Link Time Optimization <a class="header-anchor" href="#lto-link-time-optimization" aria-hidden="true">#</a></h2><div class="language-c line-numbers-mode"><pre><code><span class="token comment">//a.h</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">fool</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">foo4</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-c line-numbers-mode"><pre><code><span class="token comment">//a.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;a.h&quot;</span></span>
<span class="token keyword">static</span> <span class="token keyword">signed</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">fool</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">int</span> data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
	data<span class="token operator">=</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data <span class="token operator">=</span> data <span class="token operator">+</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-c line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;a.h&quot;</span></span>
<span class="token keyword">void</span> <span class="token function">foo4</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hi\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u5982\u679C\u652F\u6301LTO,\u8003\u8651\u5230foo2\u6839\u672C\u4E0D\u4F1A\u88AB\u8C03\u7528,\u90A3\u4E48\u63A8\u51FAi\u6C38\u8FDC\u4E3A0, \u6240\u4EE5foo1\u7ECF\u8FC7\u4F18\u5316\u4EE5\u540E:</p><div class="language-c line-numbers-mode"><pre><code><span class="token keyword">int</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u4F46\u662F\u4EE3\u4EF7\u786E\u5B9E\u5927,\u8981\u5BF9\u6574\u4E2A\u53EF\u6267\u884C\u7A0B\u5E8F\u5C06\u8FDB\u884C\u6574\u4F53\u4F18\u5316.</p><h3 id="bolt-binary-optimization-and-layout-tool" tabindex="-1">BOLT Binary Optimization and Layout Tool <a class="header-anchor" href="#bolt-binary-optimization-and-layout-tool" aria-hidden="true">#</a></h3><p>\u8BA9\u4E8C\u8FDB\u5236code\u5E03\u5C40\u66F4\u5408\u7406,\u8BA9cpu\u7684\u6307\u4EE4\u9884\u6D4B\u66F4\u6709\u6548\u7387.</p><h2 id="tools" tabindex="-1">tools <a class="header-anchor" href="#tools" aria-hidden="true">#</a></h2><h3 id="\u7F16\u8BD1\u671F" tabindex="-1">\u7F16\u8BD1\u671F <a class="header-anchor" href="#\u7F16\u8BD1\u671F" aria-hidden="true">#</a></h3><ul><li>clang-tidy</li></ul><p>\u4E0D\u4F1A\u6267\u884C\u6570\u636E\u6D41\u5206\u6790\u548C\u7B26\u53F7\u6267\u884C\u7684\u80FD\u529B,\u4E3B\u8981\u662F\u505A\u4E00\u4E9B\u8BED\u6CD5\u5C42\u7EA7\u7684\u4E00\u4E9B\u4EE3\u7801\u89C4\u8303\u7684\u68C0\u67E5.</p><ul><li>Clang-rename</li><li>clangd</li><li>modularize</li><li>pseudo</li><li></li></ul><h3 id="\u8FD0\u884C\u671F" tabindex="-1">\u8FD0\u884C\u671F <a class="header-anchor" href="#\u8FD0\u884C\u671F" aria-hidden="true">#</a></h3><ul><li>addresssanitizer</li><li>Threadsanitizer data race condition</li><li>undefinedbehaviorsanitizer \u672A\u5B9A\u4E49\u884C\u4E3A</li><li>memorysanitizer \u672A\u521D\u59CB\u5316\u7684\u68C0\u6D4B</li><li>leaksanitizer \u68C0\u6D4B\u5185\u5B58\u6CC4\u6F0F</li><li>dataflowsanitizer \u57FA\u4E8Ellvm\u7684\u6C61\u70B9\u4F20\u64AD\u6846\u67B6,\u7528\u6237\u9700\u8981\u81EA\u5DF1\u7279\u5B9A\u7684\u4F7F\u7528\u573A\u666F\u6765\u5B9A\u4E49\u4E00\u4E9Bsource,sink,sanitizer</li><li>Memprof</li></ul>`,27),l=[p];function i(o,c,r,u,d,k){return a(),s("div",null,l)}var f=n(t,[["render",i]]);export{m as __pageData,f as default};
