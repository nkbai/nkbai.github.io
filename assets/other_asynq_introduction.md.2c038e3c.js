import{o as n,c as s,e as a}from"./app.3f14a1b4.js";const p='{"title":"一个实用的分布式Go任务处理库","description":"","frontmatter":{"title":"一个实用的分布式Go任务处理库","date":"2022-01-29T05:29:51.000Z"},"headers":[{"level":2,"title":"架构","slug":"架构"},{"level":2,"title":"一分钟上手","slug":"一分钟上手"},{"level":3,"title":"task","slug":"task"},{"level":3,"title":"client","slug":"client"},{"level":3,"title":"server","slug":"server"},{"level":3,"title":"asynqmon","slug":"asynqmon"},{"level":2,"title":"简单代码阅读","slug":"简单代码阅读"},{"level":2,"title":"任务的状态迁移","slug":"任务的状态迁移"},{"level":3,"title":"healthchecker","slug":"healthchecker"},{"level":3,"title":"heartbeater","slug":"heartbeater"},{"level":3,"title":"inspector","slug":"inspector"},{"level":3,"title":"processor","slug":"processor"},{"level":3,"title":"scheduler","slug":"scheduler"},{"level":3,"title":"recoverer","slug":"recoverer"},{"level":3,"title":"subscriber","slug":"subscriber"},{"level":3,"title":"syncer","slug":"syncer"},{"level":2,"title":"常见问题","slug":"常见问题"},{"level":3,"title":"1. 任务至少会执行一次,是否可能重复执行?","slug":"_1-任务至少会执行一次-是否可能重复执行"}],"relativePath":"other/asynq_introduction.md","lastUpdated":1643511294562}',e={},t=[a('<h1 id="一个实用的分布式go任务处理库"><a class="header-anchor" href="#一个实用的分布式go任务处理库" aria-hidden="true">#</a> 一个实用的分布式Go任务处理库</h1><p><div class="table-of-contents"><ul><li><a href="#架构">架构</a></li><li><a href="#一分钟上手">一分钟上手</a><ul><li><a href="#task">task</a></li><li><a href="#client">client</a></li><li><a href="#server">server</a></li><li><a href="#asynqmon">asynqmon</a></li></ul></li><li><a href="#简单代码阅读">简单代码阅读</a></li><li><a href="#任务的状态迁移">任务的状态迁移</a><ul><li><a href="#healthchecker">healthchecker</a></li><li><a href="#heartbeater">heartbeater</a></li><li><a href="#inspector">inspector</a></li><li><a href="#processor">processor</a></li><li><a href="#scheduler">scheduler</a></li><li><a href="#recoverer">recoverer</a></li><li><a href="#subscriber">subscriber</a></li><li><a href="#syncer">syncer</a></li></ul></li><li><a href="#常见问题">常见问题</a><ul><li><a href="#_1-任务至少会执行一次-是否可能重复执行">1. 任务至少会执行一次,是否可能重复执行?</a></li></ul></li></ul></div> 在微服务中,如果你需要一个分布式的任务管理库,那么asynq将是首选. 它基于redis,所以就算是你有多个任务的分发以及消费节点,也不用担心节点协调问题.因为redis集群自己会同步数据.</p><h2 id="架构"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h2><p><img alt="image.png" data-src="./assets/asynq_arch.png" loading="lazy" class="lazy"></p><p>asynq 围绕着redis展开,这是他的单一中心. 而相关的client以及message broker可以有多个. asynq支持重要特新:</p><ul><li>保证一个任务至少被执行一次</li><li>有重试机制</li><li>有简单的优先级队列</li><li>同时有一个asynqmon的管理界面</li></ul><h2 id="一分钟上手"><a class="header-anchor" href="#一分钟上手" aria-hidden="true">#</a> 一分钟上手</h2><p>这里采用的是一个官方的例子.</p><h3 id="task"><a class="header-anchor" href="#task" aria-hidden="true">#</a> task</h3><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">package</span> tasks\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;context&quot;</span>\n    <span class="token string">&quot;encoding/json&quot;</span>\n    <span class="token string">&quot;fmt&quot;</span>\n    <span class="token string">&quot;log&quot;</span>\n    <span class="token string">&quot;time&quot;</span>\n    <span class="token string">&quot;github.com/hibiken/asynq&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// A list of task types.</span>\n<span class="token keyword">const</span> <span class="token punctuation">(</span>\n    TypeEmailDelivery   <span class="token operator">=</span> <span class="token string">&quot;email:deliver&quot;</span>\n    TypeImageResize     <span class="token operator">=</span> <span class="token string">&quot;image:resize&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> EmailDeliveryPayload <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    UserID     <span class="token builtin">int</span>\n    TemplateID <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> ImageResizePayload <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    SourceURL <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//----------------------------------------------</span>\n<span class="token comment">// Write a function NewXXXTask to create a task.</span>\n<span class="token comment">// A task consists of a type and a payload.</span>\n<span class="token comment">//----------------------------------------------</span>\n\n<span class="token keyword">func</span> <span class="token function">NewEmailDeliveryTask</span><span class="token punctuation">(</span>userID <span class="token builtin">int</span><span class="token punctuation">,</span> tmplID <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>asynq<span class="token punctuation">.</span>Task<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    payload<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>EmailDeliveryPayload<span class="token punctuation">{</span>UserID<span class="token punctuation">:</span> userID<span class="token punctuation">,</span> TemplateID<span class="token punctuation">:</span> tmplID<span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> asynq<span class="token punctuation">.</span><span class="token function">NewTask</span><span class="token punctuation">(</span>TypeEmailDelivery<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">NewImageResizeTask</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>asynq<span class="token punctuation">.</span>Task<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    payload<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>ImageResizePayload<span class="token punctuation">{</span>SourceURL<span class="token punctuation">:</span> src<span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err\n    <span class="token punctuation">}</span>\n    <span class="token comment">// task options can be passed to NewTask, which can be overridden at enqueue time.</span>\n    <span class="token keyword">return</span> asynq<span class="token punctuation">.</span><span class="token function">NewTask</span><span class="token punctuation">(</span>TypeImageResize<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> asynq<span class="token punctuation">.</span><span class="token function">MaxRetry</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> asynq<span class="token punctuation">.</span><span class="token function">Timeout</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//---------------------------------------------------------------</span>\n<span class="token comment">// Write a function HandleXXXTask to handle the input task.</span>\n<span class="token comment">// Note that it satisfies the asynq.HandlerFunc interface.</span>\n<span class="token comment">//</span>\n<span class="token comment">// Handler doesn&#39;t need to be a function. You can define a type</span>\n<span class="token comment">// that satisfies asynq.Handler interface. See examples below.</span>\n<span class="token comment">//---------------------------------------------------------------</span>\n\n<span class="token keyword">func</span> <span class="token function">HandleEmailDeliveryTask</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> t <span class="token operator">*</span>asynq<span class="token punctuation">.</span>Task<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> p EmailDeliveryPayload\n    <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;json.Unmarshal failed: %v: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> asynq<span class="token punctuation">.</span>SkipRetry<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Sending Email to User: user_id=%d, template_id=%s&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>UserID<span class="token punctuation">,</span> p<span class="token punctuation">.</span>TemplateID<span class="token punctuation">)</span>\n    <span class="token comment">// Email delivery code ...</span>\n    <span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ImageProcessor implements asynq.Handler interface.</span>\n<span class="token keyword">type</span> ImageProcessor <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ... fields for struct</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>processor <span class="token operator">*</span>ImageProcessor<span class="token punctuation">)</span> <span class="token function">ProcessTask</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> t <span class="token operator">*</span>asynq<span class="token punctuation">.</span>Task<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> p ImageResizePayload\n    <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;json.Unmarshal failed: %v: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> asynq<span class="token punctuation">.</span>SkipRetry<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Resizing image: src=%s&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>SourceURL<span class="token punctuation">)</span>\n    <span class="token comment">// Image resizing code ...</span>\n    <span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">NewImageProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>ImageProcessor <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token operator">&amp;</span>ImageProcessor<span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><p>这是client/server 共同知晓的任务的数据结构.</p><h3 id="client"><a class="header-anchor" href="#client" aria-hidden="true">#</a> client</h3><p>client 其实是task的生产者,将任务放入队列. 相关的server会自动进行消费.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;log&quot;</span>\n    <span class="token string">&quot;time&quot;</span>\n\n    <span class="token string">&quot;github.com/hibiken/asynq&quot;</span>\n    <span class="token string">&quot;your/app/package/tasks&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> redisAddr <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1:6379&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    client <span class="token operator">:=</span> asynq<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>asynq<span class="token punctuation">.</span>RedisClientOpt<span class="token punctuation">{</span>Addr<span class="token punctuation">:</span> redisAddr<span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// ------------------------------------------------------</span>\n    <span class="token comment">// Example 1: Enqueue task to be processed immediately.</span>\n    <span class="token comment">//            Use (*Client).Enqueue method.</span>\n    <span class="token comment">// ------------------------------------------------------</span>\n\n    task<span class="token punctuation">,</span> err <span class="token operator">:=</span> tasks<span class="token punctuation">.</span><span class="token function">NewEmailDeliveryTask</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">&quot;some:template:id&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;could not create task: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    info<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;could not enqueue task: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;enqueued task: id=%s queue=%s&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> info<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span>\n\n\n    <span class="token comment">// ------------------------------------------------------------</span>\n    <span class="token comment">// Example 2: Schedule task to be processed in the future.</span>\n    <span class="token comment">//            Use ProcessIn or ProcessAt option.</span>\n    <span class="token comment">// ------------------------------------------------------------</span>\n\n    info<span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> asynq<span class="token punctuation">.</span><span class="token function">ProcessIn</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;could not schedule task: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;enqueued task: id=%s queue=%s&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> info<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span>\n\n\n    <span class="token comment">// ----------------------------------------------------------------------------</span>\n    <span class="token comment">// Example 3: Set other options to tune task processing behavior.</span>\n    <span class="token comment">//            Options include MaxRetry, Queue, Timeout, Deadline, Unique etc.</span>\n    <span class="token comment">// ----------------------------------------------------------------------------</span>\n\n    task<span class="token punctuation">,</span> err <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">NewImageResizeTask</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com/myassets/image.jpg&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;could not create task: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    info<span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> asynq<span class="token punctuation">.</span><span class="token function">MaxRetry</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> asynq<span class="token punctuation">.</span><span class="token function">Timeout</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;could not enqueue task: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;enqueued task: id=%s queue=%s&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> info<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h3 id="server"><a class="header-anchor" href="#server" aria-hidden="true">#</a> server</h3><p>server 是task的消费者,它一直运行在后台. 可以有多个client,多个server,只要他们连接到了同一个redis server(集群也可以的)即可.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;log&quot;</span>\n\n    <span class="token string">&quot;github.com/hibiken/asynq&quot;</span>\n    <span class="token string">&quot;your/app/package/tasks&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> redisAddr <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1:6379&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    srv <span class="token operator">:=</span> asynq<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>\n        asynq<span class="token punctuation">.</span>RedisClientOpt<span class="token punctuation">{</span>Addr<span class="token punctuation">:</span> redisAddr<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        asynq<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>\n            <span class="token comment">// Specify how many concurrent workers to use</span>\n            Concurrency<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n            <span class="token comment">// Optionally specify multiple queues with different priority.</span>\n            Queues<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>\n                <span class="token string">&quot;critical&quot;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n                <span class="token string">&quot;default&quot;</span><span class="token punctuation">:</span>  <span class="token number">3</span><span class="token punctuation">,</span>\n                <span class="token string">&quot;low&quot;</span><span class="token punctuation">:</span>      <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token comment">// See the godoc for other configuration options</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n\n    <span class="token comment">// mux maps a type to a handler</span>\n    mux <span class="token operator">:=</span> asynq<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span>tasks<span class="token punctuation">.</span>TypeEmailDelivery<span class="token punctuation">,</span> tasks<span class="token punctuation">.</span>HandleEmailDeliveryTask<span class="token punctuation">)</span>\n    mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>tasks<span class="token punctuation">.</span>TypeImageResize<span class="token punctuation">,</span> tasks<span class="token punctuation">.</span><span class="token function">NewImageProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// ...register other handlers...</span>\n\n    <span class="token keyword">if</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>mux<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;could not run server: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="asynqmon"><a class="header-anchor" href="#asynqmon" aria-hidden="true">#</a> asynqmon</h3><p>这是一个管理界面,可以直观的查看各个队列的情况,可以手工取消,删除,重新执行task.</p><h4 id="queues"><a class="header-anchor" href="#queues" aria-hidden="true">#</a> Queues</h4><p><img alt="" data-src="assets/asynqmon1.png.png" loading="lazy" class="lazy"></p><h4 id="tasks"><a class="header-anchor" href="#tasks" aria-hidden="true">#</a> tasks</h4><p><img alt="" data-src="assets/asynqmon2.png.png" loading="lazy" class="lazy"></p><h4 id="metrics"><a class="header-anchor" href="#metrics" aria-hidden="true">#</a> metrics</h4><p><img alt="" data-src="assets/asynq_metrics.png" loading="lazy" class="lazy"></p><h2 id="简单代码阅读"><a class="header-anchor" href="#简单代码阅读" aria-hidden="true">#</a> 简单代码阅读</h2><p>asynq 实际上是围绕redis展开, 由于其数据结构复杂,所以里面大量使用了lua脚本来保证操作的原子性. redis可以认为是asynq的高性能数据库, asynq client和server的数据都取自这里.</p><p>task主要以下状态:</p><ul><li>Pending 创建的任务,都处于此状态</li><li>Active server可以执行的时候,会将任务转换为active,然后开始执行</li><li>Scheduled 如果一个任务不能立即执行,会进入到Scheduled状态,等待时机到来的时候再执行.</li><li>retry 任务执行失败后,会再次尝试,这时候就会进入retry的状态,</li><li>archived状态 失败次数达到上线,或者超过了规定的时限了,就会进入该状态,一直持续下去,需要人手工删除.</li></ul><h2 id="任务的状态迁移"><a class="header-anchor" href="#任务的状态迁移" aria-hidden="true">#</a> 任务的状态迁移</h2><p>这主要涉及到asynq server的内部组件,下面一一介绍,他们在执行和管理任务.</p><h3 id="healthchecker"><a class="header-anchor" href="#healthchecker" aria-hidden="true">#</a> healthchecker</h3><p>这个非常简单,不断的ping redis,告诉自己还活着</p><h3 id="heartbeater"><a class="header-anchor" href="#heartbeater" aria-hidden="true">#</a> heartbeater</h3><p>对应的是asynqmon中的<code>/asynqmon/servers</code>,主要是不停的将server的状态更新到redis中,方便asynqmon 查看.</p><h3 id="inspector"><a class="header-anchor" href="#inspector" aria-hidden="true">#</a> inspector</h3><p>这个是asynqmon管理的入口,可以查看所有的server以及管理任务.</p><h3 id="processor"><a class="header-anchor" href="#processor" aria-hidden="true">#</a> processor</h3><p>这个是执行任务的组件,不停的将处于Pending中的任务,从队列中取出来,然后执行. 主要是解决:</p><ol><li>如果任务失败了,则将任务改为retry或者archived状态,主要是看是否还有尝试次数.</li><li>如果收到了server退出的信号,则将正在执行的任务重新设置为pending,然后再结束.</li><li>开始执行任务之前,会将任务放入一个<code>Cancelations</code>的数据结构中,方便另一个组件<code>subscriber</code>处理.</li></ol><h3 id="scheduler"><a class="header-anchor" href="#scheduler" aria-hidden="true">#</a> scheduler</h3><p>Scheduler是一个相对独立的组件,主要是定期产生task,可以认为是client的高级版本.</p><h3 id="recoverer"><a class="header-anchor" href="#recoverer" aria-hidden="true">#</a> recoverer</h3><p>这个组件负责重试执行失败的task,如果还有可以用的尝试次数就重试执行,重试执行就是将任务状态由retry改为pending. 还有一种特殊情况就是就是任务处于active状态,但是相关的server已经挂了,这导致recover发现,也会取出来重新执行.</p><h3 id="subscriber"><a class="header-anchor" href="#subscriber" aria-hidden="true">#</a> subscriber</h3><p>这个组件主要功能是响应asynqmon取消任务的命令,它内部使用redis的PUBSUB机制,监听来自<code>inspector</code>的取消命令,收到后,会将指定的任务取消执行.</p><h3 id="syncer"><a class="header-anchor" href="#syncer" aria-hidden="true">#</a> syncer</h3><p>syncer是processor的辅助组件,processor对于任务状态的所有改变,都是在syncer中执行. 如果状态改变失败,会尝试重新执行.</p><h2 id="常见问题"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="_1-任务至少会执行一次-是否可能重复执行"><a class="header-anchor" href="#_1-任务至少会执行一次-是否可能重复执行" aria-hidden="true">#</a> 1. 任务至少会执行一次,是否可能重复执行?</h3><p>有可能的,有一种场景,比如asynq在收到退出信号时,会把正在执行的任务重新放回去,这时候如果某个任务碰巧结束了,这就会造成这个任务虽然成功了,但是重复执行. 当然如果一个任务执行到一半,进程退出了,下次启动以后,还会接着重新执行.</p>',51)];e.render=function(a,p,e,o,c,l){return n(),s("div",null,t)};export{p as __pageData,e as default};
