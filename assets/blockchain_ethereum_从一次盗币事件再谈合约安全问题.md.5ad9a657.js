import{_ as s,c as a,o as n,N as l}from"./chunks/framework.3a9190c5.js";const F=JSON.parse('{"title":"从一次盗币事件再谈合约安全问题","description":"","frontmatter":{"title":"从一次盗币事件再谈合约安全问题","date":"2018-11-15T08:55:51.000Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/ethereum/从一次盗币事件再谈合约安全问题.md"}'),p={name:"blockchain/ethereum/从一次盗币事件再谈合约安全问题.md"},e=l(`<h1 id="从一起-盗币-事件再谈合约安全问题" tabindex="-1">从一起“盗币”事件再谈合约安全问题 <a class="header-anchor" href="#从一起-盗币-事件再谈合约安全问题" aria-label="Permalink to &quot;从一起“盗币”事件再谈合约安全问题&quot;">​</a></h1><p>本来是受到<a href="https://xlab.tencent.com/cn/2018/11/09/pay-attention-to-the-ethereum-hash-collision-problem-from-the-stealing-coins-incident/#more-404" target="_blank" rel="noreferrer">从一起“盗币”事件看以太坊存储 hash 碰撞问题</a>一文启发,但是我并不太认同文中的观点.并且文中有一些技术性错误.</p><h2 id="一-起因" tabindex="-1">一. 起因 <a class="header-anchor" href="#一-起因" aria-label="Permalink to &quot;一. 起因&quot;">​</a></h2><p>今日某安全厂商在以太坊上发布一份让大家来&quot;盗币&quot;的<a href="https://etherscan.io/address/0x5170a14aa36245a8a9698f23444045bdc4522e0a#code" target="_blank" rel="noreferrer">合约</a>,就是希望大家能够意识到不好的合约设计会存在严重安全隐患.下面是这份合约源码.</p><div class="language-sol line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sol</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pragma solidity ^0.4.21;</span></span>
<span class="line"><span style="color:#A6ACCD;">contract DVPgame {</span></span>
<span class="line"><span style="color:#A6ACCD;">    ERC20 public token;</span></span>
<span class="line"><span style="color:#A6ACCD;">    uint256[] map;</span></span>
<span class="line"><span style="color:#A6ACCD;">    using SafeERC20 for ERC20;</span></span>
<span class="line"><span style="color:#A6ACCD;">    using SafeMath for uint256;</span></span>
<span class="line"><span style="color:#A6ACCD;">    constructor(address addr) payable{</span></span>
<span class="line"><span style="color:#A6ACCD;">        token = ERC20(addr);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    function (){</span></span>
<span class="line"><span style="color:#A6ACCD;">        if(map.length&gt;=uint256(msg.sender)){</span></span>
<span class="line"><span style="color:#A6ACCD;">            require(map[uint256(msg.sender)]!=1);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        if(token.balanceOf(this)==0){</span></span>
<span class="line"><span style="color:#A6ACCD;">            //airdrop is over</span></span>
<span class="line"><span style="color:#A6ACCD;">            selfdestruct(msg.sender);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }else{</span></span>
<span class="line"><span style="color:#A6ACCD;">            token.safeTransfer(msg.sender,100);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">            if (map.length &lt;= uint256(msg.sender)) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                map.length = uint256(msg.sender) + 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">            map[uint256(msg.sender)] = 1;  </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    //Guess the value(param:x) of the keccak256 value modulo 10000 of the future block (param:blockNum)</span></span>
<span class="line"><span style="color:#A6ACCD;">    function guess(uint256 x,uint256 blockNum) public payable {</span></span>
<span class="line"><span style="color:#A6ACCD;">        require(msg.value == 0.001 ether || token.allowance(msg.sender,address(this))&gt;=1*(10**18));</span></span>
<span class="line"><span style="color:#A6ACCD;">        require(blockNum&gt;block.number);</span></span>
<span class="line"><span style="color:#A6ACCD;">        if(token.allowance(msg.sender,address(this))&gt;0){</span></span>
<span class="line"><span style="color:#A6ACCD;">            token.safeTransferFrom(msg.sender,address(this),1*(10**18));</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        if (map.length &lt;= uint256(msg.sender)+x) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            map.length = uint256(msg.sender)+x + 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">        map[uint256(msg.sender)+x] = blockNum;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    //Run a lottery</span></span>
<span class="line"><span style="color:#A6ACCD;">    function lottery(uint256 x) public {</span></span>
<span class="line"><span style="color:#A6ACCD;">        require(map[uint256(msg.sender)+x]!=0);</span></span>
<span class="line"><span style="color:#A6ACCD;">        require(block.number &gt; map[uint256(msg.sender)+x]);</span></span>
<span class="line"><span style="color:#A6ACCD;">        require(block.blockhash(map[uint256(msg.sender)+x])!=0);</span></span>
<span class="line"><span style="color:#A6ACCD;">        uint256 answer = uint256(keccak256(block.blockhash(map[uint256(msg.sender)+x])))%10000;</span></span>
<span class="line"><span style="color:#A6ACCD;">        if (x == answer) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            token.safeTransfer(msg.sender,token.balanceOf(address(this)));</span></span>
<span class="line"><span style="color:#A6ACCD;">            selfdestruct(msg.sender);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>上述文中提到这里面安全问题是因为solidity在存储map时候的地址计算方式,存在hash碰撞问题,所以导致币被盗走. 但是显然并不是因为hash碰撞问题. 确实不好的设计会导致hash碰撞问题,但是这里确实不是hash碰撞引起的问题.</p><h2 id="二-solidity复杂变量的地址计算问题" tabindex="-1">二. solidity复杂变量的地址计算问题 <a class="header-anchor" href="#二-solidity复杂变量的地址计算问题" aria-label="Permalink to &quot;二. solidity复杂变量的地址计算问题&quot;">​</a></h2><h3 id="一个示例" tabindex="-1">一个示例 <a class="header-anchor" href="#一个示例" aria-label="Permalink to &quot;一个示例&quot;">​</a></h3><p>开始之前,我们先找一个兼具各种元素</p><div class="language-solidity line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">solidity</span><span style="color:#A6ACCD;"> ^0.4.23</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">contract</span><span style="color:#FFCB6B;"> Locked</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> unlocked </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NameRecord</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">bytes32</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">address</span><span style="color:#A6ACCD;"> mappedAddress</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">mapping</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">address</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> NameRecord</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> registeredNameRecord</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">mapping</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">bytes32</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">address</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> resolve</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    NameRecord </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">records</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">bytes32</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">_name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">address</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">_mappedAddress</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        NameRecord newRecord</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        newRecord</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        newRecord</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mappedAddress </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _mappedAddress</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        resolve</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">_name</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _mappedAddress</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        registeredNameRecord</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">msg.sender</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> newRecord</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">require</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">unlocked</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newRecords</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">uint256</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">bytes32</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">_name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">address</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">_mappedAddress</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        NameRecord </span><span style="color:#C792EA;">memory</span><span style="color:#A6ACCD;"> newRecord</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        newRecord</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        newRecord</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mappedAddress </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _mappedAddress</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">recor</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        records</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">]=</span><span style="color:#A6ACCD;">newRecord</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">require</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">unlocked</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="简单变量的地址" tabindex="-1">简单变量的地址 <a class="header-anchor" href="#简单变量的地址" aria-label="Permalink to &quot;简单变量的地址&quot;">​</a></h3><p>每个合约都会有自己独立的存储空间(storage),运行时的Memory空间.storage和memory空间都是从0开始. 因为EVM是一个256位的虚拟机,因此Storage空间有2**256*256位这么大. 作为Locked这份合约中第一个简单变量unlcoked的地址就是0. 基本类型int,string,bytes32,固定大小的数组等都是简单类型,他们有固定的长度. 很容易算出来占用多少字节空间,因此只需依次累加即可. 比如registeredNameRecord的地址是1,resolve的地址是2,records地址就是3 <strong>另外就是要注意空间对齐问题</strong></p><h3 id="动态数组以及map的地址" tabindex="-1">动态数组以及Map的地址 <a class="header-anchor" href="#动态数组以及map的地址" aria-label="Permalink to &quot;动态数组以及Map的地址&quot;">​</a></h3><h4 id="array计算问题" tabindex="-1">Array计算问题 <a class="header-anchor" href="#array计算问题" aria-label="Permalink to &quot;Array计算问题&quot;">​</a></h4><p>因为动态数组,比如这里的records事先无法预知大小,他的地址计算就会用到hash. 简单来说,这里records中元素的起始地址就是hash(slot),这里的slot是3,因为records是第四个变量. 这个hash(slot)就是这个数组的起始地址,真正存储的变量地址则是hash(slot)+offset,offset的计算方式就和其他所有语言的offset计算方式都一样i*sizeof(NameRecord).</p><p>这种方式的好处就在于<strong>节省Gas</strong>,虽然定义了records对象,但是在你没存储任何对象之前,不会浪费一点Gas,要知道存储一个字就是20000Gas,成本昂贵.</p><p><strong>而slot3,也就是3这个地址存的是数组的长度</strong>.</p><h4 id="map地址计算问题" tabindex="-1">Map地址计算问题 <a class="header-anchor" href="#map地址计算问题" aria-label="Permalink to &quot;Map地址计算问题&quot;">​</a></h4><p>Map的存储设计方式类似于Array,一样为了节省Gas,采用hash计算地址.和Array不一样的是,他是Hash(key,slot)而不是简单的slot. 以resolve这个map为例,&quot;arandname&quot;存储地址就是hash(bytes32(&quot;arandnme&quot;),uint256(2).</p><p>如果存储对象比较复杂,不止占用一个字的存储空间,按照顺序递增即可.</p><h2 id="三-先来玩demo" tabindex="-1">三. 先来玩demo <a class="header-anchor" href="#三-先来玩demo" aria-label="Permalink to &quot;三. 先来玩demo&quot;">​</a></h2><p>newRecords函数成功调用,必须要求unlocked为true,但是unlocked并没有可以修改的地方. 这是一个棘手的问题,实际上这个是最前面合约问题的简化.</p><p>首先我们知道unlocked的存储地址为0 其次我们已经知道了动态数组的地址计算规则,那么是否可以让records[index]计算结果是0呢?</p><p>这个地址我们已经知道是hash(records_slot)+index*sizeof(NameRecord). 有了这个公式其实已经比较容易算出来了.</p><p>让我们来一步一步计算这个地址吧.</p><h3 id="部署合约" tabindex="-1">部署合约 <a class="header-anchor" href="#部署合约" aria-label="Permalink to &quot;部署合约&quot;">​</a></h3><p>这一步比较容易在Remix中选择Javascript VM方式直接部署即可.</p><p><img alt="部署Locked" data-src="https://img2018.cnblogs.com/blog/124391/201811/124391-20181115120143310-712169367.png" loading="lazy" class="lazy"></p><h3 id="初次调用newrecords" tabindex="-1">初次调用newRecords <a class="header-anchor" href="#初次调用newrecords" aria-label="Permalink to &quot;初次调用newRecords&quot;">​</a></h3><p>应该说绝大多数时候newRecords肯定是无法直接调用成功,那就先来一次失败调用吧. 我们就传入参数 <code>0,&quot;0x3131313131313131313131313131313131313131313131313131313131313131&quot;,&quot;0x692a70d2e424a56d2c6c27aa97d1a86395877b3a&quot;</code> 可以看到调用失败了,失败结果如下: <img alt="失败调用" data-src="https://img2018.cnblogs.com/blog/124391/201811/124391-20181115120213763-736021450.png" loading="lazy" class="lazy"></p><h3 id="从失败中找到正确方法" tabindex="-1">从失败中找到正确方法 <a class="header-anchor" href="#从失败中找到正确方法" aria-label="Permalink to &quot;从失败中找到正确方法&quot;">​</a></h3><p>常言说,失败乃成功之母,我们就从失败中寻找成功吧.</p><h4 id="debug去找寻存储地址hash-records-slot" tabindex="-1">Debug去找寻存储地址hash(records_slot) <a class="header-anchor" href="#debug去找寻存储地址hash-records-slot" aria-label="Permalink to &quot;Debug去找寻存储地址hash(records_slot)&quot;">​</a></h4><p>单击Debug开始找寻地址的旅程吧.</p><p>这整个过程只有最后的<code>records[index]=newRecord</code>会在storage空间存储内容,因此我们只需快进到sstore指令即可.</p><p><img alt="找寻sstore" data-src="https://img2018.cnblogs.com/blog/124391/201811/124391-20181115120232917-246700780.png" loading="lazy" class="lazy"> 从Stack中可以看到0元素的起始地址是<code>0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b</code>,要在这个地址上存储的对象是就是<code>0x3131313131313131313131313131313131313131313131313131313131313131</code>,恰好就是name的值.</p><p><code>0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b</code>就是Sha3(3).</p><h3 id="构造成功的调用" tabindex="-1">构造成功的调用 <a class="header-anchor" href="#构造成功的调用" aria-label="Permalink to &quot;构造成功的调用&quot;">​</a></h3><p>首先起始地址是0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b,而sizeof(NameRecord)是2,<strong>注意不是64,因为EVM单位是32字节而不是字节</strong> 就很容易推算出来Index是</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(0x10000000000000000000000000000000000000000000000000000000000000000-</span></span>
<span class="line"><span style="color:#A6ACCD;">0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b)/2</span></span>
<span class="line"><span style="color:#A6ACCD;">=0x1ed452f8b0d361ff8353039b6876926bcb1e6352e27d7e97d0ed74ddc84703d2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>那么我们的调用参数就是</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">0x1ed452f8b0d361ff8353039b6876926bcb1e6352e27d7e97d0ed74ddc84703d2,&quot;0x3131313131313131313131313131313131313131313131313131313131313131&quot;,&quot;0x692a70d2e424a56d2c6c27aa97d1a86395877b3a&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>下图可以看到成功调用. ![调用结果]<img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201811/124391-20181115120256869-1835023047.png" loading="lazy" class="lazy"></p><h2 id="四-再一起来玩dvpgame" tabindex="-1">四. 再一起来玩DVPgame <a class="header-anchor" href="#四-再一起来玩dvpgame" aria-label="Permalink to &quot;四. 再一起来玩DVPgame&quot;">​</a></h2><p>有了上面的思路相信大家就不会想着想法设法猜测lottery的x是多少了,直奔我们的fallback函数即可.</p><h3 id="覆盖token" tabindex="-1">覆盖token <a class="header-anchor" href="#覆盖token" aria-label="Permalink to &quot;覆盖token&quot;">​</a></h3><p>先通过guess函数把token设置为你自己事先部署的一份ERC20 Token,当然DVPgame就不会有任何这种新Token.</p><p>让hash(1)+msg.sender+x大于2**256,这个很容易满足吧. 然后把blockNum指定为你的token地址,相信他肯定会比当前的block.number大的.</p><p>悄悄告诉你hash(1)就是<code>0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6</code>,方便您试试.</p><h3 id="随便转点以太坊给dvpgame" tabindex="-1">随便转点以太坊给DVPgame <a class="header-anchor" href="#随便转点以太坊给dvpgame" aria-label="Permalink to &quot;随便转点以太坊给DVPgame&quot;">​</a></h3><p>正常转账给DVPgame这个合约地址,无论多少都无所谓,反正最后都是会回到我们自己的账户上. 不过还是不要太多,万一有人捷足先登了呢.</p><h3 id="看看别人怎么玩的" tabindex="-1">看看别人怎么玩的 <a class="header-anchor" href="#看看别人怎么玩的" aria-label="Permalink to &quot;看看别人怎么玩的&quot;">​</a></h3><p>到底怎么玩我就不做了,因为已经有人玩过了,我也是事后诸葛亮. <a href="https://etherscan.io/tx/0x4c15cbadc1743503464c7d8e5ad67eeb3247c2b728b846765122722f5635690a#internal" target="_blank" rel="noreferrer">链上直播看这里</a></p><h2 id="五-剩下的问题" tabindex="-1">五. 剩下的问题 <a class="header-anchor" href="#五-剩下的问题" aria-label="Permalink to &quot;五. 剩下的问题&quot;">​</a></h2><p>如果你细心,就会发现我的例子中还有一个register函数没说.如果你自己尝试调用了,就会发现无论怎么调用都会成功,是不是颠覆了三观啊. 其实原因很简单,solidity中结构体默认是分配在storage空间中的(我也不知道为什么这么做,确实有点坑),而且这时候结构体的地址的起始地址就是0. 也就是说<code>newRecord.name = _name;</code>这句话在你不知不觉中就覆盖了unlocked. 说到这里,我还想说的是： 如果你在写合约,请把solidity怎么工作的,搞清楚再动手</p><p>如果你够细心,至少register中的这个bug是可以避免的,因为solidity都警示你了. ![来自solidity的warn] (<a href="https://img2018.cnblogs.com/blog/124391/201811/124391-20181115120330641-1178298347.png" target="_blank" rel="noreferrer">https://img2018.cnblogs.com/blog/124391/201811/124391-20181115120330641-1178298347.png</a>)</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>solidity的任何warning都请不要忽略</p></div><h2 id="六-hash碰撞问题" tabindex="-1">六. hash碰撞问题 <a class="header-anchor" href="#六-hash碰撞问题" aria-label="Permalink to &quot;六. hash碰撞问题&quot;">​</a></h2><p>经过上面的</p><h2 id="六-小测试工具" tabindex="-1">六. 小测试工具 <a class="header-anchor" href="#六-小测试工具" aria-label="Permalink to &quot;六. 小测试工具&quot;">​</a></h2><p>计算hash值的小工具</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//Sha3 is short for Keccak256Hash</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Sha3</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">...[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Hash </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> crypto</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Keccak256Hash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">...)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//BigIntTo32Bytes convert a big int to bytes</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BigIntTo32Bytes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	data </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Bytes</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	buf </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		buf</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		buf</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> buf</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TestCalcHashSlot</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">t </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">testing</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> big</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	hash </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Sha3</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">BigIntTo32Bytes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">	t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Logf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hash=%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hash</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b</span></span>
<span class="line"><span style="color:#A6ACCD;">	addr </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Address</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">	fix </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">copy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fix</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">:],</span><span style="color:#A6ACCD;"> addr</span><span style="color:#89DDFF;">[:])</span></span>
<span class="line"><span style="color:#A6ACCD;">	hash </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Sha3</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">[:])</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//addr=0x0000000000000000000000000000000000000000,it&#39;s hash=0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a</span></span>
<span class="line"><span style="color:#A6ACCD;">	t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Logf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addr=%s,it&#39;s hash=%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> addr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> hash</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>`,62),o=[e];function r(c,t,i,D,y,A){return n(),a("div",null,o)}const b=s(p,[["render",r]]);export{F as __pageData,b as default};
