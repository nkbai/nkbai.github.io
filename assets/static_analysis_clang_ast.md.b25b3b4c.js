import{_ as s,c as n,o as a,N as l}from"./chunks/framework.3a9190c5.js";const u=JSON.parse('{"title":"llvm clang ast","description":"","frontmatter":{"title":"llvm clang ast","date":"2023-04-08T03:57:03.000Z","draft":false,"tags":["android","静态分析"],"series":["静态分析","llvm"],"categories":["技术相关"]},"headers":[],"relativePath":"static_analysis/clang_ast.md"}'),e={name:"static_analysis/clang_ast.md"},p=l(`<h2 id="core-classes" tabindex="-1">Core Classes <a class="header-anchor" href="#core-classes" aria-label="Permalink to &quot;Core Classes&quot;">​</a></h2><h3 id="decl-声明系列" tabindex="-1">Decl 声明系列 <a class="header-anchor" href="#decl-声明系列" aria-label="Permalink to &quot;Decl  声明系列&quot;">​</a></h3><ul><li>CXXRecordDecl 类,struct</li><li>VarDecl</li><li>UnresolvedUsingTypenameDecl</li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> \\  </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Base</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">typename</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Base</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="stmt" tabindex="-1">Stmt <a class="header-anchor" href="#stmt" aria-label="Permalink to &quot;Stmt&quot;">​</a></h3><ul><li>CompoundStmt</li><li>CXXTryStmt</li><li>BinaryOperator</li><li></li></ul><h3 id="type" tabindex="-1">Type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;Type&quot;">​</a></h3><ul><li>PointerType</li><li>ParentType</li><li>SubstTemplateTypeParmType</li></ul><h3 id="glue-classes" tabindex="-1">Glue Classes <a class="header-anchor" href="#glue-classes" aria-label="Permalink to &quot;Glue Classes&quot;">​</a></h3><ul><li><p>DeclContext</p></li><li><p>TemplateArgument</p></li><li><p>NestedNameSpecifier</p></li><li><p>QualType Qualifier</p><ul><li>比如<code>const int x</code>中的const</li></ul></li><li><p>IfStmt: getThen,getElse,getCond</p></li><li><p>CXXRecordDecl:</p><ul><li>getDescribedClassTemplate</li></ul></li><li><p>Type: getAsCXXRecordDecl</p></li></ul><p>Type 也很复杂</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="location" tabindex="-1">Location <a class="header-anchor" href="#location" aria-label="Permalink to &quot;Location&quot;">​</a></h3><p>SourceLocation 只有一个ID字段,因为真正的Location是被SourceManager管理的,避免重复.</p><h4 id="call-expressions" tabindex="-1">Call Expressions <a class="header-anchor" href="#call-expressions" aria-label="Permalink to &quot;Call Expressions&quot;">​</a></h4><p><img alt="image-20230408201217925" data-src="img/image-20230408201217925.png" loading="lazy" class="lazy"></p><p><img alt="image-20230408201754187" data-src="img/image-20230408201754187.png" loading="lazy" class="lazy"></p><p><img alt="image-20230408201816172" data-src="img/image-20230408201816172.png" loading="lazy" class="lazy"></p><p><img alt="image-20230408201911064" data-src="img/image-20230408201911064.png" loading="lazy" class="lazy"></p><p>PointerTypeLoc返回的是int*的loc</p><p>PointerTypeLoc.getPointeeLoc返回的是int的loc</p><p>loc to Text?</p><ul><li>makeFileCharRange</li><li>measureTokenLength</li></ul><h3 id="template-tree-transformations" tabindex="-1">Template tree transformations <a class="header-anchor" href="#template-tree-transformations" aria-label="Permalink to &quot;Template tree transformations&quot;">​</a></h3><p>说的就是c++中的模板</p><ul><li>Nodes are <strong>shared</strong> 这点很关键</li></ul><h3 id="recuisiveastvisitor" tabindex="-1">RecuisiveASTVisitor <a class="header-anchor" href="#recuisiveastvisitor" aria-label="Permalink to &quot;RecuisiveASTVisitor&quot;">​</a></h3><ul><li>Trigger on Types you are care about</li><li>Knows all the connections</li><li>Does not give you context information</li></ul><h3 id="ast-matcher" tabindex="-1">AST Matcher <a class="header-anchor" href="#ast-matcher" aria-label="Permalink to &quot;AST Matcher&quot;">​</a></h3><ul><li>Trigger on Expressions</li><li>Bind Context</li><li>Get all context inside a callback</li></ul><p>dump ast:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">clang-check</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ClangTidyToolMain.cpp</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--ast-dump</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>即使编译不过去,也可以生成ast的,只要语法正确.</p><p>比如: <strong>注释了iostream,cstdlib,vector,编译是肯定会失败的.</strong></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//===--- tools/extra/clang-tidy/ClangTidyToolMain.cpp - Clang tidy tool ---===//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// See https://llvm.org/LICENSE.txt for license information.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//===----------------------------------------------------------------------===//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">///</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">///  </span><span style="color:#C792EA;font-style:italic;">\\file</span><span style="color:#676E95;font-style:italic;"> This file contains clang-tidy tool entry point main function.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">///</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">///  This tool uses the Clang Tooling infrastructure, see</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">///    http://clang.llvm.org/docs/HowToSetupToolingForLLVM.html</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">///  for details on setting it up with LLVM source tree.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">///</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//===----------------------------------------------------------------------===//</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ClangTidyMainxx.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//#include &lt;iostream&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//#include &lt;cstdlib&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//#include &lt;vector&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">extern</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">environ</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 引入全局变量environ</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testPrintEnv</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> environ</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 将environ保存到env指针中</span></span>
<span class="line"><span style="color:#A6ACCD;">    vector </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> envs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">env </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;"> // 遍历环境变量</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        std::cout &lt;&lt; *env &lt;&lt; std::endl; // 打印环境变量</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">envs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push_back</span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        env</span><span style="color:#89DDFF;">++;</span><span style="color:#676E95;font-style:italic;"> // 移动指针</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">sort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">envs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> envs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> envs</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> env </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">**</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">testPrintEnv</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">clang</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">tidy</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">clangTidyMain</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> argv</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><div class="language-ast line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ast</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">TranslationUnitDecl 0x7fc67184a808 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7fc67184b070 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __int128_t &#39;__int128&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-BuiltinType 0x7fc67184add0 &#39;__int128&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7fc67184b0e0 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __uint128_t &#39;unsigned __int128&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-BuiltinType 0x7fc67184adf0 &#39;unsigned __int128&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7fc67184b458 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __NSConstantString &#39;__NSConstantString_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-RecordType 0x7fc67184b1d0 &#39;__NSConstantString_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   \`-CXXRecord 0x7fc67184b138 &#39;__NSConstantString_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7fc67184b4f0 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_ms_va_list &#39;char *&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-PointerType 0x7fc67184b4b0 &#39;char *&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   \`-BuiltinType 0x7fc67184a8b0 &#39;char&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7fc67188be58 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_va_list &#39;__va_list_tag[1]&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-ConstantArrayType 0x7fc67188be00 &#39;__va_list_tag[1]&#39; 1 </span></span>
<span class="line"><span style="color:#A6ACCD;">|   \`-RecordType 0x7fc67184b5e0 &#39;__va_list_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|     \`-CXXRecord 0x7fc67184b548 &#39;__va_list_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-VarDecl 0x7fc67188bf20 &lt;/Volumes/dev/tmp/clang-tidy-standalone/tool/ClangTidyToolMain.cpp:22:1, col:15&gt; col:15 used environ &#39;char **&#39; extern</span></span>
<span class="line"><span style="color:#A6ACCD;">|-UsingDirectiveDecl 0x7fc67188c040 &lt;line:23:1, col:17&gt; col:17 Namespace 0x7fc67188bfd0 &#39;std&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-FunctionDecl 0x7fc67188c0e8 &lt;line:25:1, line:37:1&gt; line:25:13 used testPrintEnv &#39;void ()&#39; static</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-CompoundStmt 0x7fc67188c5b0 &lt;col:28, line:37:1&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   |-DeclStmt 0x7fc67188c240 &lt;line:26:5, col:25&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   | \`-VarDecl 0x7fc67188c1a0 &lt;col:5, col:18&gt; col:12 used env &#39;char **&#39; cinit</span></span>
<span class="line"><span style="color:#A6ACCD;">|   |   \`-ImplicitCastExpr 0x7fc67188c228 &lt;col:18&gt; &#39;char **&#39; &lt;LValueToRValue&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   |     \`-DeclRefExpr 0x7fc67188c208 &lt;col:18&gt; &#39;char **&#39; lvalue Var 0x7fc67188bf20 &#39;environ&#39; &#39;char **&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   |-DeclStmt 0x7fc67188c2f8 &lt;line:27:5, col:25&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   | \`-VarDecl 0x7fc67188c290 &lt;col:5, col:21&gt; col:21 invalid envs &#39;int&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   \`-WhileStmt 0x7fc67188c460 &lt;line:28:5, line:32:5&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|     |-BinaryOperator 0x7fc67188c3a0 &lt;line:28:12, col:20&gt; &#39;bool&#39; &#39;!=&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|     | |-ImplicitCastExpr 0x7fc67188c370 &lt;col:12, col:13&gt; &#39;char *&#39; &lt;LValueToRValue&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|     | | \`-UnaryOperator 0x7fc67188c348 &lt;col:12, col:13&gt; &#39;char *&#39; lvalue prefix &#39;*&#39; cannot overflow</span></span>
<span class="line"><span style="color:#A6ACCD;">|     | |   \`-ImplicitCastExpr 0x7fc67188c330 &lt;col:13&gt; &#39;char **&#39; &lt;LValueToRValue&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|     | |     \`-DeclRefExpr 0x7fc67188c310 &lt;col:13&gt; &#39;char **&#39; lvalue Var 0x7fc67188c1a0 &#39;env&#39; &#39;char **&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|     | \`-ImplicitCastExpr 0x7fc67188c388 &lt;col:20&gt; &#39;char *&#39; &lt;NullToPointer&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|     |   \`-CXXNullPtrLiteralExpr 0x7fc67188c360 &lt;col:20&gt; &#39;std::nullptr_t&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|     \`-CompoundStmt 0x7fc67188c448 &lt;col:29, line:32:5&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|       \`-UnaryOperator 0x7fc67188c430 &lt;line:31:9, col:12&gt; &#39;char **&#39; postfix &#39;++&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|         \`-DeclRefExpr 0x7fc67188c410 &lt;col:9&gt; &#39;char **&#39; lvalue Var 0x7fc67188c1a0 &#39;env&#39; &#39;char **&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">\`-FunctionDecl 0x7fc67188c780 &lt;line:39:1, line:42:1&gt; line:39:5 main &#39;int (int, const char **)&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  |-ParmVarDecl 0x7fc67188c5f0 &lt;col:10, col:14&gt; col:14 used argc &#39;int&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  |-ParmVarDecl 0x7fc67188c6a0 &lt;col:20, col:33&gt; col:33 used argv &#39;const char **&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  \`-CompoundStmt 0x7fc67188c940 &lt;col:39, line:42:1&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    \`-CallExpr 0x7fc67188c8e0 &lt;line:40:5, col:18&gt; &#39;void&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      \`-ImplicitCastExpr 0x7fc67188c8c8 &lt;col:5&gt; &#39;void (*)()&#39; &lt;FunctionToPointerDecay&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        \`-DeclRefExpr 0x7fc67188c878 &lt;col:5&gt; &#39;void ()&#39; lvalue Function 0x7fc67188c0e8 &#39;testPrintEnv&#39; &#39;void ()&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p><img alt="image-20230408204553188" data-src="img/image-20230408204553188.png" loading="lazy" class="lazy"></p><h2 id="如何修改源代码" tabindex="-1">如何修改源代码 <a class="header-anchor" href="#如何修改源代码" aria-label="Permalink to &quot;如何修改源代码&quot;">​</a></h2><p>简单的是Fix,</p><p>用<strong>Replacement</strong></p>`,40),t=[p];function o(c,r,i,y,C,D){return a(),n("div",null,t)}const A=s(e,[["render",o]]);export{u as __pageData,A as default};
