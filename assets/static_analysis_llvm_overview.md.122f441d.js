import{_ as s,c as n,o as a,N as l}from"./chunks/framework.3a9190c5.js";const F=JSON.parse('{"title":"llvm overview","description":"","frontmatter":{"title":"llvm overview","date":"2023-03-17T03:57:03.000Z","draft":false,"tags":["android","静态分析"],"series":["静态分析"],"categories":["技术相关"]},"headers":[],"relativePath":"static_analysis/llvm_overview.md"}'),p={name:"static_analysis/llvm_overview.md"},e=l(`<h2 id="clang-check" tabindex="-1">clang-check <a class="header-anchor" href="#clang-check" aria-label="Permalink to &quot;clang-check&quot;">​</a></h2><p>如何打印ast</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//min.c</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">min</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">a </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">　　  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>运行<code> clang-check min.c -ast-dump --</code></p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">TranslationUnitDecl 0x7f7d66822408 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7f7d66822c30 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __int128_t &#39;__int128&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-BuiltinType 0x7f7d668229d0 &#39;__int128&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7f7d66822ca0 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __uint128_t &#39;unsigned __int128&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-BuiltinType 0x7f7d668229f0 &#39;unsigned __int128&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7f7d66822fa8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __NSConstantString &#39;struct __NSConstantString_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-RecordType 0x7f7d66822d80 &#39;struct __NSConstantString_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   \`-Record 0x7f7d66822cf8 &#39;__NSConstantString_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7f7d66823040 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_ms_va_list &#39;char *&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-PointerType 0x7f7d66823000 &#39;char *&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|   \`-BuiltinType 0x7f7d668224b0 &#39;char&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|-TypedefDecl 0x7f7d66823338 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_va_list &#39;struct __va_list_tag[1]&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">| \`-ConstantArrayType 0x7f7d668232e0 &#39;struct __va_list_tag[1]&#39; 1</span></span>
<span class="line"><span style="color:#A6ACCD;">|   \`-RecordType 0x7f7d66823120 &#39;struct __va_list_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">|     \`-Record 0x7f7d66823098 &#39;__va_list_tag&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">\`-FunctionDecl 0x7f7d66848760 &lt;/Users/bai/dev/llvm/example/min.c:1:1, line:5:1&gt; line:1:5 min &#39;int (int, int)&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  |-ParmVarDecl 0x7f7d66848600 &lt;col:9, col:13&gt; col:13 used a &#39;int&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  |-ParmVarDecl 0x7f7d66848680 &lt;col:16, col:20&gt; col:20 used b &#39;int&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  \`-CompoundStmt 0x7f7d66848998 &lt;col:23, line:5:1&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-IfStmt 0x7f7d66848930 &lt;line:2:3, line:3:16&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    | |-BinaryOperator 0x7f7d668488c8 &lt;line:2:7, col:11&gt; &#39;int&#39; &#39;&lt;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    | | |-ImplicitCastExpr 0x7f7d66848898 &lt;col:7&gt; &#39;int&#39; &lt;LValueToRValue&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    | | | \`-DeclRefExpr 0x7f7d66848858 &lt;col:7&gt; &#39;int&#39; lvalue ParmVar 0x7f7d66848600 &#39;a&#39; &#39;int&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    | | \`-ImplicitCastExpr 0x7f7d668488b0 &lt;col:11&gt; &#39;int&#39; &lt;LValueToRValue&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    | |   \`-DeclRefExpr 0x7f7d66848878 &lt;col:11&gt; &#39;int&#39; lvalue ParmVar 0x7f7d66848680 &#39;b&#39; &#39;int&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    | \`-ReturnStmt 0x7f7d66848920 &lt;line:3:9, col:16&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   \`-ImplicitCastExpr 0x7f7d66848908 &lt;col:16&gt; &#39;int&#39; &lt;LValueToRValue&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    |     \`-DeclRefExpr 0x7f7d668488e8 &lt;col:16&gt; &#39;int&#39; lvalue ParmVar 0x7f7d66848600 &#39;a&#39; &#39;int&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    \`-ReturnStmt 0x7f7d66848988 &lt;line:4:3, col:10&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      \`-ImplicitCastExpr 0x7f7d66848970 &lt;col:10&gt; &#39;int&#39; &lt;LValueToRValue&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        \`-DeclRefExpr 0x7f7d66848950 &lt;col:10&gt; &#39;int&#39; lvalue ParmVar 0x7f7d66848680 &#39;b&#39; &#39;int&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="llvm-ir的attribute有啥用" tabindex="-1">LLVM IR的attribute有啥用? <a class="header-anchor" href="#llvm-ir的attribute有啥用" aria-label="Permalink to &quot;LLVM IR的attribute有啥用?&quot;">​</a></h2><h3 id="readnone-attribute" tabindex="-1">readnone attribute <a class="header-anchor" href="#readnone-attribute" aria-label="Permalink to &quot;readnone attribute&quot;">​</a></h3><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">//bar();</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">)+</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>foo中的两次add,可以合并么?</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">; Function Attrs:norecurse nounwind readnone uwtable willreturn mustprogress</span></span>
<span class="line"><span style="color:#A6ACCD;">define dso_local i32 @_Z3fooii(i32 %x, i32 %y)</span></span>
<span class="line"><span style="color:#A6ACCD;">local_unnamed_addr #1 {</span></span>
<span class="line"><span style="color:#A6ACCD;">entry:</span></span>
<span class="line"><span style="color:#A6ACCD;">%call = tail call i32 @_Z3addii(i32 %x, i32 %y)</span></span>
<span class="line"><span style="color:#A6ACCD;">%add = shl nsw i32 %call, 1</span></span>
<span class="line"><span style="color:#A6ACCD;">ret i32 %add</span></span>
<span class="line"><span style="color:#A6ACCD;">3</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>因为add有readone attribute,表示:Function does not access memory 所有,可以合并.</p><h2 id="lto-link-time-optimization" tabindex="-1">LTO Link Time Optimization <a class="header-anchor" href="#lto-link-time-optimization" aria-label="Permalink to &quot;LTO Link Time Optimization&quot;">​</a></h2><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//a.h</span></span>
<span class="line"><span style="color:#C792EA;">extern</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fool</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">extern</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo2</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">extern</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo4</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//a.c</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">signed</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo2</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">){</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo3</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#82AAFF;">foo4</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fool</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">	data</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">foo3</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">data </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> data </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo4</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hi</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo1</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果支持LTO,考虑到foo2根本不会被调用,那么推出i永远为0, 所以foo1经过优化以后:</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo1</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是代价确实大,要对整个可执行程序将进行整体优化.</p><h3 id="bolt-binary-optimization-and-layout-tool" tabindex="-1">BOLT Binary Optimization and Layout Tool <a class="header-anchor" href="#bolt-binary-optimization-and-layout-tool" aria-label="Permalink to &quot;BOLT Binary Optimization and Layout  Tool&quot;">​</a></h3><p>让二进制code布局更合理,让cpu的指令预测更有效率.</p><h2 id="tools" tabindex="-1">tools <a class="header-anchor" href="#tools" aria-label="Permalink to &quot;tools&quot;">​</a></h2><h3 id="编译期" tabindex="-1">编译期 <a class="header-anchor" href="#编译期" aria-label="Permalink to &quot;编译期&quot;">​</a></h3><ul><li>clang-tidy</li></ul><p>不会执行数据流分析和符号执行的能力,主要是做一些语法层级的一些代码规范的检查.</p><ul><li>Clang-rename</li><li>clangd</li><li>modularize</li><li>pseudo</li><li></li></ul><h3 id="运行期" tabindex="-1">运行期 <a class="header-anchor" href="#运行期" aria-label="Permalink to &quot;运行期&quot;">​</a></h3><ul><li>addresssanitizer</li><li>Threadsanitizer data race condition</li><li>undefinedbehaviorsanitizer 未定义行为</li><li>memorysanitizer 未初始化的检测</li><li>leaksanitizer 检测内存泄漏</li><li>dataflowsanitizer 基于llvm的污点传播框架,用户需要自己特定的使用场景来定义一些source,sink,sanitizer</li><li>Memprof</li></ul><h2 id="llvm-开发资料来源" tabindex="-1">LLVM 开发资料来源: <a class="header-anchor" href="#llvm-开发资料来源" aria-label="Permalink to &quot;LLVM 开发资料来源:&quot;">​</a></h2><ul><li>reviews.llvm.org 有特性的实现细节和说明</li><li>llvm’s developers’ meeting 有很好的视频教程</li><li>单元测试</li></ul>`,29),o=[e];function t(r,c,i,y,D,d){return a(),n("div",null,o)}const C=s(p,[["render",t]]);export{F as __pageData,C as default};
