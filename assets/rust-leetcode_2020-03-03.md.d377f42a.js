import{_ as n,c as s,o as a,a as p}from"./app.577f36ad.js";const m='{"title":"684. \u5197\u4F59\u8FDE\u63A5","description":"","frontmatter":{"title":"684. \u5197\u4F59\u8FDE\u63A5","date":"2020-03-02T19:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["\u6280\u672F\u76F8\u5173"],"plugins":["viz"]},"headers":[{"level":2,"title":"\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2020-03-03)","slug":"\u6BCF\u5929\u4E00\u9053rust-leetcode-2020-03-03"},{"level":2,"title":"\u9898\u76EE\u63CF\u8FF0","slug":"\u9898\u76EE\u63CF\u8FF0"},{"level":2,"title":"\u89E3\u9898\u601D\u8DEF","slug":"\u89E3\u9898\u601D\u8DEF"},{"level":2,"title":"\u89E3\u9898\u8FC7\u7A0B","slug":"\u89E3\u9898\u8FC7\u7A0B"},{"level":2,"title":"\u4E00\u70B9\u611F\u609F","slug":"\u4E00\u70B9\u611F\u609F"},{"level":3,"title":"\u9519\u8BEF\u7684\u601D\u8DEF","slug":"\u9519\u8BEF\u7684\u601D\u8DEF"},{"level":3,"title":"\u9519\u8BEF\u7684\u6E90\u7801","slug":"\u9519\u8BEF\u7684\u6E90\u7801"},{"level":2,"title":"\u5176\u4ED6","slug":"\u5176\u4ED6"}],"relativePath":"rust-leetcode/2020-03-03.md"}',t={},e=p(`<h2 id="\u6BCF\u5929\u4E00\u9053rust-leetcode-2020-03-03" tabindex="-1">\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2020-03-03) <a class="header-anchor" href="#\u6BCF\u5929\u4E00\u9053rust-leetcode-2020-03-03" aria-hidden="true">#</a></h2><p>\u575A\u6301\u6BCF\u5929\u4E00\u9053\u9898,\u5237\u9898\u5B66\u4E60Rust.</p><h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1">\u9898\u76EE\u63CF\u8FF0 <a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a></h2><p>\u5728\u672C\u95EE\u9898\u4E2D, \u6811\u6307\u7684\u662F\u4E00\u4E2A\u8FDE\u901A\u4E14\u65E0\u73AF\u7684\u65E0\u5411\u56FE\u3002</p><p>\u8F93\u5165\u4E00\u4E2A\u56FE\uFF0C\u8BE5\u56FE\u7531\u4E00\u4E2A\u6709\u7740N\u4E2A\u8282\u70B9 (\u8282\u70B9\u503C\u4E0D\u91CD\u590D1, 2, ..., N) \u7684\u6811\u53CA\u4E00\u6761\u9644\u52A0\u7684\u8FB9\u6784\u6210\u3002\u9644\u52A0\u7684\u8FB9\u7684\u4E24\u4E2A\u9876\u70B9\u5305\u542B\u57281\u5230N\u4E2D\u95F4\uFF0C\u8FD9\u6761\u9644\u52A0\u7684\u8FB9\u4E0D\u5C5E\u4E8E\u6811\u4E2D\u5DF2\u5B58\u5728\u7684\u8FB9\u3002</p><p>\u7ED3\u679C\u56FE\u662F\u4E00\u4E2A\u4EE5\u8FB9\u7EC4\u6210\u7684\u4E8C\u7EF4\u6570\u7EC4\u3002\u6BCF\u4E00\u4E2A\u8FB9\u7684\u5143\u7D20\u662F\u4E00\u5BF9[u, v]\xA0\uFF0C\u6EE1\u8DB3\xA0u &lt; v\uFF0C\u8868\u793A\u8FDE\u63A5\u9876\u70B9u\xA0\u548Cv\u7684\u65E0\u5411\u56FE\u7684\u8FB9\u3002</p><p>\u8FD4\u56DE\u4E00\u6761\u53EF\u4EE5\u5220\u53BB\u7684\u8FB9\uFF0C\u4F7F\u5F97\u7ED3\u679C\u56FE\u662F\u4E00\u4E2A\u6709\u7740N\u4E2A\u8282\u70B9\u7684\u6811\u3002\u5982\u679C\u6709\u591A\u4E2A\u7B54\u6848\uFF0C\u5219\u8FD4\u56DE\u4E8C\u7EF4\u6570\u7EC4\u4E2D\u6700\u540E\u51FA\u73B0\u7684\u8FB9\u3002\u7B54\u6848\u8FB9\xA0[u, v] \u5E94\u6EE1\u8DB3\u76F8\u540C\u7684\u683C\u5F0F\xA0u &lt; v\u3002</p><p>\u793A\u4F8B 1\uFF1A</p><p>\u8F93\u5165: [[1,2], [1,3], [2,3]] \u8F93\u51FA: [2,3] \u89E3\u91CA: \u7ED9\u5B9A\u7684\u65E0\u5411\u56FE\u4E3A: 1 / <br> 2 - 3 \u793A\u4F8B 2\uFF1A</p><p>\u8F93\u5165: [[1,2], [2,3], [3,4], [1,4], [1,5]] \u8F93\u51FA: [1,4] \u89E3\u91CA: \u7ED9\u5B9A\u7684\u65E0\u5411\u56FE\u4E3A: 5 - 1 - 2 | | 4 - 3 \u6CE8\u610F:</p><p>\u8F93\u5165\u7684\u4E8C\u7EF4\u6570\u7EC4\u5927\u5C0F\u5728 3 \u5230 1000\u3002 \u4E8C\u7EF4\u6570\u7EC4\u4E2D\u7684\u6574\u6570\u57281\u5230N\u4E4B\u95F4\uFF0C\u5176\u4E2DN\u662F\u8F93\u5165\u6570\u7EC4\u7684\u5927\u5C0F\u3002 \u66F4\u65B0(2017-09-26): \u6211\u4EEC\u5DF2\u7ECF\u91CD\u65B0\u68C0\u67E5\u4E86\u95EE\u9898\u63CF\u8FF0\u53CA\u6D4B\u8BD5\u7528\u4F8B\uFF0C\u660E\u786E\u56FE\u662F\u65E0\u5411\xA0\u56FE\u3002\u5BF9\u4E8E\u6709\u5411\u56FE\u8BE6\u89C1\u5197\u4F59\u8FDE\u63A5II\u3002\u5BF9\u4E8E\u9020\u6210\u4EFB\u4F55\u4E0D\u4FBF\uFF0C\u6211\u4EEC\u6DF1\u611F\u6B49\u610F\u3002</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1A<a href="https://leetcode-cn.com/problems/redundant-connection" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/redundant-connection</a> \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1">\u89E3\u9898\u601D\u8DEF <a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a></h2><p>\u5E76\u67E5\u96C6 \u5982\u679C\u65B0\u8FDB\u6765\u7684\u8FB9\u8FDE\u63A5\u7684\u4E24\u4E2A\u8282\u70B9\u5DF2\u7ECF\u5728\u96C6\u5408\u4E2D,\u90A3\u4E48\u4ED6\u5C31\u662F\u5197\u4F59\u7684. \u6309\u7167\u987A\u5E8F\u52A0\u5165\u8FB9,\u4FDD\u8BC1\u8FD4\u56DE\u7684\u662F\u6700\u540E\u51FA\u73B0\u7684\u8FB9 \u7A7A\u95F4\u590D\u6742\u5EA6: O(N) \u65F6\u95F4\u590D\u6742\u5EA6: \u4E5F\u662FO(N),\u4E00\u6761\u8FB9\u6700\u591A\u8D70\u4E24\u8FB9.</p><h2 id="\u89E3\u9898\u8FC7\u7A0B" tabindex="-1">\u89E3\u9898\u8FC7\u7A0B <a class="header-anchor" href="#\u89E3\u9898\u8FC7\u7A0B" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Solution</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">DSU</span> <span class="token punctuation">{</span>
    pre<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token constant">DSU</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>pre<span class="token punctuation">[</span>x <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token punctuation">{</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// let prex = self.pre[x];</span>
        <span class="token keyword">let</span> prex <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>pre<span class="token punctuation">[</span>x <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//\u56E0\u4E3A\u9012\u5F52,\u8FD9\u91CC\u4F1A\u628A\u4E00\u4E32\u4E0A\u9762\u7684\u6240\u6709\u8DEF\u5F84\u90FD\u538B\u7F29\u4E86,</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>pre<span class="token punctuation">[</span>x <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token operator">=</span> prex<span class="token punctuation">;</span>
        <span class="token keyword">return</span> prex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8FD4\u56DEfalse,\u8BF4\u660Ex,y\u5728\u540C\u4E00\u4E2A\u96C6\u5408\u91CC</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">merge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> prex <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> prey <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> prex <span class="token operator">==</span> prey <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u6CE8\u610F\u8FD9\u91CC\u662F\u8BBE\u7F6E\u7684\u662Fprex\u7684parent,\u800C\u4E0D\u662Fx\u7684parent</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>pre<span class="token punctuation">[</span>prex <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">find_redundant_connection</span><span class="token punctuation">(</span>edges<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> dsu <span class="token operator">=</span> <span class="token constant">DSU</span> <span class="token punctuation">{</span> pre<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>edges<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            dsu<span class="token punctuation">.</span>pre<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u6309\u7167\u5E76\u67E5\u96C6\u7684\u89C4\u5219,\u628A\u6240\u6709\u7684\u8FB9\u90FD\u653E\u5728\u4E00\u4E2A\u96C6\u5408\u4E2D,\u56E0\u4E3A\u53EA\u6709\u4E00\u6761\u5197\u4F59\u7684\u8FB9</span>
        <span class="token comment">//\u5982\u679C\u91CD\u590D\u653E\u7F6E,\u90A3\u5C31\u662F\u5B83\u4E86.</span>
        <span class="token keyword">for</span> e <span class="token keyword">in</span> edges<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// println!(&quot;edge={:?}&quot;, e);</span>
            <span class="token keyword">if</span> <span class="token operator">!</span>dsu<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">test</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> edges <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">find_redundant_connection</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> edges <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">find_redundant_connection</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><h2 id="\u4E00\u70B9\u611F\u609F" tabindex="-1">\u4E00\u70B9\u611F\u609F <a class="header-anchor" href="#\u4E00\u70B9\u611F\u609F" aria-hidden="true">#</a></h2><p>\u4E00\u5F00\u59CB\u5E76\u6CA1\u6709\u60F3\u5230\u4F7F\u7528\u5E76\u67E5\u96C6,\u4F7F\u7528\u7684\u662Fset\u4E4B\u7C7B\u7684\u5DE5\u5177,\u4F46\u662F\u8D70\u5230\u6700\u540E\u53D1\u73B0\u6B64\u8DEF\u4E0D\u901A,\u65E0\u6CD5\u5728O(NLogN)\u89E3\u51FA\u6765. \u8FD9\u91CC\u5199\u51FA\u6765\u4E5F\u662F\u4F9B\u81EA\u5DF1\u4EE5\u540E\u5F15\u4EE5\u4E3A\u6212, \u5DE7\u5999\u7684\u6570\u636E\u7ED3\u6784,\u7ED9\u51FA\u7684\u65B9\u6CD5\u662F\u65E2\u7701\u65F6\u95F4\u53C8\u7701\u7A7A\u95F4.</p><h3 id="\u9519\u8BEF\u7684\u601D\u8DEF" tabindex="-1">\u9519\u8BEF\u7684\u601D\u8DEF <a class="header-anchor" href="#\u9519\u8BEF\u7684\u601D\u8DEF" aria-hidden="true">#</a></h3><p>\u7EDF\u8BA1\u6BCF\u4E2A\u8282\u70B9\u7684\u5165\u5EA6,\u7136\u540E\u6309\u7167\u5165\u5EA6\u6392\u5E8F 0\u7684\u662F\u5B64\u7ACB\u70B9 1\u7684\u662F\u6811\u7684\u5B9A\u70B9 \u7136\u540E\u5E7F\u5EA6\u4F18\u5148\u904D\u5386,\u5982\u679C\u78B0\u5230\u904D\u5386\u8FC7\u7684\u70B9\u4E8C\u6B21\u904D\u5386,\u8BF4\u660E\u8BE5\u8FB9\u662F\u5197\u4F59\u7684 \u8003\u8651\u4E00\u4E2A\u95EE\u9898: [1,4] \u5728\u8FD9\u8FC7\u7A0B\u4E2D\u6211\u4EEC\u8981\u786E\u5B9A\u8F93\u51FA\u7684\u662F[1,4]\u800C\u4E0D\u662F[4,1]</p><p>\u7A7A\u95F4\u590D\u6742\u5EA6\u5206\u6790: O(N) ,\u56E0\u4E3Amutable\u7684\u95EE\u9898,\u4E2D\u95F4\u4F7F\u7528\u4E86clone,\u53EF\u4EE5\u4F7F\u7528unsafe\u7ED5\u5F00 \u65F6\u95F4\u590D\u6742\u5EA6: \u56E0\u4E3A\u8FB9\u7684\u4E2A\u6570\u548C\u5B9A\u70B9\u7684\u4E2A\u6570\u662F\u4E00\u81F4\u7684,\u6240\u4EE5 \u662FO(NLogN) \u7B2C\u4E00\u6B65\u5EFA\u56FE\u662FO(NLogN),\u6700\u540E\u4E00\u6B65\u904D\u5386\u4E5F\u662FO(NLogN),\u8981\u5220\u9664</p><p>\u6B64\u65B9\u6CD5\u5931\u8D25: \u56E0\u4E3A\u65E0\u6CD5\u6EE1\u8DB3\u9898\u76EE\u4E2D\u7684\u4E00\u6761\u89C4\u5219: \u5982\u679C\u6709\u591A\u4E2A\u7B54\u6848,\u5219\u8FD4\u56DE\u4E8C\u7EF4\u6570\u7EC4\u4E2D\u6700\u540E\u51FA\u73B0\u7684\u8FB9.</p><h3 id="\u9519\u8BEF\u7684\u6E90\u7801" tabindex="-1">\u9519\u8BEF\u7684\u6E90\u7801 <a class="header-anchor" href="#\u9519\u8BEF\u7684\u6E90\u7801" aria-hidden="true">#</a></h3><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Solution</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span>
<span class="token attribute attr-name">#[derive(Default, Clone, Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">NodeInfo</span> <span class="token punctuation">{</span>
    in_bounds<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    children<span class="token punctuation">:</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">find_redundant_connection</span><span class="token punctuation">(</span>edges<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//\u591A1\u662F\u7B80\u5316\u5904\u7406,\u5FFD\u7565\u4E0B\u68070</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> nodes<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">NodeInfo</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> edges<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> e <span class="token keyword">in</span> edges<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> n <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            n<span class="token punctuation">.</span>in_bounds <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            n<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> n2 <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            n2<span class="token punctuation">.</span>in_bounds <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            n2<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// nodes.sort_by(|n1, n2| n1.in_bounds.cmp(n2.in_bounds));</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> set <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">;</span> edges<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> queue <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token keyword">in</span> nodes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> n<span class="token punctuation">.</span>in_bounds <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
                set<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pos <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> pos <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> v <span class="token operator">=</span> queue<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> n <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span>v <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;v={},n={:?}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> c <span class="token keyword">in</span> n<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> set<span class="token punctuation">[</span>c<span class="token number">.0</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> c<span class="token number">.1</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>c<span class="token number">.0</span><span class="token punctuation">,</span> v<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> c<span class="token number">.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    set<span class="token punctuation">[</span>c<span class="token number">.0</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//\u4E00\u6761\u8FB9\u4E0D\u8981\u91CD\u590D\u8BA1\u7B97</span>
                    nodes<span class="token punctuation">[</span>c<span class="token number">.0</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">!</span>c<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            pos <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;must found&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h2 id="\u5176\u4ED6" tabindex="-1">\u5176\u4ED6 <a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a></h2><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u7684<a href="https://github.com/nkbai/rust-leetcode" target="_blank" rel="noopener noreferrer">github</a>,\u672C\u9879\u76EE\u6587\u7AE0\u6240\u6709\u4EE3\u7801\u90FD\u53EF\u4EE5\u627E\u5230.</p>`,26),o=[e];function c(l,u,k,r,i,b){return a(),s("div",null,o)}var y=n(t,[["render",c]]);export{m as __pageData,y as default};
