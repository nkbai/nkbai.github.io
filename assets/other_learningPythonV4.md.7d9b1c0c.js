import{_ as s,c as n,o as a,N as l}from"./chunks/framework.3a9190c5.js";const C=JSON.parse('{"title":"learningPythonV4","description":"","frontmatter":{"title":"learningPythonV4","date":"2018-10-08T09:48:12.000Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"other/learningPythonV4.md"}'),p={name:"other/learningPythonV4.md"},o=l(`<h1 id="python学习手册第四版学习笔记" tabindex="-1">python学习手册第四版学习笔记 <a class="header-anchor" href="#python学习手册第四版学习笔记" aria-label="Permalink to &quot;python学习手册第四版学习笔记&quot;">​</a></h1><h2 id="基础部分" tabindex="-1">基础部分 <a class="header-anchor" href="#基础部分" aria-label="Permalink to &quot;基础部分&quot;">​</a></h2><h3 id="_1-list" tabindex="-1">1. list <a class="header-anchor" href="#_1-list" aria-label="Permalink to &quot;1. list&quot;">​</a></h3><p><img alt="列表" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121746356-1567322406.png" loading="lazy" class="lazy"></p><h3 id="_2-字典" tabindex="-1">2. 字典 <a class="header-anchor" href="#_2-字典" aria-label="Permalink to &quot;2. 字典&quot;">​</a></h3><p><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121814420-1078075977.png" loading="lazy" class="lazy"></p><h3 id="_3-python的类型层次" tabindex="-1">3.python的类型层次 <a class="header-anchor" href="#_3-python的类型层次" aria-label="Permalink to &quot;3.python的类型层次&quot;">​</a></h3><p><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121837926-1026810780.png" loading="lazy" class="lazy"></p><h3 id="_4-python运算符重载" tabindex="-1">4. python运算符重载 <a class="header-anchor" href="#_4-python运算符重载" aria-label="Permalink to &quot;4. python运算符重载&quot;">​</a></h3><p><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121906516-924222475.png" loading="lazy" class="lazy"><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121917580-1602821280.png" loading="lazy" class="lazy"></p><h2 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h2><ol><li>__slots属性 类中的这个属性主要是用来限制类的实例不能任意新增属性,只有在列表中的有效, 如果想制定了slots属性以后,实例还可以新增属性,可以按照下面的方式来写</li></ol><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">D</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    __slots__  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__dict__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>装饰器 装饰器都是一个类,每次使用,都相当于一次实例化. 比如</li></ol><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">tracer</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">func</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">calls</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> func</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__call__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">calls</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">call </span><span style="color:#F78C6C;">%s</span><span style="color:#C3E88D;"> to </span><span style="color:#F78C6C;">%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">%</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">calls</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__name__</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">(*</span><span style="color:#82AAFF;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">tracer</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spam</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> b</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> c</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#等效代码</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spam</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">spam</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">tracer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">spam</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因此spam(3,4,5)调用实际上调用的是tracer实例的__call__</p><ol start="3"><li>描述符 因为Python是一个动态类型解释性语言，不像C/C++等静态编译型语言，数据类型在编译时便可以进行验证，而Python中必须添加额外的类型检查逻辑代码才能做到这一点，这就是描述符的初衷。比如，有一个测试类Test，其具有一个类属性name。</li></ol><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name_des</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">__name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">__get__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">owner</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">call __get__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">__name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">__set__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">call __set__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">isinstance</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">__name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> value</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">raise</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TypeError</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Must be an string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">name_des</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>那么执行t.name=3将会报错,这就是描述符的作用,</p><ol start="4"><li>属性查找设置伪代码</li></ol><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">__getattribute__伪代码：</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">__getattribute__</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">property</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> logic</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#先在类(包括父类、祖先类)的__dict__属性中查找描述符</span></span>
<span class="line"><span style="color:#A6ACCD;">  descripter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> find first descripter </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> bases</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s dict(property)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> descripter</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">#如果找到属性并且是数据描述符，就直接调用该数据描述符的__get__方法并将结果返回</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> descripter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">__get__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__class__</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">#如果没有找到或者不是数据描述符，就去实例的__dict__属性中查找属性，如果找到了就直接返回这个属性值</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__dict__</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> value</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">#程序执行到这里，说明没有数据描述符和实例属性，则在类(父类、祖先类)的__dict__属性中查找非数据描述符</span></span>
<span class="line"><span style="color:#A6ACCD;">      value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> find first value </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> bases</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s dict(property)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> a function</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">#如果找到了并且这个属性是一个函数，就返回绑定后的函数</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> bounded </span><span style="color:#82AAFF;">function</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">#否则就直接返回这个属性值</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> value</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#程序执行到这里说明没有找到该属性，引发异常，__getattr__函数会被调用</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">raise</span><span style="color:#A6ACCD;"> AttributeNotFundedException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> __setattr__伪代码：</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__setattr__</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">property</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">logic</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#先在类(包括父类、祖先类)的__dict__属性中查找描述符</span></span>
<span class="line"><span style="color:#A6ACCD;"> descripter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> find first descripter </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> bases</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s dict(property)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> descripter</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">#如果找到了且是数据描述符，就调用描述符的__set__方法</span></span>
<span class="line"><span style="color:#A6ACCD;">     descripter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">__set__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">#否则就是给实例属性赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">     instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__dict__</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">property</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> value</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ol start="5"><li>property</li></ol><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">　</span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">　　self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">__x</span><span style="color:#89DDFF;">=None</span></span>
<span class="line"><span style="color:#A6ACCD;">　</span></span>
<span class="line"><span style="color:#A6ACCD;">　</span><span style="color:#89DDFF;">@</span><span style="color:#FFCB6B;">property</span></span>
<span class="line"><span style="color:#A6ACCD;">　</span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">　　</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">__x</span></span>
<span class="line"><span style="color:#A6ACCD;">　</span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setter</span></span>
<span class="line"><span style="color:#A6ACCD;">　</span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">　　self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">__x</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#A6ACCD;">　</span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deleter</span></span>
<span class="line"><span style="color:#A6ACCD;">　</span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">　　</span><span style="color:#89DDFF;font-style:italic;">del</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">__x</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>用例</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#会调用def x(self)</span></span>
<span class="line"><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">x</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#会调用def x(self,value)</span></span>
<span class="line"><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#会调用def x(self)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">del</span><span style="color:#A6ACCD;"> t</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">x</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,26),e=[o];function t(c,r,y,D,F,i){return a(),n("div",null,e)}const b=s(p,[["render",t]]);export{C as __pageData,b as default};
