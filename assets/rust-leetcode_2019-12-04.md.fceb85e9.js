import{_ as n,c as s,o as a,a as p}from"./app.1b76eb5d.js";const d='{"title":"438. \u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD","description":"","frontmatter":{"title":"438. \u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD","date":"2019-12-03T19:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["\u6280\u672F\u76F8\u5173"],"plugins":["viz"]},"headers":[{"level":2,"title":"\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-12-04)","slug":"\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-12-04"},{"level":2,"title":"\u9898\u76EE\u63CF\u8FF0","slug":"\u9898\u76EE\u63CF\u8FF0"},{"level":2,"title":"\u89E3\u9898\u601D\u8DEF","slug":"\u89E3\u9898\u601D\u8DEF"},{"level":2,"title":"\u89E3\u9898\u8FC7\u7A0B","slug":"\u89E3\u9898\u8FC7\u7A0B"},{"level":2,"title":"\u4E00\u70B9\u611F\u609F","slug":"\u4E00\u70B9\u611F\u609F"},{"level":2,"title":"\u5176\u4ED6","slug":"\u5176\u4ED6"}],"relativePath":"rust-leetcode/2019-12-04.md"}',t={},e=p(`<h2 id="\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-12-04" tabindex="-1">\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-12-04) <a class="header-anchor" href="#\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-12-04" aria-hidden="true">#</a></h2><p>\u575A\u6301\u6BCF\u5929\u4E00\u9053\u9898,\u5237\u9898\u5B66\u4E60Rust.</p><h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1">\u9898\u76EE\u63CF\u8FF0 <a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a></h2><p>\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32\xA0s\xA0\u548C\u4E00\u4E2A\u975E\u7A7A\u5B57\u7B26\u4E32\xA0p\uFF0C\u627E\u5230\xA0s\xA0\u4E2D\u6240\u6709\u662F\xA0p\xA0\u7684\u5B57\u6BCD\u5F02\u4F4D\u8BCD\u7684\u5B50\u4E32\uFF0C\u8FD4\u56DE\u8FD9\u4E9B\u5B50\u4E32\u7684\u8D77\u59CB\u7D22\u5F15\u3002</p><p>\u5B57\u7B26\u4E32\u53EA\u5305\u542B\u5C0F\u5199\u82F1\u6587\u5B57\u6BCD\uFF0C\u5E76\u4E14\u5B57\u7B26\u4E32\xA0s\xA0\u548C p\xA0\u7684\u957F\u5EA6\u90FD\u4E0D\u8D85\u8FC7 20100\u3002</p><p>\u8BF4\u660E\uFF1A</p><p>\u5B57\u6BCD\u5F02\u4F4D\u8BCD\u6307\u5B57\u6BCD\u76F8\u540C\uFF0C\u4F46\u6392\u5217\u4E0D\u540C\u7684\u5B57\u7B26\u4E32\u3002 \u4E0D\u8003\u8651\u7B54\u6848\u8F93\u51FA\u7684\u987A\u5E8F\u3002 \u793A\u4F8B\xA01:</p><p>\u8F93\u5165: s: &quot;cbaebabacd&quot; p: &quot;abc&quot;</p><p>\u8F93\u51FA: [0, 6]</p><p>\u89E3\u91CA: \u8D77\u59CB\u7D22\u5F15\u7B49\u4E8E 0 \u7684\u5B50\u4E32\u662F &quot;cba&quot;, \u5B83\u662F &quot;abc&quot; \u7684\u5B57\u6BCD\u5F02\u4F4D\u8BCD\u3002 \u8D77\u59CB\u7D22\u5F15\u7B49\u4E8E 6 \u7684\u5B50\u4E32\u662F &quot;bac&quot;, \u5B83\u662F &quot;abc&quot; \u7684\u5B57\u6BCD\u5F02\u4F4D\u8BCD\u3002 \u793A\u4F8B 2:</p><p>\u8F93\u5165: s: &quot;abab&quot; p: &quot;ab&quot;</p><p>\u8F93\u51FA: [0, 1, 2]</p><p>\u89E3\u91CA: \u8D77\u59CB\u7D22\u5F15\u7B49\u4E8E 0 \u7684\u5B50\u4E32\u662F &quot;ab&quot;, \u5B83\u662F &quot;ab&quot; \u7684\u5B57\u6BCD\u5F02\u4F4D\u8BCD\u3002 \u8D77\u59CB\u7D22\u5F15\u7B49\u4E8E 1 \u7684\u5B50\u4E32\u662F &quot;ba&quot;, \u5B83\u662F &quot;ab&quot; \u7684\u5B57\u6BCD\u5F02\u4F4D\u8BCD\u3002 \u8D77\u59CB\u7D22\u5F15\u7B49\u4E8E 2 \u7684\u5B50\u4E32\u662F &quot;ab&quot;, \u5B83\u662F &quot;ab&quot; \u7684\u5B57\u6BCD\u5F02\u4F4D\u8BCD\u3002</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1A<a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/find-all-anagrams-in-a-string</a> \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1">\u89E3\u9898\u601D\u8DEF <a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a></h2><p>\u601D\u8DEF: \u6B64\u9898\u548C30\u9898\u662F\u57FA\u672C\u662F\u4E00\u6837\u7684 2. p\u4E2D\u7684\u5B57\u7B26\u4E32\u4F1A\u91CD\u590D 3. \u4F7F\u7528map\u6765\u5BF9p\u4E2D\u7684\u6BCF\u4E2A\u5B57\u7B26\u4E32\u8FDB\u884C\u8BA1\u6570\u7EDF\u8BA1 4. \u5BF9s\u4E2D\u7684\u6BCF\u4E2A\u5B57\u7B26\u4F5C\u4E3A\u8D77\u59CB\u8FDB\u884C\u7EDF\u8BA1,\u5982\u679C\u80FD\u8BA9map\u4E2D\u8BA1\u6570\u964D\u4E3A0,\u5219\u627E\u5230\u4E00\u4E2A\u4F4D\u7F6E</p><h2 id="\u89E3\u9898\u8FC7\u7A0B" tabindex="-1">\u89E3\u9898\u8FC7\u7A0B <a class="header-anchor" href="#\u89E3\u9898\u8FC7\u7A0B" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Solution</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Default)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Term</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    <span class="token comment">// p\u4E2D\u67D0\u4E2A\u5B57\u7B26\u51FA\u73B0\u7684\u6B21\u6570</span>
    expect<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token comment">//\u5728\u5339\u914D\u7684\u8FC7\u7A0B\u4E2D\u67D0\u4E2A\u5B57\u7B26\u51FA\u73B0\u7684\u6B21\u6570</span>
<span class="token punctuation">}</span>
<span class="token attribute attr-name">#[derive(Eq, PartialEq)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">ExpectResult</span> <span class="token punctuation">{</span>
    <span class="token class-name">Less</span><span class="token punctuation">,</span>
    <span class="token class-name">Equal</span><span class="token punctuation">,</span>
    <span class="token class-name">Greater</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u7BA1\u7406map</span>
<span class="token keyword">impl</span> <span class="token class-name">Term</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">Term</span> <span class="token punctuation">{</span>
            count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            expect<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">incCount</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">incExpect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ExpectResult</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>expect <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>expect <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ExpectResult</span><span class="token punctuation">::</span><span class="token class-name">Less</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>expect <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ExpectResult</span><span class="token punctuation">::</span><span class="token class-name">Equal</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ExpectResult</span><span class="token punctuation">::</span><span class="token class-name">Greater</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">dec_expect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>expect <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">reset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>expect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">is_match</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token keyword">self</span><span class="token punctuation">.</span>expect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span>hash_map<span class="token punctuation">::</span></span><span class="token class-name">Entry</span><span class="token punctuation">;</span>
<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">find_anagrams</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> m <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> total_count <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> last_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> b <span class="token keyword">in</span> p <span class="token punctuation">{</span>
            m<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token class-name">Term</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">fn</span> <span class="token function-definition function">reset</span><span class="token punctuation">(</span>m<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token class-name">Term</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> last_count<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>last_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            m<span class="token punctuation">.</span><span class="token function">values_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>v<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Term</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
                v<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;i={}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> e <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">match</span> e <span class="token punctuation">{</span>
                <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">//b\u5728p\u4E2D\u5C31\u4E0D\u5B58\u5728, \u76F4\u63A5\u91CD\u6765\u5C31\u884C\u4E86</span>
                    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> m<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> last_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">//\u4ECEb\u5F00\u59CB\u5FAA\u73AF\u5339\u914D,\u76F4\u5230\u5168\u90E8\u5339\u914D\u4F4D\u7F6E</span>
                    <span class="token keyword">let</span> <span class="token keyword">mut</span> cnt <span class="token operator">=</span> last_count<span class="token punctuation">;</span>
                    <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">..</span>s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;j={}&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">let</span> e <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">match</span> e <span class="token punctuation">{</span>
                            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                                <span class="token comment">//\u627E\u5230\u4E0D\u5728p\u4E2D\u7684\u5B57\u7B26,\u76F4\u63A5\u4ECE\u5934\u5F00\u59CB</span>
                                <span class="token function">reset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> m<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> last_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">mut</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                                cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                                <span class="token keyword">let</span> r <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">incExpect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token comment">//\u603B\u6570\u5339\u914D\u4E86,\u5E76\u4E14\u6700\u8FD1\u4E00\u6B21\u6570\u91CF\u521A\u597D\u76F8\u7B49,\u8BF4\u660E\u627E\u5230\u4E86\u4E00\u4E2A\u5B8C\u6574\u5339\u914D</span>
                                <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token class-name">ExpectResult</span><span class="token punctuation">::</span><span class="token class-name">Greater</span> <span class="token punctuation">{</span>
                                    <span class="token comment">//\u6709\u4E00\u4E2A\u5B57\u7B26\u591A\u4E86,\u4ECE\u4E0B\u4E00\u4E2A\u5F00\u59CB\u5339\u914D</span>
                                    i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> cnt <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//\u8FD9\u91CC\u4E0D\u80FD\u662Fi=i+1,\u56E0\u4E3A\u53EF\u80FD\u662F\u4E0A\u4E00\u6B21\u5339\u914D\u4ECE\u800C\u5BFC\u81F4i\u5E76\u6CA1\u6709\u6307\u5411\u8D77\u59CB</span>
                                    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> m<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> last_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                                <span class="token keyword">if</span> cnt <span class="token operator">==</span> total_count <span class="token operator">&amp;&amp;</span> r <span class="token operator">==</span> <span class="token class-name">ExpectResult</span><span class="token punctuation">::</span><span class="token class-name">Equal</span> <span class="token punctuation">{</span>
                                    <span class="token keyword">let</span> start <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token comment">//                                    e2.dec_expect();</span>
                                    m<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;must exist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dec_expect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//\u4ECE\u5F53\u524D\u4F4D\u7F6E\u7EE7\u7EED\u5F80\u4E0B\u5339\u914D,\u53EA\u662F\u628Ai\u4ECEm\u4E2D\u79FB\u9664</span>
                                    last_count <span class="token operator">=</span> total_count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;break to i={}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//\u53EA\u80FD\u4ECE\u4E0B\u4E00\u4E2A\u5F00\u59CB\u5339\u914D</span>
                                <span class="token punctuation">}</span>
                                <span class="token comment">//\u6CA1\u6709\u5339\u914D\u5B8C\u6574\u7684\u60C5\u5F62,\u7EE7\u7EED</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">//\u8D70\u5230\u6700\u540E\u4E86</span>
                    <span class="token comment">//                    panic!(format!(&quot;i={}&quot;, i));</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        v
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">test</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">test_sorted_list_to_bst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">find_anagrams</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">find_anagrams</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abaacbabc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br></div></div><h2 id="\u4E00\u70B9\u611F\u609F" tabindex="-1">\u4E00\u70B9\u611F\u609F <a class="header-anchor" href="#\u4E00\u70B9\u611F\u609F" aria-hidden="true">#</a></h2><p>\u4E00\u5F00\u59CB\u5C31\u8BA4\u4E3A\u5750\u6807i,j\u7684\u8303\u56F4\u662F0\u5230s.len()-p.len(),\u8FD9\u662F\u9519\u7684, i,j\u90FD\u5E94\u8BE5\u8D70\u5230\u6700\u540E</p><h2 id="\u5176\u4ED6" tabindex="-1">\u5176\u4ED6 <a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a></h2><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u7684<a href="https://github.com/nkbai/rust-leetcode" target="_blank" rel="noopener noreferrer">github</a>,\u672C\u9879\u76EE\u6587\u7AE0\u6240\u6709\u4EE3\u7801\u90FD\u53EF\u4EE5\u627E\u5230.</p>`,22),o=[e];function c(l,u,k,r,i,b){return a(),s("div",null,o)}var f=n(t,[["render",c]]);export{d as __pageData,f as default};
