import{o as n,c as s,e as a}from"./app.06ec9772.js";const p='{"title":"mruMap","description":"","frontmatter":{"title":"mruMap","date":"2018-11-21T06:21:40.000Z","draft":false,"markup":"mmark"},"relativePath":"blockchain/btcd/mruMap.md","lastUpdated":1641604782000}',t={},e=[a('<h1 id="比特币中mrumap的实现"><a class="header-anchor" href="#比特币中mrumap的实现" aria-hidden="true">#</a> 比特币中mruMap的实现</h1><p>特性</p><ul><li>带锁,并发访问</li><li>数量有上限</li><li>自动移除最不常用</li></ul><p>主要接口说明:</p><ol><li>Exists 判断某个元素是否存在</li><li>Add 起到添加和标记使用的双重作用</li><li>Delete主动删除</li></ol><p>性能说明: 增删改查都是O(1)</p><ul><li>查用的是Map,接近O(1),</li><li>增删更新,都是用的双向链表List</li></ul><p>其他问题: 要求存储的元素必须能够作为map的key</p><p>参考实现</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// mruNonceMap provides a concurrency safe map that is limited to a maximum</span>\n<span class="token comment">// number of items with eviction for the oldest entry when the limit is</span>\n<span class="token comment">// exceeded.</span>\n<span class="token keyword">type</span> mruNonceMap <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tmtx       sync<span class="token punctuation">.</span>Mutex\n\tnonceMap  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element <span class="token comment">// nearly O(1) lookups</span>\n\tnonceList <span class="token operator">*</span>list<span class="token punctuation">.</span>List               <span class="token comment">// O(1) insert, update, delete</span>\n\tlimit     <span class="token builtin">uint</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Exists returns whether or not the passed nonce is in the map.</span>\n<span class="token comment">//</span>\n<span class="token comment">// This function is safe for concurrent access.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>mruNonceMap<span class="token punctuation">)</span> <span class="token function">Exists</span><span class="token punctuation">(</span>nonce <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n\tm<span class="token punctuation">.</span>mtx<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token boolean">_</span><span class="token punctuation">,</span> exists <span class="token operator">:=</span> m<span class="token punctuation">.</span>nonceMap<span class="token punctuation">[</span>nonce<span class="token punctuation">]</span>\n\tm<span class="token punctuation">.</span>mtx<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">return</span> exists\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Add adds the passed nonce to the map and handles eviction of the oldest item</span>\n<span class="token comment">// if adding the new item would exceed the max limit.  Adding an existing item</span>\n<span class="token comment">// makes it the most recently used item.</span>\n<span class="token comment">//</span>\n<span class="token comment">// This function is safe for concurrent access.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>mruNonceMap<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>nonce <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tm<span class="token punctuation">.</span>mtx<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token keyword">defer</span> m<span class="token punctuation">.</span>mtx<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token comment">// When the limit is zero, nothing can be added to the map, so just</span>\n\t<span class="token comment">// return.</span>\n\t<span class="token keyword">if</span> m<span class="token punctuation">.</span>limit <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// When the entry already exists move it to the front of the list</span>\n\t<span class="token comment">// thereby marking it most recently used.</span>\n\t<span class="token keyword">if</span> node<span class="token punctuation">,</span> exists <span class="token operator">:=</span> m<span class="token punctuation">.</span>nonceMap<span class="token punctuation">[</span>nonce<span class="token punctuation">]</span><span class="token punctuation">;</span> exists <span class="token punctuation">{</span>\n\t\tm<span class="token punctuation">.</span>nonceList<span class="token punctuation">.</span><span class="token function">MoveToFront</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// Evict the least recently used entry (back of the list) if the the new</span>\n\t<span class="token comment">// entry would exceed the size limit for the map.  Also reuse the list</span>\n\t<span class="token comment">// node so a new one doesn&#39;t have to be allocated.</span>\n\t<span class="token keyword">if</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>nonceMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&gt;</span> m<span class="token punctuation">.</span>limit <span class="token punctuation">{</span>\n\t\tnode <span class="token operator">:=</span> m<span class="token punctuation">.</span>nonceList<span class="token punctuation">.</span><span class="token function">Back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\tlru <span class="token operator">:=</span> node<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">)</span>\n\n\t\t<span class="token comment">// Evict least recently used item.</span>\n\t\t<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>nonceMap<span class="token punctuation">,</span> lru<span class="token punctuation">)</span>\n\n\t\t<span class="token comment">// Reuse the list node of the item that was just evicted for the</span>\n\t\t<span class="token comment">// new item.</span>\n\t\tnode<span class="token punctuation">.</span>Value <span class="token operator">=</span> nonce\n\t\tm<span class="token punctuation">.</span>nonceList<span class="token punctuation">.</span><span class="token function">MoveToFront</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n\t\tm<span class="token punctuation">.</span>nonceMap<span class="token punctuation">[</span>nonce<span class="token punctuation">]</span> <span class="token operator">=</span> node\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// The limit hasn&#39;t been reached yet, so just add the new item.</span>\n\tnode <span class="token operator">:=</span> m<span class="token punctuation">.</span>nonceList<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span>\n\tm<span class="token punctuation">.</span>nonceMap<span class="token punctuation">[</span>nonce<span class="token punctuation">]</span> <span class="token operator">=</span> node\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Delete deletes the passed nonce from the map (if it exists).</span>\n<span class="token comment">//</span>\n<span class="token comment">// This function is safe for concurrent access.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>mruNonceMap<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span>nonce <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tm<span class="token punctuation">.</span>mtx<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> node<span class="token punctuation">,</span> exists <span class="token operator">:=</span> m<span class="token punctuation">.</span>nonceMap<span class="token punctuation">[</span>nonce<span class="token punctuation">]</span><span class="token punctuation">;</span> exists <span class="token punctuation">{</span>\n\t\tm<span class="token punctuation">.</span>nonceList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n\t\t<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>nonceMap<span class="token punctuation">,</span> nonce<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\tm<span class="token punctuation">.</span>mtx<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// newMruNonceMap returns a new nonce map that is limited to the number of</span>\n<span class="token comment">// entries specified by limit.  When the number of entries exceeds the limit,</span>\n<span class="token comment">// the oldest (least recently used) entry will be removed to make room for the</span>\n<span class="token comment">// new entry.</span>\n<span class="token keyword">func</span> <span class="token function">newMruNonceMap</span><span class="token punctuation">(</span>limit <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token operator">*</span>mruNonceMap <span class="token punctuation">{</span>\n\tm <span class="token operator">:=</span> mruNonceMap<span class="token punctuation">{</span>\n\t\tnonceMap<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\tnonceList<span class="token punctuation">:</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\tlimit<span class="token punctuation">:</span>     limit<span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token operator">&amp;</span>m\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br></div></div>',10)];t.render=function(a,p,t,o,c,l){return n(),s("div",null,e)};export{p as __pageData,t as default};
