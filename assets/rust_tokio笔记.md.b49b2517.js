import{o as n,c as s,e as a}from"./app.9f1c34e3.js";const p='{"title":"tokio笔记.md","description":"","frontmatter":{"title":"tokio笔记.md","date":"2019-07-03T03:57:03.000Z","draft":false,"tags":["rust"],"categories":["技术相关"]},"headers":[{"level":2,"title":"Future","slug":"future"},{"level":2,"title":"Stream","slug":"stream"},{"level":2,"title":"关于Pin","slug":"关于pin"},{"level":3,"title":"为什么需要Pin","slug":"为什么需要pin"},{"level":3,"title":"如何使用Pin","slug":"如何使用pin"},{"level":2,"title":"tokio runtime","slug":"tokio-runtime"},{"level":2,"title":"自己组合Future","slug":"自己组合future"},{"level":2,"title":"组合工具","slug":"组合工具"}],"relativePath":"rust/tokio笔记.md","lastUpdated":1641604782000}',t={},e=[a('<h2 id="future"><a class="header-anchor" href="#future" aria-hidden="true">#</a> Future</h2><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">//虽然和标准库中的不要太一样,但是更好理解</span>\n<span class="token keyword">trait</span> <span class="token class-name">Future</span> <span class="token punctuation">{</span>\n    <span class="token comment">/// The type of the value returned when the future completes.</span>\n    <span class="token keyword">type</span> <span class="token class-name">Item</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/// The type representing errors that occurred while processing the computation.</span>\n    <span class="token keyword">type</span> <span class="token class-name">Error</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/// The function that will be repeatedly called to see if the future</span>\n    <span class="token comment">/// has completed or not. The `Async` enum can either be `Ready` or</span>\n    <span class="token comment">/// `NotReady` and indicates whether the future is ready to produce</span>\n    <span class="token comment">/// a value or not.</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Async</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>成功的时候返回<code>Ok(Async::Ready(value))</code>,如果没有准备好则返回<code>Async::NotReady</code>.</p><h2 id="stream"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">trait</span> <span class="token class-name">Stream</span> <span class="token punctuation">{</span>\n    <span class="token comment">/// The type of the value yielded by the stream.</span>\n    <span class="token keyword">type</span> <span class="token class-name">Item</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/// The type representing errors that occurred while processing the computation.</span>\n    <span class="token keyword">type</span> <span class="token class-name">Error</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/// The function that will be repeatedly called to see if the stream has</span>\n    <span class="token comment">/// another value it can yield</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>和Future不一样的是他要持续返回数据,所以Ready中又分了Some和None两种情况. 分成四种情况返回:</p><ol><li>Ok(Async::Ready(Some(value))) 表示数据准备好了</li><li>Ok(Async::NotReady) 数据没准备好</li><li>Ok(Async::Ready(None)) 没数据了</li><li>Err(error) 出错了</li></ol><h2 id="关于pin"><a class="header-anchor" href="#关于pin" aria-hidden="true">#</a> 关于Pin</h2><h3 id="为什么需要pin"><a class="header-anchor" href="#为什么需要pin" aria-hidden="true">#</a> 为什么需要Pin</h3><p>async关键字本质上是一个状态机,</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">async</span> <span class="token punctuation">{</span>\n     fut_one<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n     fut_two<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这么一段代码最终会被翻译成如下代码</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">// The `Future` type generated by our `async { ... }` block</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">AsyncFuture</span> <span class="token punctuation">{</span>\n    fut_one<span class="token punctuation">:</span> <span class="token class-name">FutOne</span><span class="token punctuation">,</span>\n    fut_two<span class="token punctuation">:</span> <span class="token class-name">FutTwo</span><span class="token punctuation">,</span>\n    state<span class="token punctuation">:</span> <span class="token class-name">State</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n <span class="token comment">// List of states our `async` block can be in</span>\n<span class="token keyword">enum</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>\n    <span class="token class-name">AwaitingFutOne</span><span class="token punctuation">,</span>\n    <span class="token class-name">AwaitingFutTwo</span><span class="token punctuation">,</span>\n    <span class="token class-name">Done</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n <span class="token keyword">impl</span> <span class="token class-name">AsyncFuture</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n            <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token punctuation">{</span>\n                <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">AwaitingFutOne</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>fut_one<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">AwaitingFutTwo</span><span class="token punctuation">,</span>\n                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span><span class="token punctuation">,</span>\n                <span class="token punctuation">}</span>\n                <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">AwaitingFutTwo</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>fut_two<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Done</span><span class="token punctuation">,</span>\n                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span><span class="token punctuation">,</span>\n                <span class="token punctuation">}</span>\n                <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Done</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>这里面的关键就是如果AsyncFuture包含自引用,那么一旦AsyncFuture被移动,就会导致里面的指针失效.</p><p>比如:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> read_into_buf_fut <span class="token operator">=</span> <span class="token function">read_into_buf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span><span class="token operator">!</span><span class="token punctuation">(</span>read_into_buf_fut<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>被翻译后为:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">ReadIntoBuf</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    buf<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// points to `x` below</span>\n<span class="token punctuation">}</span>\n <span class="token keyword">struct</span> <span class="token type-definition class-name">AsyncFuture</span> <span class="token punctuation">{</span>\n    x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    read_into_buf_fut<span class="token punctuation">:</span> <span class="token class-name">ReadIntoBuf</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;what_lifetime</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因此需要Pin来固定AsyncFuture不被移动.</p><h3 id="如何使用pin"><a class="header-anchor" href="#如何使用pin" aria-hidden="true">#</a> 如何使用Pin</h3><p>分别是Box::pinned和pin_utils::pin_mut!宏.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">pin_utils<span class="token punctuation">::</span></span>pin_mut<span class="token punctuation">;</span> <span class="token comment">// `pin_utils` is a handy crate available on crates.io</span>\n <span class="token comment">// A function which takes a `Future` that implements `Unpin`.</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">execute_unpin_future</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span><span class="token class-name">Output</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token operator">+</span> <span class="token class-name">Unpin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n <span class="token keyword">let</span> fut <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">execute_unpin_future</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: `fut` does not implement `Unpin` trait</span>\n <span class="token comment">// Pinning with `Box`:</span>\n<span class="token keyword">let</span> fut <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> fut <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">pinned</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">execute_unpin_future</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n <span class="token comment">// Pinning with `pin_mut!`:</span>\n<span class="token keyword">let</span> fut <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token macro property">pin_mut!</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">execute_unpin_future</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="tokio-runtime"><a class="header-anchor" href="#tokio-runtime" aria-hidden="true">#</a> tokio runtime</h2><div class="language-"><pre><code>As hinted at earlier, the Rust asynchronous model is very different than that of other languages. Most other languages use a “completion” based model, usually built using some form of callbacks. In this case, when an asynchronous action is started, it is submitted with a function to call once the operation completes. When the process receives the I/O notification from the operating system, it finds the function associated with it and calls it immediately. This is a push based model because the value is pushed into the callback.\n\nThe rust asynchronous model is pull based. Instead of a Future being responsible for pushing the data into a callback, it relies on something else asking if it is complete or not. In the case of Tokio, that something else is the Tokio runtime.\n\nUsing a poll based model offers many advantages, including being a zero cost abstraction, i.e., using Rust futures has no added overhead compared to writing the asynchronous code by hand.\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>pin<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Poll</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token class-name">Future</span> <span class="token punctuation">{</span>\n    <span class="token comment">/// The type of value produced on completion.</span>\n    <span class="token keyword">type</span> <span class="token class-name">Output</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/// Attempt to resolve the future to a final value, registering</span>\n    <span class="token comment">/// the current task for wakeup if the value is not yet available.</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> cx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Output</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>配合Context中的awake,我觉得大多数情况下和push模型差不多啊. 可能是我理解的不深.</p><h2 id="自己组合future"><a class="header-anchor" href="#自己组合future" aria-hidden="true">#</a> 自己组合Future</h2><p>注意这里面的use, 自己写的时候是缺一不可的.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">tokio</span><span class="token punctuation">;</span>\n<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">bytes</span><span class="token punctuation">;</span>\n<span class="token attribute attr-name">#[macro_use]</span>\n<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">futures</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">AsyncWrite</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">TcpStream</span><span class="token punctuation">,</span> <span class="token namespace">tcp<span class="token punctuation">::</span></span><span class="token class-name">ConnectFuture</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">bytes<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Bytes</span><span class="token punctuation">,</span> <span class="token class-name">Buf</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">futures<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Future</span><span class="token punctuation">,</span> <span class="token class-name">Async</span><span class="token punctuation">,</span> <span class="token class-name">Poll</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Cursor</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// HelloWorld has two states, namely waiting to connect to the socket</span>\n<span class="token comment">// and already connected to the socket</span>\n<span class="token keyword">enum</span> <span class="token type-definition class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Connecting</span><span class="token punctuation">(</span><span class="token class-name">ConnectFuture</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Connected</span><span class="token punctuation">(</span><span class="token class-name">TcpStream</span><span class="token punctuation">,</span> <span class="token class-name">Cursor</span><span class="token operator">&lt;</span><span class="token class-name">Bytes</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">Future</span> <span class="token keyword">for</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span> <span class="token class-name">Item</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">type</span> <span class="token class-name">Error</span> <span class="token operator">=</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">use</span> <span class="token keyword">self</span><span class="token punctuation">::</span><span class="token class-name">HelloWorld</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n            <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Connecting</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token keyword">mut</span> f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token macro property">try_ready!</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token class-name">Cursor</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">::</span><span class="token function">from_static</span><span class="token punctuation">(</span><span class="token string">b&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">Connected</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token class-name">Connected</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token keyword">mut</span> socket<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">mut</span> data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// Keep trying to write the buffer to the socket as long as the</span>\n                    <span class="token comment">// buffer has more bytes available for consumption</span>\n                    <span class="token keyword">while</span> data<span class="token punctuation">.</span><span class="token function">has_remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token macro property">try_ready!</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">write_buf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Async</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> addr <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1:1234&quot;</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> connect_future <span class="token operator">=</span> <span class="token class-name">TcpStream</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> hello_world <span class="token operator">=</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">::</span><span class="token class-name">Connecting</span><span class="token punctuation">(</span>connect_future<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Run it, here we map the error since tokio::run expects a Future&lt;Item=(), Error=()&gt;</span>\n    <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">run</span><span class="token punctuation">(</span>hello_world<span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h2 id="组合工具"><a class="header-anchor" href="#组合工具" aria-hidden="true">#</a> 组合工具</h2><p>有点像标准库中的Option,iter等,futures也为Future实现了一些辅助工具</p><ol><li>map</li><li>and_then</li></ol>',32)];t.render=function(a,p,t,o,c,l){return n(),s("div",null,e)};export{p as __pageData,t as default};
