import{o as s,c as n,e as a}from"./app.cf442953.js";const p='{"title":"[9491455]比特币的地址类型","description":"","frontmatter":{"title":"[9491455]比特币的地址类型","date":"2019-05-22T23:47:24.337Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"AddressPubKey","slug":"addresspubkey"},{"level":2,"title":"AddressPubKeyHash","slug":"addresspubkeyhash"},{"level":2,"title":"AddressScriptHash","slug":"addressscripthash"},{"level":2,"title":"AddressWitnessPubKeyHash","slug":"addresswitnesspubkeyhash"},{"level":2,"title":"AddressWitnessScriptHash","slug":"addresswitnessscripthash"},{"level":2,"title":"PayToPubKeyHash","slug":"paytopubkeyhash"},{"level":2,"title":"\\bPayToPubKey","slug":"paytopubkey"},{"level":2,"title":"PayToScriptHash","slug":"paytoscripthash"},{"level":2,"title":"PayToWitnessPubKeyHash","slug":"paytowitnesspubkeyhash"},{"level":2,"title":"PayToWitnessScriptHash","slug":"paytowitnessscripthash"}],"relativePath":"btcd/[9491455]比特币的地址类型.md","lastUpdated":1561507892000}',e={},t=[a('<h1 id="比特币的地址类型"><a class="header-anchor" href="#比特币的地址类型" aria-hidden="true">#</a> 比特币的地址类型</h1><p>这部分内容主要来自于btcutil/address.go</p><p>一直困惑比特币是如何验证交易的,看了这个地质类型算是有点豁然开朗,实际上比特币的交易验证规则还是有点复杂的,它并不像以太坊那么简单明确.</p><p>个人理解,比特币对于交易的处理,首先是根据 pubkey script 判断是什么地址类型,然后进行不同的验证方法. 比如如果地质类型是AddressWitnessPubKeyHash,那么验证规则就明显和 P2PKH 不一样.</p><p>以下是address.go 中如何解析出地址:</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// DecodeAddress decodes the string encoding of an address and returns</span>\n<span class="token comment">// the Address if addr is a valid encoding for a known address type.</span>\n<span class="token comment">//</span>\n<span class="token comment">// The bitcoin network the address is associated with is extracted if possible.</span>\n<span class="token comment">// When the address does not encode the network, such as in the case of a raw</span>\n<span class="token comment">// public key, the address will be associated with the passed defaultNet.</span>\n<span class="token keyword">func</span> <span class="token function">DecodeAddress</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">,</span> defaultNet <span class="token operator">*</span>chaincfg<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">(</span>Address<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// Bech32 encoded segwit addresses start with a human-readable part</span>\n\t<span class="token comment">// (hrp) followed by &#39;1&#39;. For Bitcoin mainnet the hrp is &quot;bc&quot;, and for</span>\n\t<span class="token comment">// testnet it is &quot;tb&quot;. If the address string has a prefix that matches</span>\n\t<span class="token comment">// one of the prefixes for the known networks, we try to decode it as</span>\n\t<span class="token comment">// a segwit address.</span>\n\toneIndex <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">LastIndexByte</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> oneIndex <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// The HRP is everything before the found &#39;1&#39;.</span>\n\t\thrp <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token punctuation">:</span>oneIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> hrp <span class="token operator">==</span> defaultNet<span class="token punctuation">.</span>Bech32HRPSegwit <span class="token punctuation">{</span>\n\t\t\twitnessVer<span class="token punctuation">,</span> witnessProg<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">decodeSegWitAddress</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err\n\t\t\t<span class="token punctuation">}</span>\n\n\t\t\t<span class="token comment">// We currently only support P2WPKH and P2WSH, which is</span>\n\t\t\t<span class="token comment">// witness version 0.</span>\n\t\t\t<span class="token keyword">if</span> witnessVer <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">UnsupportedWitnessVerError</span><span class="token punctuation">(</span>witnessVer<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span>\n\n\t\t\t<span class="token keyword">switch</span> <span class="token function">len</span><span class="token punctuation">(</span>witnessProg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">case</span> <span class="token number">20</span><span class="token punctuation">:</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token function">newAddressWitnessPubKeyHash</span><span class="token punctuation">(</span>hrp<span class="token punctuation">,</span> witnessProg<span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">case</span> <span class="token number">32</span><span class="token punctuation">:</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token function">newAddressWitnessScriptHash</span><span class="token punctuation">(</span>hrp<span class="token punctuation">,</span> witnessProg<span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">default</span><span class="token punctuation">:</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">UnsupportedWitnessProgLenError</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>witnessProg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// Serialized public keys are either 65 bytes (130 hex chars) if</span>\n\t<span class="token comment">// uncompressed/hybrid or 33 bytes (66 hex chars) if compressed.</span>\n\t<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">130</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">66</span> <span class="token punctuation">{</span>\n\t\tserializedPubKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">return</span> <span class="token function">NewAddressPubKey</span><span class="token punctuation">(</span>serializedPubKey<span class="token punctuation">,</span> defaultNet<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// Switch on decoded length to determine the type.</span>\n\tdecoded<span class="token punctuation">,</span> netID<span class="token punctuation">,</span> err <span class="token operator">:=</span> base58<span class="token punctuation">.</span><span class="token function">CheckDecode</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> err <span class="token operator">==</span> base58<span class="token punctuation">.</span>ErrChecksum <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrChecksumMismatch\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;decoded address is of unknown format&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">switch</span> <span class="token function">len</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">case</span> ripemd160<span class="token punctuation">.</span>Size<span class="token punctuation">:</span> <span class="token comment">// P2PKH or P2SH</span>\n\t\tisP2PKH <span class="token operator">:=</span> netID <span class="token operator">==</span> defaultNet<span class="token punctuation">.</span>PubKeyHashAddrID\n\t\tisP2SH <span class="token operator">:=</span> netID <span class="token operator">==</span> defaultNet<span class="token punctuation">.</span>ScriptHashAddrID\n\t\t<span class="token keyword">switch</span> hash160 <span class="token operator">:=</span> decoded<span class="token punctuation">;</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">case</span> isP2PKH <span class="token operator">&amp;&amp;</span> isP2SH<span class="token punctuation">:</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrAddressCollision\n\t\t<span class="token keyword">case</span> isP2PKH<span class="token punctuation">:</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">newAddressPubKeyHash</span><span class="token punctuation">(</span>hash160<span class="token punctuation">,</span> netID<span class="token punctuation">)</span>\n\t\t<span class="token keyword">case</span> isP2SH<span class="token punctuation">:</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">newAddressScriptHashFromHash</span><span class="token punctuation">(</span>hash160<span class="token punctuation">,</span> netID<span class="token punctuation">)</span>\n\t\t<span class="token keyword">default</span><span class="token punctuation">:</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrUnknownAddressType\n\t\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">default</span><span class="token punctuation">:</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;decoded address is of unknown size&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><p>总共有四中地质类型:</p><h2 id="addresspubkey"><a class="header-anchor" href="#addresspubkey" aria-hidden="true">#</a> AddressPubKey</h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressPubKey is an Address for a pay-to-pubkey transaction.</span>\n<span class="token keyword">type</span> AddressPubKey <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tpubKeyFormat PubKeyFormat\n\tpubKey       <span class="token operator">*</span>btcec<span class="token punctuation">.</span>PublicKey\n\tpubKeyHashID <span class="token builtin">byte</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="addresspubkeyhash"><a class="header-anchor" href="#addresspubkeyhash" aria-hidden="true">#</a> AddressPubKeyHash</h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressPubKeyHash is an Address for a pay-to-pubkey-hash (P2PKH)</span>\n<span class="token comment">// transaction.</span>\n<span class="token keyword">type</span> AddressPubKeyHash <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\thash  <span class="token punctuation">[</span>ripemd160<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span>\n\tnetID <span class="token builtin">byte</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="addressscripthash"><a class="header-anchor" href="#addressscripthash" aria-hidden="true">#</a> AddressScriptHash</h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressScriptHash is an Address for a pay-to-script-hash (P2SH)</span>\n<span class="token comment">// transaction.</span>\n<span class="token keyword">type</span> AddressScriptHash <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\thash  <span class="token punctuation">[</span>ripemd160<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span>\n\tnetID <span class="token builtin">byte</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="addresswitnesspubkeyhash"><a class="header-anchor" href="#addresswitnesspubkeyhash" aria-hidden="true">#</a> AddressWitnessPubKeyHash</h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressWitnessPubKeyHash is an Address for a pay-to-witness-pubkey-hash</span>\n<span class="token comment">// (P2WPKH) output. See BIP 173 for further details regarding native segregated</span>\n<span class="token comment">// witness address encoding:</span>\n<span class="token comment">// https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki</span>\n<span class="token keyword">type</span> AddressWitnessPubKeyHash <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\thrp            <span class="token builtin">string</span>\n\twitnessVersion <span class="token builtin">byte</span>\n\twitnessProgram <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="addresswitnessscripthash"><a class="header-anchor" href="#addresswitnessscripthash" aria-hidden="true">#</a> AddressWitnessScriptHash</h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressWitnessScriptHash is an Address for a pay-to-witness-script-hash</span>\n<span class="token comment">// (P2WSH) output. See BIP 173 for further details regarding native segregated</span>\n<span class="token comment">// witness address encoding:</span>\n<span class="token comment">// https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki</span>\n<span class="token keyword">type</span> AddressWitnessScriptHash <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\thrp            <span class="token builtin">string</span>\n\twitnessVersion <span class="token builtin">byte</span>\n\twitnessProgram <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h1 id="地址类型对应的实际上就是锁定脚本的类型"><a class="header-anchor" href="#地址类型对应的实际上就是锁定脚本的类型" aria-hidden="true">#</a> 地址类型对应的实际上就是锁定脚本的类型</h1><p>比特币种的脚本执行流程比较复杂,必须根据脚本的内容来决定如何执行. 这与以太坊是完全不一样的,以太坊中是把输入环境构造完毕,不关心执行的code是什么.</p><h2 id="paytopubkeyhash"><a class="header-anchor" href="#paytopubkeyhash" aria-hidden="true">#</a> PayToPubKeyHash</h2><div class="language-"><pre><code> OP_DUP OP_HASH160 128004ff2fcaf13b2b91eb654b1dc2b674f7ec61 OP_EQUALVERIFY OP_CHECKSIG\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>判断是否是\bPayToPubKey的代码</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isPubkeyHash returns true if the script passed is a pay-to-pubkey-hash</span>\n<span class="token comment">// transaction, false otherwise.</span>\n<span class="token keyword">func</span> <span class="token function">isPubkeyHash</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DUP <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_HASH160 <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DATA_20 <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_EQUALVERIFY <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_CHECKSIG\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="paytopubkey"><a class="header-anchor" href="#paytopubkey" aria-hidden="true">#</a> \bPayToPubKey</h2><p>\bpubkey是压缩的</p><div class="language-"><pre><code>DATA_33 0x028004ff2fcaf13b2b91eb654b1dc2b674f7ec61128004ff2fcaf13b2b91eb654a  OP_CHECKSIG\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>pubkey是非压缩的</p><div class="language-"><pre><code>DATA_65 0x0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3 CHECKSIG\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isPubkey returns true if the script passed is a pay-to-pubkey transaction,</span>\n<span class="token comment">// false otherwise.</span>\n<span class="token keyword">func</span> <span class="token function">isPubkey</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// Valid pubkeys are either 33 or 65 bytes.</span>\n\t<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>\n\t\t<span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">33</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_CHECKSIG\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="paytoscripthash"><a class="header-anchor" href="#paytoscripthash" aria-hidden="true">#</a> PayToScriptHash</h2><div class="language-"><pre><code>HASH160 DATA_20 0xb3a84b564602a9d68b4c9f19c2ea61458ff7826c EQUAL\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isScriptHash returns true if the script passed is a pay-to-script-hash</span>\n<span class="token comment">// transaction, false otherwise.</span>\n<span class="token keyword">func</span> <span class="token function">isScriptHash</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_HASH160 <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DATA_20 <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_EQUAL\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="paytowitnesspubkeyhash"><a class="header-anchor" href="#paytowitnesspubkeyhash" aria-hidden="true">#</a> PayToWitnessPubKeyHash</h2><p>为了区分,强制增加了一个无用的\b\bOP_O,如果按照前面的三种方式去执行,就是这个Tx输出所有人都可以花费,不需要提供任何证明.因此是所谓的软分叉,提供了向下兼容. 其执行过程:</p><ol><li>移除 OP_0,这是版本信息</li><li>将剩下的DATA_20 和0x365ab47888e150ff46f8d51bce36dcd680f1283f 组装成P2PKH <code>OP_DUP OP_HASH160 365ab47888e150ff46f8d51bce36dcd680f1283f OP_EQUALVERIFY OP_CHECKSIG</code></li><li>将Tx中的Witness依次压栈,然后开始执行,验证方式如同P2PKH 代码见txscript/engine.go的verifyWitnessProgram</li></ol><div class="language-"><pre><code>OP_0 DATA_20 0x365ab47888e150ff46f8d51bce36dcd680f1283f\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isWitnessPubKeyHash returns true if the passed script is a</span>\n<span class="token comment">// pay-to-witness-pubkey-hash, and false otherwise.</span>\n<span class="token keyword">func</span> <span class="token function">isWitnessPubKeyHash</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_0 <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DATA_20\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="paytowitnessscripthash"><a class="header-anchor" href="#paytowitnessscripthash" aria-hidden="true">#</a> PayToWitnessScriptHash</h2><p>其执行过程如下:</p><ol><li>移除0,作为版本信息</li><li>验证Tx中Witness数组的最后一个的Hash值和0xe112b88a0cd87ba387f449d443ee2596eb353beb1f0351ab2cba8909d875db23是否相等</li><li>验证过以后,将Witness数组的最后一个作为锁定脚本</li><li>将Witness其他0到n-2元素作为解锁脚本依次压栈</li><li>如同P2SH一样执行验证 代码见txscript/engine.go的verifyWitnessProgram</li></ol><div class="language-"><pre><code>0 DATA_32 0xe112b88a0cd87ba387f449d443ee2596eb353beb1f0351ab2cba8909d875db23\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isWitnessScriptHash returns true if the passed script is a</span>\n<span class="token comment">// pay-to-witness-script-hash transaction, false otherwise.</span>\n<span class="token keyword">func</span> <span class="token function">isWitnessScriptHash</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_0 <span class="token operator">&amp;&amp;</span>\n\t\tpops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DATA_32\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',42)];e.render=function(a,p,e,o,c,l){return s(),n("div",null,t)};export{p as __pageData,e as default};
