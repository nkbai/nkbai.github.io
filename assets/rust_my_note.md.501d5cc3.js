import{_ as n,c as s,o as a,a as e}from"./app.7948a4b5.js";const b=`{"title":"rust\u5B66\u4E60\u7B14\u8BB0","description":"","frontmatter":{"title":"rust\u5B66\u4E60\u7B14\u8BB0","date":"2019-04-03T03:57:03.000Z","draft":false,"tags":["rust"],"categories":["\u6280\u672F\u76F8\u5173"]},"headers":[{"level":2,"title":"\u5185\u5B58\u5B89\u5168","slug":"\u5185\u5B58\u5B89\u5168"},{"level":3,"title":"\u6BB5\u9519\u8BEF","slug":"\u6BB5\u9519\u8BEF"},{"level":2,"title":"\u6240\u6709\u6743","slug":"\u6240\u6709\u6743"},{"level":2,"title":"\u501F\u7528\u4E8E\u6240\u6709\u6743","slug":"\u501F\u7528\u4E8E\u6240\u6709\u6743"},{"level":3,"title":"Copy Trait","slug":"copy-trait"},{"level":3,"title":"Copy\u548CClone\u7684\u533A\u522B","slug":"copy\u548Cclone\u7684\u533A\u522B"},{"level":3,"title":"\u5F15\u7528\u4E0E\u89E3\u5F15\u7528(dereferencing)","slug":"\u5F15\u7528\u4E0E\u89E3\u5F15\u7528-dereferencing"},{"level":3,"title":"Slice\u7C7B\u578B","slug":"slice\u7C7B\u578B"},{"level":2,"title":"\u7ED3\u6784\u4F53","slug":"\u7ED3\u6784\u4F53"},{"level":3,"title":"struct","slug":"struct"},{"level":2,"title":"\u679A\u4E3E","slug":"\u679A\u4E3E"},{"level":2,"title":"crate,mod","slug":"crate-mod"},{"level":2,"title":"rust\u9AD8\u7EA7\u90E8\u5206","slug":"rust\u9AD8\u7EA7\u90E8\u5206"},{"level":3,"title":"unsafe","slug":"unsafe"},{"level":2,"title":"Cell \u7528\u6CD5","slug":"cell-\u7528\u6CD5"},{"level":3,"title":"\u501F\u7528\u89C4\u5219","slug":"\u501F\u7528\u89C4\u5219"},{"level":3,"title":"\u89E3\u5F15\u7528","slug":"\u89E3\u5F15\u7528"},{"level":3,"title":"\u5B8F","slug":"\u5B8F"},{"level":3,"title":"\u4E34\u65F6\u53D8\u91CF\u7684\u751F\u547D\u5468\u671F","slug":"\u4E34\u65F6\u53D8\u91CF\u7684\u751F\u547D\u5468\u671F"},{"level":3,"title":"'static \u6CDB\u578B","slug":"static-\u6CDB\u578B"},{"level":3,"title":"\u51FD\u6570\u751F\u547D\u5468\u671F\u7684\u63A8\u5BFC\u89C4\u5219","slug":"\u51FD\u6570\u751F\u547D\u5468\u671F\u7684\u63A8\u5BFC\u89C4\u5219"},{"level":3,"title":"\u9AD8\u9636\u751F\u547D\u5468\u671F","slug":"\u9AD8\u9636\u751F\u547D\u5468\u671F"},{"level":2,"title":"\u5B8F","slug":"\u5B8F-1"},{"level":3,"title":"\u5B8F\u8C03\u8BD5","slug":"\u5B8F\u8C03\u8BD5"},{"level":3,"title":"\u5173\u4E8E\u7EBF\u7A0B\u5B89\u5168","slug":"\u5173\u4E8E\u7EBF\u7A0B\u5B89\u5168"},{"level":2,"title":"\u5173\u4E8Easync\u548Cawait","slug":"\u5173\u4E8Easync\u548Cawait"},{"level":3,"title":"await","slug":"await"},{"level":3,"title":"Pinning","slug":"pinning"},{"level":3,"title":"Stream","slug":"stream"},{"level":2,"title":"atmoic","slug":"atmoic"},{"level":3,"title":"Release-Acquire ordering","slug":"release-acquire-ordering"},{"level":3,"title":"Sized\u548C?Sized","slug":"sized\u548C-sized"},{"level":3,"title":"Borrow \u548CAsRef\u4E24\u4E2ATrait\u7684\u5173\u7CFB","slug":"borrow-\u548Casref\u4E24\u4E2Atrait\u7684\u5173\u7CFB"},{"level":2,"title":"PhantomData\u7684\u4E00\u4E9B\u7528\u6CD5","slug":"phantomdata\u7684\u4E00\u4E9B\u7528\u6CD5"}],"relativePath":"rust/my_note.md"}`,p={},t=e(`<h2 id="\u5185\u5B58\u5B89\u5168" tabindex="-1">\u5185\u5B58\u5B89\u5168 <a class="header-anchor" href="#\u5185\u5B58\u5B89\u5168" aria-hidden="true">#</a></h2><h3 id="\u6BB5\u9519\u8BEF" tabindex="-1">\u6BB5\u9519\u8BEF <a class="header-anchor" href="#\u6BB5\u9519\u8BEF" aria-hidden="true">#</a></h3><p>Rust is a systems programming language that runs blazingly fast\uFF0Cprevents segfaults\uFF0Cand guarantees thread safety.</p><p>\u5185\u5B58\u4E0D\u5B89\u5168\u7684\u884C\u4E3A:</p><ul><li>\u7A7A\u6307\u9488</li><li>\u91CE\u6307\u9488</li><li>\u60AC\u7A7A\u6307\u9488</li><li>\u4F7F\u7528\u672A\u521D\u59CB\u5316\u7684\u6307\u9488</li><li>\u975E\u6CD5\u91CA\u653E</li><li>\u7F13\u51B2\u533A\u6EA2\u51FA</li><li>\u6267\u884C\u975E\u6CD5\u51FD\u6570\u6307\u9488</li><li>\u6570\u636E\u7ADE\u4E89</li></ul><p>\u4E0D\u8BA4\u4E3A\u662F\u5185\u5B58\u5B89\u5168\u7684\u884C\u4E3A:</p><ul><li>\u5185\u5B58\u6CC4\u6F0F</li></ul><h2 id="\u6240\u6709\u6743" tabindex="-1">\u6240\u6709\u6743 <a class="header-anchor" href="#\u6240\u6709\u6743" aria-hidden="true">#</a></h2><ol><li>Rust \u4E2D\u7684\u6BCF\u4E00\u4E2A\u503C\u6709\u4E14\u53EA\u6709\u4E00\u4E2A\u6240\u6709\u8005\u3002</li><li>\u5F53\u6240\u6709\u8005\uFF08\u53D8\u91CF\uFF09\u79BB\u5F00\u4F5C\u7528\u57DF\uFF0C\u8FD9\u4E2A\u503C\u5C06\u88AB\u4E22\u5F03\u3002</li></ol><h2 id="\u501F\u7528\u4E8E\u6240\u6709\u6743" tabindex="-1">\u501F\u7528\u4E8E\u6240\u6709\u6743 <a class="header-anchor" href="#\u501F\u7528\u4E8E\u6240\u6709\u6743" aria-hidden="true">#</a></h2><ol><li>\u4E00\u4E2A\u53D8\u91CF\u53EF\u4EE5\u5B58\u5728\u591A\u4E2A\u53EA\u8BFB\u501F\u7528(shared reference),\u4F46\u662F\u5B9E\u9645\u4E0A\u53C8\u53EF\u4EE5\u6709\u5176\u4ED6\u624B\u6BB5\u6765\u4FEE\u6539</li><li>\u4E00\u4E2A\u53D8\u91CF\u53EA\u80FD\u5B58\u5728\u4E00\u4E2A\u53EF\u5199\u501F\u7528,\u53EF\u5199\u501F\u7528\u53EF\u4EE5\u4FEE\u6539\u53D8\u91CF\u7684\u5185\u5BB9,\u4F46\u662F\u4E0D\u80FD\u8F6C\u79FB\u6240\u6709\u6743</li></ol><h3 id="copy-trait" tabindex="-1">Copy Trait <a class="header-anchor" href="#copy-trait" aria-hidden="true">#</a></h3><p>\u7F16\u8BD1\u65F6\u5927\u5C0F\u5DF2\u77E5,\u5E76\u4E14\u5B58\u50A8\u5728\u6808\u4E0A(\u503C\u7C7B\u578B)\u4E00\u822C\u90FD\u6709copy trait,\u79F0\u4E4B\u4E3A\u6D45\u62F7\u8D1D.</p><ul><li>\u5143\u7EC4\uFF0C\u5F53\u4E14\u4EC5\u5F53\u5176\u5305\u542B\u7684\u7C7B\u578B\u4E5F\u90FD\u662F Copy \u7684\u65F6\u5019\u3002\u6BD4\u5982\uFF0C(i32, i32) \u662F Copy \u7684\uFF0C\u4F46 (i32, String) \u5C31\u4E0D\u662F\u3002</li></ul><h3 id="copy\u548Cclone\u7684\u533A\u522B" tabindex="-1">Copy\u548CClone\u7684\u533A\u522B <a class="header-anchor" href="#copy\u548Cclone\u7684\u533A\u522B" aria-hidden="true">#</a></h3><p>Copy\u662F\u6D45\u62F7\u8D1D,\u662F\u7F16\u8BD1\u5668\u81EA\u52A8\u8C03\u7528,Clone\u662F\u6DF1\u62F7\u8D1D,\u7A0B\u5E8F\u5458\u624B\u5DE5\u8C03\u7528.</p><h3 id="\u5F15\u7528\u4E0E\u89E3\u5F15\u7528-dereferencing" tabindex="-1">\u5F15\u7528\u4E0E\u89E3\u5F15\u7528(dereferencing) <a class="header-anchor" href="#\u5F15\u7528\u4E0E\u89E3\u5F15\u7528-dereferencing" aria-hidden="true">#</a></h3><p>&amp; \u5F15\u7528\u5B9E\u9645\u4E0A\u53EF\u4EE5\u8BA4\u4E3A\u662F\u6240\u6709\u6743\u7684\u4E34\u65F6\u501F\u7528 (\u4E0D\u5168\u662Fc\u8BED\u8A00\u4E2D\u7684\u6307\u9488,\u53EA\u4E0D\u8FC7\u7528\u8D77\u6765\u50CF\u800C\u5DF2)</p><ul><li>\u89E3\u5F15\u7528</li></ul><p>\u5F15\u7528\u6709\u4E24\u79CD <strong>\u4E0D\u53EF\u53D8\u5F15\u7528\u4E0E\u53EF\u53D8\u5F15\u7528</strong>.</p><ul><li>\u5728\u4EFB\u610F\u7ED9\u5B9A\u65F6\u95F4\uFF0C\u8981\u4E48 \u53EA\u80FD\u6709\u4E00\u4E2A\u53EF\u53D8\u5F15\u7528\uFF0C\u8981\u4E48 \u53EA\u80FD\u6709\u591A\u4E2A\u4E0D\u53EF\u53D8\u5F15\u7528\u3002</li><li>\u5F15\u7528\u5FC5\u987B\u603B\u662F\u6709\u6548\u3002</li></ul><h3 id="slice\u7C7B\u578B" tabindex="-1">Slice\u7C7B\u578B <a class="header-anchor" href="#slice\u7C7B\u578B" aria-hidden="true">#</a></h3><ul><li>\u4ED6\u6CA1\u6709\u6570\u636E\u6240\u6709\u6743</li><li>\u4ED6\u53EA\u662F\u5BF9\u5806\u4E0A\u6570\u636E\u7684\u5F15\u7528</li></ul><h2 id="\u7ED3\u6784\u4F53" tabindex="-1">\u7ED3\u6784\u4F53 <a class="header-anchor" href="#\u7ED3\u6784\u4F53" aria-hidden="true">#</a></h2><h3 id="struct" tabindex="-1">struct <a class="header-anchor" href="#struct" aria-hidden="true">#</a></h3><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span>
    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    sign_in_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol><li><code>#[drive(Debug)]</code> \u53EF\u4EE5\u65B9\u4FBF\u6253\u5370\u8C03\u8BD5\u4FE1\u606F <code>{:?}</code></li><li>\u5B9A\u4E49\u5728\u7ED3\u6784\u4F53\u4E0A\u7684\u51FD\u6570\u79F0\u4E4B\u4E3A\u65B9\u6CD5 (\u7B2C\u4E00\u4E2A\u53C2\u6570\u662F<code>&amp;self</code>\u6216\u8005<code>&amp;mut self)</code></li><li><code>&amp;self(&amp; mut self)</code> \u7C7B\u4F3C\u4E8Ethis\u6307\u9488</li><li>\u5173\u8054\u51FD\u6570,\u5B9A\u4E49\u5728struct\u4E0A,\u4F46\u662F\u7B2C\u4E00\u4E2A\u53C2\u6570\u4E0D\u662F<code>&amp;self(</code>\u7C7B\u4F3C\u4E8Ec++\u7C7B\u7684\u9759\u6001\u51FD\u6570)</li></ol><p>###\u5143\u7EC4(tuple) \u5143\u7EC4\u662F\u6CA1\u6709\u5B57\u6BB5\u540D\u7684\u7ED3\u6784\u4F53</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Color</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="\u679A\u4E3E" tabindex="-1">\u679A\u4E3E <a class="header-anchor" href="#\u679A\u4E3E" aria-hidden="true">#</a></h2><p>\u679A\u4E3E\u662F\u4E00\u4E2A\u5F88\u591A\u8BED\u8A00\u90FD\u6709\u7684\u529F\u80FD\uFF0C\u4E0D\u8FC7\u4E0D\u540C\u8BED\u8A00\u4E2D\u5176\u529F\u80FD\u5404\u4E0D\u76F8\u540C\u3002Rust \u7684\u679A\u4E3E\u4E0E F#\u3001OCaml \u548C Haskell \u8FD9\u6837\u7684\u51FD\u6570\u5F0F\u7F16\u7A0B\u8BED\u8A00\u4E2D\u7684 \u4EE3\u6570\u6570\u636E\u7C7B\u578B\uFF08algebraic data types\uFF09\u6700\u4E3A\u76F8\u4F3C\u3002</p><p><strong>\u4E0EC/go\u8BED\u8A00\u4E2D\u7684\u679A\u4E3E\u5B8C\u5168\u4E0D\u540C,\u6CA1\u6709\u5BF9\u5E94\u7684\u6574\u6570\u503C.</strong></p><p>\u4E00\u4E2A\u5178\u578B\u7684\u4F8B\u5B50:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Message</span> <span class="token punctuation">{</span>
    <span class="token class-name">Quit</span><span class="token punctuation">,</span>
    <span class="token class-name">Move</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">ChangeColor</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="option" tabindex="-1">Option <a class="header-anchor" href="#option" aria-hidden="true">#</a></h4><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">None</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>match\u5FC5\u987B\u662F\u7A77\u5C3D\u7684</strong></p><p><strong>if let\u662F\u4E00\u79CD\u4E13\u95E8\u7684\u7528\u6CD5</strong></p><h2 id="crate-mod" tabindex="-1">crate,mod <a class="header-anchor" href="#crate-mod" aria-hidden="true">#</a></h2><ul><li>\u6A21\u5757\uFF0C\u4E00\u4E2A\u7EC4\u7EC7\u4EE3\u7801\u548C\u63A7\u5236\u8DEF\u5F84\u79C1\u6709\u6027\u7684\u65B9\u5F0F</li><li>\u8DEF\u5F84\uFF0C\u4E00\u4E2A\u547D\u540D\u9879\uFF08item\uFF09\u7684\u65B9\u5F0F</li><li>use \u5173\u952E\u5B57\u7528\u6765\u5C06\u8DEF\u5F84\u5F15\u5165\u4F5C\u7528\u57DF,super\u5173\u952E\u5B57\u8868\u793A\u7236\u6A21\u5757</li><li>pub \u5173\u952E\u5B57\u4F7F\u9879\u53D8\u4E3A\u516C\u6709</li><li>as \u5173\u952E\u5B57\u7528\u4E8E\u5C06\u9879\u5F15\u5165\u4F5C\u7528\u57DF\u65F6\u8FDB\u884C\u91CD\u547D\u540D</li><li>\u4F7F\u7528\u5916\u90E8\u5305</li><li>\u5D4C\u5957\u8DEF\u5F84\u7528\u6765\u6D88\u9664\u5927\u91CF\u7684 use \u8BED\u53E5</li><li>\u4F7F\u7528 glob \u8FD0\u7B97\u7B26\u5C06\u6A21\u5757\u7684\u6240\u6709\u5185\u5BB9\u5F15\u5165\u4F5C\u7528\u57DF</li><li>\u5982\u4F55\u5C06\u4E0D\u540C\u6A21\u5757\u5206\u5272\u5230\u5355\u72EC\u7684\u6587\u4EF6\u4E2D</li></ul><ul><li>\u901A\u8FC7pub use\u91CD\u5BFC\u51FA</li><li>\u901A\u8FC7cargo.toml\u4E2D[dependencies]\u6765\u4F7F\u7528\u5916\u90E8\u5305</li></ul><h2 id="rust\u9AD8\u7EA7\u90E8\u5206" tabindex="-1">rust\u9AD8\u7EA7\u90E8\u5206 <a class="header-anchor" href="#rust\u9AD8\u7EA7\u90E8\u5206" aria-hidden="true">#</a></h2><h3 id="unsafe" tabindex="-1">unsafe <a class="header-anchor" href="#unsafe" aria-hidden="true">#</a></h3><ul><li>\u89E3\u5F15\u7528\u88F8\u6307\u9488</li><li>\u8C03\u7528\u4E0D\u5B89\u5168\u7684\u51FD\u6570\u6216\u65B9\u6CD5</li><li>\u8BBF\u95EE\u6216\u4FEE\u6539\u53EF\u53D8\u9759\u6001\u53D8\u91CF</li><li>\u5B9E\u73B0\u4E0D\u5B89\u5168 trait \u5982\u679C\u4E0D\u5FC5\u8981\u4F7F\u7528unsafe\u7684\u65F6\u5019\u7528\u4E86unsfae\u5173\u952E\u5B57\u4E5F\u4F1A\u9519\u8BEF,\u4E5F\u5C31\u662F\u8BF4\u6CA1\u6709\u51FA\u73B0\u4E0A\u8FF0\u56DB\u79CD\u60C5\u51B5,\u4F46\u662F\u7528\u4E86unsafe.</li></ul><h2 id="cell-\u7528\u6CD5" tabindex="-1">Cell \u7528\u6CD5 <a class="header-anchor" href="#cell-\u7528\u6CD5" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cell<span class="token punctuation">::</span></span><span class="token class-name">Cell</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token keyword">let</span> data <span class="token punctuation">:</span> <span class="token class-name">Cell</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Cell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>data<span class="token punctuation">;</span> vdata<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

p<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u6240\u8C13\u7684\u5185\u90E8\u53EF\u53D8\u6027,\u5C31\u662F\u4E0D\u7528mut,\u4E00\u6837\u53EF\u4EE5\u4FEE\u6539Cell\u5305\u62EC\u7684\u5185\u5BB9. cell\u5BFC\u51FA\u63A5\u53E3</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Cell</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//\u8FD9\u4E2A\u8981\u6C42\u662F\u53EF\u5199\u501F\u7528,\u5176\u4ED6\u90FD\u662F\u53EA\u8BFB\u501F\u7528,\u4F46\u662F\u8FD8\u662F\u53EF\u4EE5\u4FEE\u6539\u5176\u5185\u5BB9</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">T</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> 
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">replace</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">into_inner</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token comment">//Copy\u5B9E\u9645\u4E0A\u5C31\u662Fget</span>
<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span><span class="token class-name">Copy</span><span class="token operator">&gt;</span> <span class="token class-name">Cell</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> 
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>RefCell\u63A5\u53E3\u7684\u5B9A\u4E49</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span> <span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">borrow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> 
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">try_borrow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token class-name">BorrowError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">borrow_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">RefMut</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> 
 <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">try_borrow_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">RefMut</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">BorrowMutError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
     <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">T</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u4ED6\u548Ccell\u4E0D\u4E00\u6837\u7684\u662F,\u4ED6\u5E76\u4E0D\u80FD\u76F4\u63A5\u4FEE\u6539\u6216\u8005\u8BFB\u53D6\u5176\u5305\u542B\u7684\u5185\u5BB9,\u800C\u662F\u901A\u8FC7borrow\u4EE5\u53CAborrow_mut\u6765\u83B7\u53D6\u5176\u5BF9\u5E94\u7684<code>Ref&lt;T&gt;</code>\u548C<code>RefMut&lt;T&gt;</code></p><p>\u5982\u4F55\u9009\u62E9Cell\u548CRefCell? \u5982\u679C\u4F60\u53EA\u9700\u8981\u6574\u4F53\u6027\u5730\u5B58\u2F0A\u3001\u53D6\u51FAT\uFF0C\u90A3\u4E48\u5C31\u9009 Cell\u3002\u5982\u679C\u4F60\u9700\u8981\u6709\u4E2A\u53EF\u8BFB\u5199\u6307\u9488\u6307\u5411\u8FD9\u4E2AT\u4FEE\u6539\u5B83\uFF0C\u90A3\u4E48\u5C31\u9009RefCell\u3002</p><h3 id="\u501F\u7528\u89C4\u5219" tabindex="-1">\u501F\u7528\u89C4\u5219 <a class="header-anchor" href="#\u501F\u7528\u89C4\u5219" aria-hidden="true">#</a></h3><ol><li>\u501F\u7528\u6307\u9488\u4E0D\u80FD\u6BD4\u5B83\u6307\u5411\u7684\u53D8\u91CF\u5B58\u5728\u66F4\u957F\u7684\u65F6\u95F4</li><li>&amp;mut\u578B\u501F\u7528\u53EA\u80FD\u6307\u5411\u672C\u8EAB\u5177\u6709mut\u4FEE\u9970\u7684\u53D8\u91CF</li><li>&amp;mut\u578B\u501F\u7528\u6307\u9488\u5B58\u5728\u7684\u65F6\u5019,\u88AB\u501F\u7528\u53D8\u91CF\u51FA\u4E8E\u51BB\u7ED3\u72B6\u6001.</li><li>&amp;\u578B\u501F\u7528\u548C&amp;mut\u578B\u501F\u7528\u4E92\u65A5,\u4E0D\u53EF\u540C\u65F6\u5B58\u5728.</li><li>\u6700\u591A\u540C\u65F6\u5B58\u5728\u4E00\u4E2A&amp;mut\u578B\u501F\u7528</li><li>\u53EF\u4EE5\u5B58\u5728\u5728\u6CA1\u6709&amp;mut\u578B\u501F\u7528\u7684\u60C5\u51B5\u4E0B,\u5B58\u5728\u591A\u4E2A&amp;\u578B\u501F\u7528.</li></ol><h3 id="\u89E3\u5F15\u7528" tabindex="-1">\u89E3\u5F15\u7528 <a class="header-anchor" href="#\u89E3\u5F15\u7528" aria-hidden="true">#</a></h3><p>Rust\u4F1A\u81EA\u52A8\u89E3\u5F15\u7528,\u8FD9\u770B\u8D77\u6765\u5C31\u50CF\u7C7B\u578B\u81EA\u52A8\u8F6C\u6362\u4E00\u6837. \u6BD4\u5982<code>Vec&lt;T&gt;</code>\u5B9E\u73B0\u4E86deref \u56E0\u6B64<code>&amp;Vec&lt;T&gt;</code>\u5373\u53EF\u4EE5\u5F53\u505A&amp;[T]\u6765\u7528,\u5F53\u7136\u4E5F\u53EF\u4EE5\u5F53\u505A</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u8FD9\u4E2A\u4F8B\u5B50\u4E2Ds\u7C7B\u578B\u4E3A<code>Rc&lt;T&gt;</code>\u5E76\u6CA1\u6709bytes\u51FD\u6570,Rust\u4F1A\u81EA\u52A8\u89E3\u5F15\u7528,\u5F97\u5230str\u7C7B\u578B,\u7136\u540E\u8C03\u7528\u4E0A\u9762\u7684bytes\u51FD\u6570. \u8FD9\u4E2A\u8FC7\u7A0B\u662F\u8FD9\u6837\u7684</p><ol><li>\u5C1D\u8BD5Rc::bytes(&amp;s),\u4E0D\u53EF\u884C\u7EE7\u7EED2</li><li>\u5C1D\u8BD5String::bytes(Rc::deref(&amp;s)),\u4E0D\u53EF\u884C,\u7EE7\u7EED3</li><li>\u5C1D\u8BD5str::bytes(String::deref(Rc::deref(&amp;s))),ok\u7ED3\u675F \u5B9E\u9645\u6267\u884C\u7684\u662F<code>s.deref().deref().bytes()</code></li></ol><p>\u7F16\u8BD1\u5668\u4F1A\u81EA\u52A8\u65E0\u9650deref\u5C1D\u8BD5,\u76F4\u5230\u4E0D\u80FDderef\u4E0B\u53BB. <strong>\u5982\u679C\u4E0D\u80FD\u81EA\u52A8\u5224\u65AD,\u9700\u8981\u624B\u5DE5\u4ECB\u5165</strong></p><p>**&amp;***\u548C&amp; * \u662F\u4E0D\u4E00\u6837\u7684</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">let</span> s<span class="token operator">=</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>&amp;*s\u4F1A\u88AB\u76F4\u63A5\u5F53\u6210s.deref(),\u800C\u4E0D\u662F*s\u5148\u628A\u5185\u90E8\u6570\u636E\u79FB\u8D70\u7136\u540E\u53BB\u501F\u7528</p><h3 id="\u5B8F" tabindex="-1">\u5B8F <a class="header-anchor" href="#\u5B8F" aria-hidden="true">#</a></h3><h4 id="\u5B8F\u5C55\u5F00\u65B9\u6CD5" tabindex="-1">\u5B8F\u5C55\u5F00\u65B9\u6CD5 <a class="header-anchor" href="#\u5B8F\u5C55\u5F00\u65B9\u6CD5" aria-hidden="true">#</a></h4><div class="language-"><pre><code>cargo rustc -- -Z unstable-options --pretty=expanded
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h3 id="\u4E34\u65F6\u53D8\u91CF\u7684\u751F\u547D\u5468\u671F" tabindex="-1">\u4E34\u65F6\u53D8\u91CF\u7684\u751F\u547D\u5468\u671F <a class="header-anchor" href="#\u4E34\u65F6\u53D8\u91CF\u7684\u751F\u547D\u5468\u671F" aria-hidden="true">#</a></h3><p>\u6765\u81EA\u4E8E\u8FD9\u7BC7\u8BA8\u8BBA<a href="https://stackoverflow.com/questions/47662253/why-is-it-legal-to-borrow-a-temporary" target="_blank" rel="noopener noreferrer">\u501F\u7528\u4E00\u4E2A\u4E34\u65F6\u53D8\u91CF\u662F\u6709\u6548\u7684</a></p><div class="language-"><pre><code>Temporary lifetimes

When using a value expression in most place expression contexts, a temporary unnamed memory location is created initialized to that value and the expression evaluates to that location instead
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This applies, because String::new() is a value expression and being just below &amp;mut it is in a place expression context. Now the reference operator only has to pass through this temporary memory location, so it becomes the value of the whole right side (including the &amp;mut).</p><div class="language-"><pre><code>When a temporary value expression is being created that is assigned into a let declaration, however, the temporary is created with the lifetime of the enclosing block instead
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Since it is assigned to the variable it gets a lifetime until the end of the enclosing block.</p><p>This also answers this question about the difference between</p><div class="language-"><pre><code>let a = &amp;String::from(&quot;abcdefg&quot;); // ok!
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>and</p><div class="language-"><pre><code>let a = String::from(&quot;abcdefg&quot;).as_str(); // compile error \u8FD9\u6837\u4E4B\u6240\u4EE5\u4E0D\u884C\u662F\u56E0\u4E3Aas_str()\u501F\u7528\u7684\u751F\u547D\u5468\u671F\u548Ca\u76F8\u540C,\u4F46\u662F\u88AB\u501F\u7528\u5BF9\u8C61string::from()\u8FD4\u56DE\u7684\u4E34\u65F6\u53D8\u91CF\u7684\u751F\u547D\u5468\u671F\u4F9D\u7136\u662F\u8FD9\u4E00\u884C
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>In the second variant the temporary is passed into as_str(), so its lifetime ends at the end of the statement.</p><p>\u901A\u4FD7\u6765\u8BF4,\u5C31\u662F\u4E34\u65F6\u53D8\u91CF\u7684\u751F\u547D\u5468\u671F\u5C31\u662F\u8FD9\u4E00\u884C\u8BED\u53E5,\u4F46\u662F\u5982\u679C\u8FD4\u56DE\u7684\u53D8\u91CF\u4F7F\u7528let\u7ED1\u5B9A\u7684\u8BDD,\u90A3\u4E48\u5176\u751F\u547D\u5468\u671F\u5C31\u53D8\u6210\u4E86\u6700\u8FD1\u7684\u90A3\u4E2A{}</p><h3 id="static-\u6CDB\u578B" tabindex="-1">&#39;static \u6CDB\u578B <a class="header-anchor" href="#static-\u6CDB\u578B" aria-hidden="true">#</a></h3><p>\u82E5\u662F\u6709where T\uFF1A&#39;static \u7684\u7EA6\u675F\uFF0C\u610F\u601D\u5219\u662F\uFF0C\u7C7B\u578BT\u2FA5\u2FAF\u4E0D\u5305\u542B\u4EFB\u4F55\u6307\u5411\u77ED\u2F63\u547D\u5468\u671F\u7684\u501F\u2F64\u6307\u9488\uFF0C \u610F\u601D\u662F\u8981\u4E48\u5B8C\u5168\u4E0D\u5305\u542B\u4EFB\u4F55\u501F\u2F64\uFF0C\u8981\u4E48\u53EF\u4EE5\u6709\u6307\u5411&#39;static\u7684\u501F\u2F64\u6307\u9488\u3002</p><h3 id="\u51FD\u6570\u751F\u547D\u5468\u671F\u7684\u63A8\u5BFC\u89C4\u5219" tabindex="-1">\u51FD\u6570\u751F\u547D\u5468\u671F\u7684\u63A8\u5BFC\u89C4\u5219 <a class="header-anchor" href="#\u51FD\u6570\u751F\u547D\u5468\u671F\u7684\u63A8\u5BFC\u89C4\u5219" aria-hidden="true">#</a></h3><ul><li>\u6BCF\u4E2A\u5E26\u2F63\u547D\u5468\u671F\u53C2\u6570\u7684\u8F93\u2F0A\u53C2\u6570\uFF0C\u6BCF\u4E2A\u5BF9\u5E94\u4E0D\u540C\u7684\u2F63\u547D\u5468\u671F\u53C2\u6570\uFF1B</li><li>\u5982\u679C\u53EA\u6709\u2F00\u4E2A\u8F93\u2F0A\u53C2\u6570\u5E26\u2F63\u547D\u5468\u671F\u53C2\u6570\uFF0C\u90A3\u4E48\u8FD4\u56DE\u503C\u7684\u2F63\u547D\u5468\u671F\u88AB\u6307 \u5B9A\u4E3A\u8FD9\u4E2A\u53C2\u6570\uFF1B</li><li>\u5982\u679C\u6709\u591A\u4E2A\u8F93\u2F0A\u53C2\u6570\u5E26\u2F63\u547D\u5468\u671F\u53C2\u6570\uFF0C\u4F46\u5176\u4E2D\u6709&amp;self\u3001&amp;mut self\uFF0C \u90A3\u4E48\u8FD4\u56DE\u503C\u7684\u2F63\u547D\u5468\u671F\u88AB\u6307\u5B9A\u4E3A\u8FD9\u4E2A\u53C2\u6570\uFF1B</li><li>\u4EE5\u4E0A\u90FD\u4E0D\u6EE1\u2F9C\uFF0C\u5C31\u4E0D\u80FD\u2F83\u52A8\u8865\u5168\u8FD4\u56DE\u503C\u7684\u2F63\u547D\u5468\u671F\u53C2\u6570</li></ul><h3 id="\u9AD8\u9636\u751F\u547D\u5468\u671F" tabindex="-1">\u9AD8\u9636\u751F\u547D\u5468\u671F <a class="header-anchor" href="#\u9AD8\u9636\u751F\u547D\u5468\u671F" aria-hidden="true">#</a></h3><p>\u5230\u2F6C\u524D\u4E3A \u2F4C\uFF0C<code>for&lt;&#39;a&gt;Fn\uFF08&amp;&#39;a Arg\uFF09-&gt;&amp;&#39;a Ret</code>\u8FD9\u6837\u7684\u8BED\u6CD5\uFF0C\u53EA\u80FD\u2F64\u4E8E\u2F63\u547D\u5468\u671F\u53C2\u6570\uFF0C \u4E0D\u80FD\u2F64\u4E8E\u4EFB\u610F\u6CDB\u578B\u7C7B\u578B\u3002</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">calc_by</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">F</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>var<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token keyword">where</span> <span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token keyword">for</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;f</span><span class="token operator">&gt;</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;f</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> local <span class="token operator">=</span> <span class="token operator">*</span>var<span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>local<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="\u5B8F-1" tabindex="-1">\u5B8F <a class="header-anchor" href="#\u5B8F-1" aria-hidden="true">#</a></h2><p>Captures are written as a dollar ($) followed by an identifier, a colon (\u{1F603}, and finally the kind of capture, which must be one of the following:</p><ul><li><p>item: an item, like a function, struct, module, etc.</p></li><li><p>block: a block (i.e. a block of statements and/or an expression, surrounded by braces)</p></li><li><p>stmt: a statement</p></li><li><p>pat: a pattern</p></li><li><p>expr: an expression</p></li><li><p>ty: a type</p></li><li><p>ident: an identifier</p></li><li><p>path: a path (e.g. foo, ::std::mem::replace, <code>transmute::&lt;_, int&gt;</code>, \u2026)</p></li><li><p>meta: a meta item; the things that go inside #[...] and #![...] attributes</p></li><li><p>tt: a single token tree</p></li><li><p>item: anything.</p></li><li><p>block: anything.</p></li><li><p>stmt: =&gt; , ;</p></li><li><p>pat: =&gt; , = if in</p></li><li><p>expr: =&gt; , ;</p></li><li><p>ty: , =&gt; : = &gt; ; as</p></li><li><p>ident: anything.</p></li><li><p>path: , =&gt; : = &gt; ; as</p></li><li><p>meta: anything.</p></li><li><p>tt: anything.</p></li></ul><h3 id="\u5B8F\u8C03\u8BD5" tabindex="-1">\u5B8F\u8C03\u8BD5 <a class="header-anchor" href="#\u5B8F\u8C03\u8BD5" aria-hidden="true">#</a></h3><h4 id="_1-trace-macros" tabindex="-1">1. trace_macros <a class="header-anchor" href="#_1-trace-macros" aria-hidden="true">#</a></h4><p>trace_macros!(true); \u8BBE\u7F6E\u4EE5\u540E\u80FD\u591F\u5C06\u5B8F\u5C55\u5F00, \u6253\u5370\u6BCF\u4E00\u4E2A\u6B65\u9AA4. trace_macros!(false); \u505C\u6B62\u6253\u5370</p><h4 id="_2-log-syntax" tabindex="-1">2. log_syntax! <a class="header-anchor" href="#_2-log-syntax" aria-hidden="true">#</a></h4><p>\u6B64\u5B8F\u80FD\u591F\u5728\u7EC8\u7AEF\u6253\u5370\u4F20\u9012\u7ED9\u4ED6\u7684\u6BCF\u4E00\u4E2Atoken,\u65B9\u4FBF\u8C03\u8BD5</p><h4 id="_3-\u5B8F\u5C55\u5F00" tabindex="-1">3. \u5B8F\u5C55\u5F00 <a class="header-anchor" href="#_3-\u5B8F\u5C55\u5F00" aria-hidden="true">#</a></h4><p>rustc -Z unstable-options --pretty expanded <a href="http://hello.rs" target="_blank" rel="noopener noreferrer">hello.rs</a></p><h3 id="\u5173\u4E8E\u7EBF\u7A0B\u5B89\u5168" tabindex="-1">\u5173\u4E8E\u7EBF\u7A0B\u5B89\u5168 <a class="header-anchor" href="#\u5173\u4E8E\u7EBF\u7A0B\u5B89\u5168" aria-hidden="true">#</a></h3><h4 id="send-sync" tabindex="-1">send &amp;&amp; Sync <a class="header-anchor" href="#send-sync" aria-hidden="true">#</a></h4><p>Rust\u63D0\u4F9B\u4E86Send\u548CSync\u4E24\u4E2A\u6807\u7B7Etrait\uFF0C\u5B83\u4EEC\u662FRust\u2F46\u6570\u636E\u7ADE\u4E89\u5E76\u53D1\u7684\u57FA\u2F6F\u3002</p><ul><li>\u5B9E\u73B0\u4E86Send\u7684\u7C7B\u578B\uFF0C\u53EF\u4EE5\u5B89\u5168\u5730\u5728\u7EBF\u7A0B\u95F4\u4F20\u9012\u503C\uFF0C\u4E5F\u5C31\u662F\u8BF4\u53EF\u4EE5\u8DE8\u7EBF\u7A0B\u4F20\u9012\u6240\u6709\u6743\u3002</li><li>\u5B9E\u73B0\u4E86Sync\u7684\u7C7B\u578B\uFF0C\u53EF\u4EE5\u8DE8\u7EBF\u7A0B\u5B89\u5168\u5730\u4F20\u9012\u5171\u4EAB\uFF08\u4E0D\u53EF\u53D8\uFF09\u5F15\u2F64(&amp;T)\u3002 \u5178\u578B\u7684\u6CA1\u6709\u5B9E\u73B0Sync\u7684\u4F8B\u5B50: Cell\u548CRefCell (\u591A\u4E2A\u7EBF\u7A0B\u540C\u65F6\u8BFB\u4F1A\u6709\u95EE\u9898) \u5178\u578B\u7684\u6CA1\u6709\u5B9E\u73B0Send\u7684\u4F8B\u5B50: Rc</li></ul><h2 id="\u5173\u4E8Easync\u548Cawait" tabindex="-1">\u5173\u4E8Easync\u548Cawait <a class="header-anchor" href="#\u5173\u4E8Easync\u548Cawait" aria-hidden="true">#</a></h2><h3 id="await" tabindex="-1">await <a class="header-anchor" href="#await" aria-hidden="true">#</a></h3><p>\u5982\u679CExecutor\u662F\u591A\u7EBF\u7A0B\u7684,\u90A3\u4E48\u6BCF\u4E00\u4E2A.await\u90FD\u53EF\u80FD\u5F15\u53D1\u4EFB\u52A1\u5728\u4E0D\u540C\u7EBF\u7A0B\u4E4B\u95F4\u53D1\u9001 \u56E0\u6B64\u4EFB\u52A1\u5FC5\u987B\u5B9E\u73B0Send+Sync</p><p>Similarly, it isn&#39;t a good idea to hold a traditional non-futures-aware lock across an .await, as it can cause the threadpool to lock up: one task could take out a lock, .await and yield to the executor, allowing another task to attempt to take the lock and cause a deadlock. To avoid this, use the Mutex in futures::lock rather than the one from std::sync.</p><p>\u5728Excutor\u4E2D\u4E5F\u662F\u4E0D\u9002\u5B9C\u4F7F\u7528\u666E\u901A\u7684lock,\u8981\u4F7F\u7528futures\u63D0\u4F9B\u7684\u9501</p><h4 id="await\u548Cawait\u4EE3\u7801\u7684\u7FFB\u8BD1" tabindex="-1">await\u548Cawait\u4EE3\u7801\u7684\u7FFB\u8BD1 <a class="header-anchor" href="#await\u548Cawait\u4EE3\u7801\u7684\u7FFB\u8BD1" aria-hidden="true">#</a></h4><p>\u4E00\u4E2A\u7B80\u5355\u7684\u4F8B\u5B50,\u4E0D\u8003\u8651\u590D\u6742\u7684</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">let</span> fut_one <span class="token operator">=</span> <span class="token punctuation">...</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> fut_two <span class="token operator">=</span> <span class="token punctuation">...</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
    fut_one<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
    fut_two<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u8FD9\u6BB5\u4EE3\u7801\u6700\u7EC8\u4F1A\u88AB\u7FFB\u8BD1\u6210\u5982\u4E0B:</p><div class="language-rust line-numbers-mode"><pre><code>
<span class="token comment">// The \`Future\` type generated by our \`async { ... }\` block</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">AsyncFuture</span> <span class="token punctuation">{</span>
    fut_one<span class="token punctuation">:</span> <span class="token class-name">FutOne</span><span class="token punctuation">,</span>
    fut_two<span class="token punctuation">:</span> <span class="token class-name">FutTwo</span><span class="token punctuation">,</span>
    state<span class="token punctuation">:</span> <span class="token class-name">State</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// List of states our \`async\` block can be in</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>
    <span class="token class-name">AwaitingFutOne</span><span class="token punctuation">,</span>
    <span class="token class-name">AwaitingFutTwo</span><span class="token punctuation">,</span>
    <span class="token class-name">Done</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Future</span> <span class="token keyword">for</span> <span class="token class-name">AsyncFuture</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Output</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> cx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">loop</span> <span class="token punctuation">{</span>
            <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token punctuation">{</span>
                <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">AwaitingFutOne</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>fut_one<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">AwaitingFutTwo</span><span class="token punctuation">,</span>
                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">AwaitingFutTwo</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>fut_two<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Done</span><span class="token punctuation">,</span>
                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Done</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="pinning" tabindex="-1">Pinning <a class="header-anchor" href="#pinning" aria-hidden="true">#</a></h3><p>Pin\u4E3B\u8981\u662F\u7ED9\u501F\u7528\u670D\u52A1\u7684&amp;T\u548C&amp;mut T,\u786E\u4FDD\u88AB\u501F\u7528\u7684\u5BF9\u8C61\u4E0D\u88AB\u79FB\u52A8.</p><p>\u501F\u7528\u7684\u4F7F\u7528\u4F8B\u5B50</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> read_into_buf_fut <span class="token operator">=</span> <span class="token function">read_into_buf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    read_into_buf_fut<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u8FD9\u90E8\u5206\u4EE3\u7801\u5982\u4F55\u7FFB\u8BD1\u5462?</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">ReadIntoBuf</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    buf<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// points to \`x\` below</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">AsyncFuture</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    read_into_buf_fut<span class="token punctuation">:</span> <span class="token class-name">ReadIntoBuf</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;what_lifetime</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u5173\u952E\u95EE\u9898\u662F&amp;T\u672C\u8D28\u4E0A\u662F\u4E00\u4E2A\u6307\u9488,\u90A3\u4E48AsyncFuture\u968F\u65F6\u53EF\u80FD\u88AB\u79FB\u52A8,\u90A3\u4E48ReadIntoBuf\u4E2D\u7684\u8FD9\u4E2A&amp;T\u6307\u9488\u80AF\u5B9A\u4F1A\u5931\u6548 \u56E0\u6B64\u9700\u8981\u4F7F\u7528Pin\u6765\u4FDD\u5B58. Pin\u6709\u51E0\u79CD<code>Pin&lt;&amp;mut T&gt;, Pin&lt;&amp;T&gt;, Pin&lt;Box&lt;T&gt;&gt;</code>,\u4E3B\u8981\u662F\u786E\u4FDD\u5BF9\u5E94\u7684T\u4E0D\u4F1A\u88AB\u79FB\u52A8.</p><h3 id="stream" tabindex="-1">Stream <a class="header-anchor" href="#stream" aria-hidden="true">#</a></h3><p>\u7406\u89E3Stream\u7684\u4E00\u4E2A\u5173\u952E\u5C31\u662F,\u8FD4\u56DEReady,\u91CC\u9762\u53EF\u80FD\u662FSome,\u4E5F\u53EF\u80FD\u662FNone,\u5982\u679C\u662FNone,\u8868\u793AStream\u5173\u95ED\u4E86.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">trait</span> <span class="token type-definition class-name">Stream</span> <span class="token punctuation">{</span>
    <span class="token comment">/// The type of the value yielded by the stream.</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span>

    <span class="token comment">/// Attempt to resolve the next item in the stream.</span>
    <span class="token comment">/// Retuns \`Poll::Pending\` if not ready, \`Poll::Ready(Some(x))\` if a value</span>
    <span class="token comment">/// is ready, and \`Poll::Ready(None)\` if the stream has completed.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">poll_next</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> cx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
        <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">send_recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">BUFFER_SIZE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token keyword">mut</span> tx<span class="token punctuation">,</span> <span class="token keyword">mut</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token constant">BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">drop</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \`StreamExt::next\` is similar to \`Iterator::next\`, but returns a</span>
    <span class="token comment">// type that implements \`Future&lt;Output = Option&lt;T&gt;&gt;\`.</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rx<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rx<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">,</span> rx<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="atmoic" tabindex="-1">atmoic <a class="header-anchor" href="#atmoic" aria-hidden="true">#</a></h2><p>atomic Ordering\u603B\u5171\u6709\u4E94\u79CD\u987A\u5E8F</p><ol><li>\u6392\u5E8F\u4E00\u81F4\u6027\u987A\u5E8F: SeqCst\u3002</li><li>\u81EA\u7531\u987A\u5E8F: Relaxed (\u611F\u89C9\u7C7B\u4F3Cc\u8BED\u8A00\u4E2D\u7684volatile)</li><li>\u5176\u4ED6: Release,Acquire,AcqRel Rust\u652F\u6301\u76845\u79CD\u5185\u5B58\u987A\u5E8F\u4E0E\u5176\u5E95\u5C42\u7684LLVM\u652F\u6301\u7684\u5185\u5B58\u987A\u5E8F\u662F\u4E00\u81F4\u7684</li></ol><h3 id="release-acquire-ordering" tabindex="-1">Release-Acquire ordering <a class="header-anchor" href="#release-acquire-ordering" aria-hidden="true">#</a></h3><p>\u5728\u8FD9\u79CD\u6A21\u578B\u4E0B\uFF0Cstore()\u4F7F\u7528memory_order_release\uFF0C\u800Cload()\u4F7F\u7528memory_order_acquire\u3002\u8FD9\u79CD\u6A21\u578B\u6709\u4E24\u79CD\u6548\u679C\uFF0C\u7B2C\u4E00\u79CD\u662F\u53EF\u4EE5\u9650\u5236 CPU \u6307\u4EE4\u7684\u91CD\u6392\uFF1A</p><p>\u5728store()\u4E4B\u524D\u7684\u6240\u6709\u8BFB\u5199\u64CD\u4F5C\uFF0C\u4E0D\u5141\u8BB8\u88AB\u79FB\u52A8\u5230\u8FD9\u4E2Astore()\u7684\u540E\u9762\u3002 \u5728load()\u4E4B\u540E\u7684\u6240\u6709\u8BFB\u5199\u64CD\u4F5C\uFF0C\u4E0D\u5141\u8BB8\u88AB\u79FB\u52A8\u5230\u8FD9\u4E2Aload()\u7684\u524D\u9762\u3002 \u53C2\u8003<a href="https://senlinzhan.github.io/2017/12/04/cpp-memory-order/" target="_blank" rel="noopener noreferrer">\u7406\u89E3 C++ \u7684 Memory Order</a></p><div class="language-cpp line-numbers-mode"><pre><code>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> ready<span class="token punctuation">{</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    data <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                                       <span class="token comment">// A</span>
    ready<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>memory_order_release<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// B</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ready<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_acquire<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// C</span>
        <span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// never failed              // D</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="memory-order-relaxed" tabindex="-1">memory_order_relaxed <a class="header-anchor" href="#memory-order-relaxed" aria-hidden="true">#</a></h5><p>Relaxed operation: there are no synchronization or ordering constraints imposed on other reads or writes, only this operation&#39;s atomicity is guaranteed (see Relaxed ordering below)</p><h5 id="memory-order-consume" tabindex="-1">memory_order_consume <a class="header-anchor" href="#memory-order-consume" aria-hidden="true">#</a></h5><p>A load operation with this memory order performs a consume operation on the affected memory location: no reads or writes in the current thread dependent on the value currently loaded can be reordered before this load. Writes to data-dependent variables in other threads that release the same atomic variable are visible in the current thread. On most platforms, this affects compiler optimizations only (see Release-Consume ordering below)</p><h5 id="memory-order-acquire" tabindex="-1">memory_order_acquire <a class="header-anchor" href="#memory-order-acquire" aria-hidden="true">#</a></h5><p>A load operation with this memory order performs the acquire operation on the affected memory location: no reads or writes in the current thread can be reordered before this load. All writes in other threads that release the same atomic variable are visible in the current thread (see Release-Acquire ordering below)</p><h5 id="memory-order-release" tabindex="-1">memory_order_release <a class="header-anchor" href="#memory-order-release" aria-hidden="true">#</a></h5><p>A store operation with this memory order performs the release operation: no reads or writes in the current thread can be reordered after this store. All writes in the current thread are visible in other threads that acquire the same atomic variable (see Release-Acquire ordering below) and writes that carry a dependency into the atomic variable become visible in other threads that consume the same atomic (see Release-Consume ordering below).</p><h5 id="memory-order-acq-rel" tabindex="-1">memory_order_acq_rel <a class="header-anchor" href="#memory-order-acq-rel" aria-hidden="true">#</a></h5><p>A read-modify-write operation with this memory order is both an acquire operation and a release operation. No memory reads or writes in the current thread can be reordered before or after this store. All writes in other threads that release the same atomic variable are visible before the modification and the modification is visible in other threads that acquire the same atomic variable.</p><h5 id="memory-order-seq-cst" tabindex="-1">memory_order_seq_cst <a class="header-anchor" href="#memory-order-seq-cst" aria-hidden="true">#</a></h5><p>A load operation with this memory order performs an acquire operation, a store performs a release operation, and read-modify-write performs both an acquire operation and a release operation, plus a single total order exists in which all threads observe all modifications in the same order (see Sequentially-consistent ordering below)</p><h3 id="sized\u548C-sized" tabindex="-1">Sized\u548C?Sized <a class="header-anchor" href="#sized\u548C-sized" aria-hidden="true">#</a></h3><p>?Sized\u5BF9\u4E8ET\u7684\u7EA6\u675F\u4E3B\u8981\u662F\u6307\u53EF\u4EE5\u662F\u56FA\u5B9A\u5927\u5C0F\u7C7B\u578B\u4E5F\u53EF\u4EE5\u8BF4DST,\u5BF9\u4E8EDST\u6765\u8BF4,\u53EF\u4EE5\u5B9A\u4E49 \u4F46\u662F\u7528\u7684\u65F6\u5019\u53EA\u80FD\u662F\u6307\u9488,\u6BD4\u5982\u4E0B\u9762\u7684\u4F8B\u5B50.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">FooSized</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cell<span class="token punctuation">::</span></span><span class="token class-name">UnsafeCell</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> h_s  <span class="token operator">=</span> <span class="token class-name">FooSized</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> h_s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _s<span class="token operator">=</span><span class="token class-name">UnsafeCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>h_s<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="borrow-\u548Casref\u4E24\u4E2Atrait\u7684\u5173\u7CFB" tabindex="-1">Borrow \u548CAsRef\u4E24\u4E2ATrait\u7684\u5173\u7CFB <a class="header-anchor" href="#borrow-\u548Casref\u4E24\u4E2Atrait\u7684\u5173\u7CFB" aria-hidden="true">#</a></h3><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">AsRef</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">as_ref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Borrow</span><span class="token operator">&lt;</span><span class="token class-name">Borrowed</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">borrow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">Borrowed</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u4ECE\u5F62\u5F0F\u4E0A\u770B,\u4ED6\u4EEC\u662F\u5B8C\u5168\u4E00\u6837\u7684,\u53EA\u662F\u51FA\u4E8E\u8BBE\u8BA1\u7684\u76EE\u7684\u4E0D\u4E00\u6837,\u4E0D\u540C\u7684\u540D\u5B57\u662F\u8BA9\u4F7F\u7528\u8005\u5728\u4E0D\u540C\u7684\u573A\u666F\u4E0B\u4F7F\u7528.</p><p>Choose Borrow when you want to abstract over different kinds of borrowing, or when you\u2019re building a data structure that treats owned and borrowed values in equivalent ways, such as hashing and comparison.</p><p>Choose AsRef when you want to convert something to a reference directly, and you\u2019re writing generic code.</p><h2 id="phantomdata\u7684\u4E00\u4E9B\u7528\u6CD5" tabindex="-1">PhantomData\u7684\u4E00\u4E9B\u7528\u6CD5 <a class="header-anchor" href="#phantomdata\u7684\u4E00\u4E9B\u7528\u6CD5" aria-hidden="true">#</a></h2><p>\u5728\u770Btokio\u7684\u4EE3\u7801\u4E2D\u53D1\u73B0\u7684,</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CachedParkThread</span> <span class="token punctuation">{</span>
    _anchor<span class="token punctuation">:</span> <span class="token class-name">PhantomData</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">/// Used to ensure the invariants are respected</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">GenerationGuard</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/// Worker reference</span>
    worker<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">Worker</span><span class="token punctuation">,</span>

    <span class="token comment">/// Prevent \`Sync\` access</span>
    _p<span class="token punctuation">:</span> <span class="token class-name">PhantomData</span><span class="token operator">&lt;</span><span class="token class-name">Cell</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Enter</span> <span class="token punctuation">{</span>
    _p<span class="token punctuation">:</span> <span class="token class-name">PhantomData</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u8FD9\u91CC\u7684\u7528\u6CD5\u76EE\u7684\u662F\u963B\u6B62Send,Sync\u7684\u81EA\u52A8\u5B9E\u73B0,\u9632\u6B62\u8FD9\u4E9B\u7ED3\u6784\u4F53\u8DE8\u7EBF\u7A0B\u4F20\u9012.</p>`,150),o=[t];function l(c,r,i,u,k,d){return a(),s("div",null,o)}var h=n(p,[["render",l]]);export{b as __pageData,h as default};
