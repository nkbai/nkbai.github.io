import{o as n,c as s,e as a}from"./app.7522cc54.js";const e='{"title":"wire_common","description":"","frontmatter":{"title":"wire_common","date":"2018-11-12T11:07:31.000Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"基于chan的buf管理","slug":"基于chan的buf管理"},{"level":2,"title":"VarInt编码","slug":"varint编码"},{"level":2,"title":"VarBytes,VarString编码方式","slug":"varbytes-varstring编码方式"},{"level":2,"title":"比特币的消息通信","slug":"比特币的消息通信"},{"level":3,"title":"消息往来","slug":"消息往来"},{"level":3,"title":"读取消息","slug":"读取消息"},{"level":3,"title":"发送消息","slug":"发送消息"},{"level":3,"title":"消息类型验证","slug":"消息类型验证"}],"relativePath":"btcd/wire_common.md","lastUpdated":1561507892000}',t={},p=[a('<h1 id="btcd-wire-common-go"><a class="header-anchor" href="#btcd-wire-common-go" aria-hidden="true">#</a> btcd/wire/common.go</h1><h2 id="基于chan的buf管理"><a class="header-anchor" href="#基于chan的buf管理" aria-hidden="true">#</a> 基于chan的buf管理</h2><p>type binaryFreeList chan []byte //数字缓冲区 type scriptFreeList chan []byte //脚本缓冲区</p><p>这里的思路还是比较巧妙的,使用了chan的方式来管理[]byte,减少了不断的分配[]byte,同时使用chan来规避锁的问题. 我不知道go内部chan写入读出是否要用到锁,但是至少规避了List的管理.</p><p>Borrow 方法: 如果有可用的缓冲区则取走,否则分配 Return 方法:将用完的缓冲区通过chan放回去,为下次Borrow做准备.</p><p>这里面预设了最大的缓冲区大小,总的来说还是满巧妙的.</p><h2 id="varint编码"><a class="header-anchor" href="#varint编码" aria-hidden="true">#</a> VarInt编码</h2><p>0-0xfd 直接是0xfd, 0xfd-maxuint16 0xfd+ 两个字节的数值本身 maxuint16-maxuint32 0xfe+加四字节数值本身 maxuint32-maxuint64 0xff+8字节数值本身</p><p>实际上这类似于以太坊的RLP编码思路,</p><h2 id="varbytes-varstring编码方式"><a class="header-anchor" href="#varbytes-varstring编码方式" aria-hidden="true">#</a> VarBytes,VarString编码方式</h2><p>VarInt编码的长度+数据本身</p><h2 id="比特币的消息通信"><a class="header-anchor" href="#比特币的消息通信" aria-hidden="true">#</a> 比特币的消息通信</h2><h3 id="消息往来"><a class="header-anchor" href="#消息往来" aria-hidden="true">#</a> 消息往来</h3><pre><code>    Peer A Sends                          Peer B Responds\n----------------------------------------------------------------------------\ngetaddr message (MsgGetAddr)          addr message (MsgAddr)\ngetblocks message (MsgGetBlocks)      inv message (MsgInv)\ninv message (MsgInv)                  getdata message (MsgGetData)\ngetdata message (MsgGetData)          block message (MsgBlock) -or-\n                                      tx message (MsgTx) -or-\n                                      notfound message (MsgNotFound)\ngetheaders message (MsgGetHeaders)    headers message (MsgHeaders)\nping message (MsgPing)                pong message (MsgHeaders)* -or-\n                                      (none -- Ability to send message is enough)\n</code></pre><h3 id="读取消息"><a class="header-anchor" href="#读取消息" aria-hidden="true">#</a> 读取消息</h3><p>pver是消息版本信息,(BIP定义了很多版本),目前是FeeFilterVersion 70013 btcnet 有四种情况,分别如下</p><div class="language-go line-numbers-mode"><pre><code>\t<span class="token comment">// MainNet represents the main bitcoin network.</span>\n\tMainNet BitcoinNet <span class="token operator">=</span> <span class="token number">0xd9b4bef9</span>\n\n\t<span class="token comment">// TestNet represents the regression test network.</span>\n\tTestNet BitcoinNet <span class="token operator">=</span> <span class="token number">0xdab5bffa</span>\n\n\t<span class="token comment">// TestNet3 represents the test network (version 3).</span>\n\tTestNet3 BitcoinNet <span class="token operator">=</span> <span class="token number">0x0709110b</span>\n\n\t<span class="token comment">// SimNet represents the simulation test network.</span>\n\tSimNet BitcoinNet <span class="token operator">=</span> <span class="token number">0x12141c16</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-Go line-numbers-mode"><pre><code>\t<span class="token comment">// Use the most recent protocol version supported by the package and the</span>\n\t<span class="token comment">// main bitcoin network.</span>\n\tpver <span class="token operator">:=</span> wire<span class="token punctuation">.</span>ProtocolVersion\n\tbtcnet <span class="token operator">:=</span> wire<span class="token punctuation">.</span>MainNet\n\n\t<span class="token comment">// Reads and validates the next bitcoin message from conn using the</span>\n\t<span class="token comment">// protocol version pver and the bitcoin network btcnet.  The returns</span>\n\t<span class="token comment">// are a wire.Message, a []byte which contains the unmarshalled</span>\n\t<span class="token comment">// raw payload, and a possible error.</span>\n\tmsg<span class="token punctuation">,</span> rawPayload<span class="token punctuation">,</span> err <span class="token operator">:=</span> wire<span class="token punctuation">.</span><span class="token function">ReadMessage</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> pver<span class="token punctuation">,</span> btcnet<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Log and handle the error</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="发送消息"><a class="header-anchor" href="#发送消息" aria-hidden="true">#</a> 发送消息</h3><div class="language-Go line-numbers-mode"><pre><code>\t<span class="token comment">// Use the most recent protocol version supported by the package and the</span>\n\t<span class="token comment">// main bitcoin network.</span>\n\tpver <span class="token operator">:=</span> wire<span class="token punctuation">.</span>ProtocolVersion\n\tbtcnet <span class="token operator">:=</span> wire<span class="token punctuation">.</span>MainNet\n\n\t<span class="token comment">// Create a new getaddr bitcoin message.</span>\n\tmsg <span class="token operator">:=</span> wire<span class="token punctuation">.</span><span class="token function">NewMsgGetAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token comment">// Writes a bitcoin message msg to conn using the protocol version</span>\n\t<span class="token comment">// pver, and the bitcoin network btcnet.  The return is a possible</span>\n\t<span class="token comment">// error.</span>\n\terr <span class="token operator">:=</span> wire<span class="token punctuation">.</span><span class="token function">WriteMessage</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> pver<span class="token punctuation">,</span> btcnet<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Log and handle the error</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="消息类型验证"><a class="header-anchor" href="#消息类型验证" aria-hidden="true">#</a> 消息类型验证</h3><div class="language-go line-numbers-mode"><pre><code>\t<span class="token comment">// Assumes msg is already a valid concrete message such as one created</span>\n\t<span class="token comment">// via NewMsgVersion or read via ReadMessage.</span>\n\t<span class="token keyword">switch</span> msg <span class="token operator">:=</span> msg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">case</span> <span class="token operator">*</span>wire<span class="token punctuation">.</span>MsgVersion<span class="token punctuation">:</span>\n\t\t<span class="token comment">// The message is a pointer to a MsgVersion struct.</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Protocol version: %v&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>ProtocolVersion<span class="token punctuation">)</span>\n\t<span class="token keyword">case</span> <span class="token operator">*</span>wire<span class="token punctuation">.</span>MsgBlock<span class="token punctuation">:</span>\n\t\t<span class="token comment">// The message is a pointer to a MsgBlock struct.</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Number of tx in block: %v&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>TxnCount<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',22)];t.render=function(a,e,t,r,o,c){return n(),s("div",null,p)};export{e as __pageData,t as default};
