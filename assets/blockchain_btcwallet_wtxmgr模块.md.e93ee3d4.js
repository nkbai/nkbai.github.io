import{_ as e,c as s,o as a,N as n}from"./chunks/framework.3a9190c5.js";const k=JSON.parse('{"title":"wtxmgr模块","description":"","frontmatter":{"title":"wtxmgr模块","date":"2019-05-20T03:44:14.946Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/btcwallet/wtxmgr模块.md"}'),l={name:"blockchain/btcwallet/wtxmgr模块.md"},t=n(`<h1 id="wtxmgr模块" tabindex="-1">wtxmgr模块 <a class="header-anchor" href="#wtxmgr模块" aria-label="Permalink to &quot;wtxmgr模块&quot;">​</a></h1><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><ul><li>Storage for relevant wallet transactions</li><li>Ability to mark outputs as controlled by wallet</li><li>Unspent transaction output index</li><li>Balance tracking</li><li>Automatic spend tracking for transaction inserts and removals</li><li>Double spend detection and correction after blockchain reorgs</li><li>Scalable design: <ul><li>Utilizes similar prefixes to allow cursor iteration over relevant transaction inputs and outputs</li><li>Programmatically detectable errors, including encapsulation of errors from packages it relies on</li><li>Operates under its own walletdb namespace</li></ul></li></ul><h2 id="db-设计" tabindex="-1">db 设计 <a class="header-anchor" href="#db-设计" aria-label="Permalink to &quot;db 设计&quot;">​</a></h2><pre><code>bucketBlocks         = []byte(&quot;b&quot;)
bucketTxRecords      = []byte(&quot;t&quot;)
bucketCredits        = []byte(&quot;c&quot;)
bucketUnspent        = []byte(&quot;u&quot;)
bucketDebits         = []byte(&quot;d&quot;)
bucketUnmined        = []byte(&quot;m&quot;)
bucketUnminedCredits = []byte(&quot;mc&quot;)
bucketUnminedInputs  = []byte(&quot;mi&quot;)
</code></pre><ol><li><p>bucketBlocks 存储某个块有哪些Tx,没有考虑分叉 bucketBlocks: blockNumber=&gt;blockHash+blockTime+TxCount+[ TxHash1,TxHash2...]</p></li><li><p>bucketTxRecords 存储序列化的Tx,已经被打包上链的, TxHash+blockNumber+blockHash=&gt;SerializedTx</p></li><li><p>bucketCredits 存储未花费的UTXO,或者已花费,但是还没有确认的,这些都是我关注的 Txhash+blockNumber+blockHash+Index(outpoint中)=&gt;UTXO Amount[8个字节]+其他信息 其他信息: v[8]第0位表示是否已消费 1 表示已消费 v[8]第1位表示是否是找零 1 为找零 如果已经消费,那么第9个字节后还会有TxHash+blockNumber+blockHash+Index 表示这个UTXO在哪里被消费了.</p></li><li><p>bucketUnspent 存储需要我关注的未消费的UTXO,一旦该UTXO被消费,就会删除相关记录 存储outPoint=&gt;blockNumer+blocHash 该outpoint产生的block</p></li><li><p>bucketDebits <strong>这个需要解释清楚</strong> 记录钱包中一笔被消费的UTXO, debit啥意思呢 Txhash+blockNumber+blockHash+Index(outpoint中)=&gt;Amount[8字节]+Txhash+blockNumber+blockHash+Index</p></li><li><p>bucketUnmined 存储进入memPool,但是还未被打包的交易 TxHash=&gt;ReceivedTime(8字节)+SeralizedTx</p></li><li><p>bucketUnminedCredits 存储那些Tx输出是到我的钱包地址的OutPoint,并且这些Tx还未被打包 outpoint=&gt;UTXO Amount+change 参考bucketCredits</p></li><li><p>bucketUnminedInputs 保存已经消费的UTXO,但是还未被打包或者正在被打包 这些UTXO已经被进入mempool的Tx消费了. outpoint=&gt;[TxHash1,TxHash2] TxHash1,TxHash2可能会消费这个outpoint</p></li></ol><h2 id="store模块" tabindex="-1">store模块 <a class="header-anchor" href="#store模块" aria-label="Permalink to &quot;store模块&quot;">​</a></h2><p>store是wallet与数据库打交道的接口,通过store来管理Tx以及Balance.</p><h3 id="inserttx" tabindex="-1">InsertTx <a class="header-anchor" href="#inserttx" aria-label="Permalink to &quot;InsertTx&quot;">​</a></h3><p>rec表示当前新收到的Tx, block不为空则是Tx所在块,空表示来自mempool的tx</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Store</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InsertTx</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ns walletdb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ReadWriteBucket</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rec </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">TxRecord</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> block </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">BlockMeta</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="来自mempool的tx" tabindex="-1">来自memPool的Tx <a class="header-anchor" href="#来自mempool的tx" aria-label="Permalink to &quot;来自memPool的Tx&quot;">​</a></h4><p>对于来自MemPool中的Tx,则block为空,</p><ol><li>首先将Tx放入bucketUnmined TxHash=&gt;ReceivedTime(8字节)+SeralizedTx</li><li>然后将Tx中的每一个TxIn放入bucketUnminedInputs outpoint=&gt;[TxHash1,TxHash2]</li></ol><h4 id="来自链上的tx" tabindex="-1">来自链上的Tx <a class="header-anchor" href="#来自链上的tx" aria-label="Permalink to &quot;来自链上的Tx&quot;">​</a></h4><p>对于来自于链上的Tx,有block信息</p><ol><li>将Tx放入 bucketBlocks</li><li>放入bucketTxRecords,3-4步骤为updateMinedBalance</li><li>如果该Tx的output在bucketUnminedCredits中有记录,那么将其放入bucketCredits和bucketUnspent</li><li>更新Balance,因为在步骤三种增加了Balance.</li><li>如果bucketUnmined有这个Tx的记录,调用removeConflict删除</li><li>根据bucketUnminedInputs,搜索哪些bucketUnmined中的Tx(doubleSpendTx)和当前Tx产生了双花的,从bucketUnmined和bucketUnminedInputs删除这些记录</li><li>如果有其他在bucketUnminedInputs引用了该doubleSpendTx中的输出,则进行级联删除,因此removeConflict是递归调用.</li></ol><h3 id="addcredit-添加可消费的utxo" tabindex="-1">AddCredit 添加可消费的UTXO <a class="header-anchor" href="#addcredit-添加可消费的utxo" aria-label="Permalink to &quot;AddCredit 添加可消费的UTXO&quot;">​</a></h3><p>收到了一个我关注的Tx,其中某个Output的地址在我的钱包之中,这时候才调用AddCredit rec: 其中某个输出是给我的那个Tx index:第几个输出是给我的 block:包含这个rec的块 change: Internal returns true if the backing address was created for internal use such as a change output of a transaction. 我的理解就是找零地址 返回值</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Store</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AddCredit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ns walletdb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ReadWriteBucket</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rec </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">TxRecord</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> block </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">BlockMeta</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index </span><span style="color:#C792EA;">uint32</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> change </span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="来自mempool的tx-1" tabindex="-1">来自mempool的Tx <a class="header-anchor" href="#来自mempool的tx-1" aria-label="Permalink to &quot;来自mempool的Tx&quot;">​</a></h4><p>block 是nil表示来自mempool</p><ol><li>如果outpoint已经在bucketUnminedCredits中了,直接结束</li><li>如果outpoint已经在bucketUnspent,直接结束</li><li>将这个outpoint放入bucketUnminedCredits</li></ol><h4 id="来自链上的tx-1" tabindex="-1">来自链上的Tx <a class="header-anchor" href="#来自链上的tx-1" aria-label="Permalink to &quot;来自链上的Tx&quot;">​</a></h4><p>block 表示包含该Tx的块信息</p><ol><li>如果bucketCredits包含该outpoint,结束</li><li>在bucketCredits记录该outpoint</li><li>调用putMinedBalance增加该outpoint的Amount到Balance</li><li>将该outpoint放入bucketUnspent</li></ol><p>InsertTx和AddCredit的调用关系 一般是InsertTx(memPool),addCredit(mempool),InsertTx(block!=nil),addCredit(block!=nil)</p><h3 id="rollback函数" tabindex="-1">Rollback函数 <a class="header-anchor" href="#rollback函数" aria-label="Permalink to &quot;Rollback函数&quot;">​</a></h3><p>当发生块重组的时候需要rollback</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Rollback removes all blocks at height onwards, moving any transactions within</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// each block to the unconfirmed pool.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Store</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Rollback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ns walletdb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ReadWriteBucket</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height </span><span style="color:#C792EA;">int32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rollback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ns</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个函数非常复杂, 深入此函数也可以看出链重组的时候相关的数据应该如何处理. 相比与以太坊的StateTransition模型,这里要复杂很多.</p><ol><li>首先按照块高度倒着遍历每一块</li><li>针对当前块中的每一个Tx进行操作</li><li>从bucketTxRecords中删除该Tx</li><li>如果是coinbaseTx,从bucketUnspent和bucketCredits删除相关记录,然后回到2. 如果coinbase已经被消费,则参考9</li><li>把Tx返回bucketUnmined</li><li>遍历Tx的每一个TxIn,在bucketUnminedInputs重新记录依赖关系 6.1 如果bucketDebits中有记录,则表示是我的一个UTXO被消费了,需要撤销 6.2 重新将该UTXO从bucketDebits删除, 6.3 将该UTXO重新放回bucketUnspent, <strong>我的问题,bucketCredits的记录怎么办?</strong> 6.4 minedBalance重新加回去</li><li>遍历Tx的每一个TxOut 7.1 如果Txout是我的钱包地址,则将该TxOut放回bucketUnminedCredits 7.2 删除bucketCredits中的记录 7.3 删除bucketUnspent的记录 7.4 minedBalance重新减回去</li><li>1-7循环结束以后,从bucketBlocks删除Block记录</li><li>遍历coinBaseCredits(来自于步骤4) 将所有依赖该Tx的bucketUnminedInputs和bucketUnminedCredits中的记录全删除 调用removeConflict递归删除依赖 <strong>不明白的是对于那些已经上链的交易的交易怎么处理? 也就是CoinBase-&gt;Tx1-&gt;Tx2,Tx2已经上链了</strong></li></ol>`,32),o=[t];function r(i,p,c,u,d,b){return a(),s("div",null,o)}const D=e(l,[["render",r]]);export{k as __pageData,D as default};
