import{_ as s,c as a,o as n,N as l}from"./chunks/framework.3a9190c5.js";const C=JSON.parse('{"title":"llvm 二次开发基础知识","description":"","frontmatter":{"title":"llvm 二次开发基础知识","date":"2023-03-23T03:57:03.000Z","draft":false,"tags":["静态分析\\"","llvm"],"series":["静态分析"],"categories":["技术相关"]},"headers":[],"relativePath":"static_analysis/llvm_programmers_mannual.md"}'),p={name:"static_analysis/llvm_programmers_mannual.md"},o=l(`<p>如果要对llvm进行二次开发,需要熟悉他基本的数据结构, 内容主要来自<a href="https://llvm.org/docs/ProgrammersManual.html" target="_blank" rel="noreferrer">LLVM Programmer’s Manual — LLVM 17.0.0git documentation</a>.</p><h2 id="核心api" tabindex="-1">核心api <a class="header-anchor" href="#核心api" aria-label="Permalink to &quot;核心api&quot;">​</a></h2><h3 id="isa-cast-dyn-cast" tabindex="-1">isa,cast,dyn_cast <a class="header-anchor" href="#isa-cast-dyn-cast" aria-label="Permalink to &quot;isa,cast,dyn_cast&quot;">​</a></h3><p>cpp编程中的常见操作,面向对象编程常见的概念.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isLoopInvariant</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Value</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">V</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Loop</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">L</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">isa</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Constant</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">V</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isa</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Argument</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">V</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isa</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">GlobalValue</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">V</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Otherwise, it must be an instruction...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">L</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">contains</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cast</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Instruction</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">V</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">getParent</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">AI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dyn_cast</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">AllocationInst</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">Val</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>isa_and_nonnull 和isa一样,不过传入null的时候,返回false</li><li>cast_or_null 和cast一样,可以处理null</li><li>dyn_cast_or_null 和dyn_cast一样,可以处理null</li></ul><h3 id="字符串处理" tabindex="-1">字符串处理 <a class="header-anchor" href="#字符串处理" aria-label="Permalink to &quot;字符串处理&quot;">​</a></h3><p>当需要处理含有null的字符串时,需要用到StringRef或Twine, 不能用const char*是因为null,不能用<code>std::string&amp;</code>是因为需要分配内存.</p><ul><li>StringRef 表示对一个字符串<strong>的只读引用</strong>,并且提供了常见的std::string上面的操作.</li><li>Twine 专门为了处理字符串拼接而存在, 延迟拼接以避免内存分配.</li></ul><h3 id="结构体的格式化" tabindex="-1">结构体的格式化 <a class="header-anchor" href="#结构体的格式化" aria-label="Permalink to &quot;结构体的格式化&quot;">​</a></h3><p>formatv 专用于字符串格式化的, printf的替代,方便易用,借鉴了python,c#的格式化字符串.</p><p>样式:<code>{N[[,align]:style]}</code></p><h4 id="自定义格式化" tabindex="-1">自定义格式化 <a class="header-anchor" href="#自定义格式化" aria-label="Permalink to &quot;自定义格式化&quot;">​</a></h4><ol><li><p>提供format_provider的特例</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">llvm</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">template</span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">format_provider</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyFooBar</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyFooBar</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">V</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">raw_ostream</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">Stream</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">StringRef</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">Style</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // Do whatever is necessary to format \`V\` into \`Stream\`</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    MyFooBar X</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string S </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> X</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>继承<code>llvm:FormatAdapter</code>, formatv检测到T继承自llvm:FormatAdapter时,会调用它的format进行处理.</p></li></ol><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">anything</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">format_int_custom</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">llvm</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FormatAdapter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">explicit</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">format_int_custom</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">N</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> llvm::</span><span style="color:#82AAFF;">FormatAdapter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F07178;">N</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">llvm</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">raw_ostream</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">Stream</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">StringRef</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">Style</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // Do whatever is necessary to format \`\`this-&gt;Item\`\` into \`\`Stream\`\`</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">llvm</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string S </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">anything</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">format_int_custom</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">string S</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Simple formatting of basic types and implicit string conversion.</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0} ({1:P})</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.35</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // S == &quot;7 (35.00%)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Out-of-order referencing and multi-referencing</span></span>
<span class="line"><span style="color:#82AAFF;">outs</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0} {2} {1} {0}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // prints &quot;1 3 test 1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Left, right, and center alignment</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0,7}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // S == &quot;      a&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0,-7}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // S == &quot;a      &quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0,=7}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // S == &quot;   a   &quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0,+7}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // S == &quot;      a&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Custom styles</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0:N} - {0:x} - {1:E}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12345</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123908342</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // S == &quot;12,345 - 0x3039 - 1.24E8&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Adapters</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fmt_align</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AlignStyle</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Center</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">));</span><span style="color:#676E95;font-style:italic;">  // S == &quot;  42   &quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fmt_repeat</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">));</span><span style="color:#676E95;font-style:italic;"> // S == &quot;hihihi&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fmt_pad</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">));</span><span style="color:#676E95;font-style:italic;"> // S == &quot;  hi      &quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Ranges</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> V </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make_range</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">V</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> V</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">()));</span><span style="color:#676E95;font-style:italic;"> // S == &quot;8, 9, 10&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0:$[+]}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make_range</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">V</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> V</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">()));</span><span style="color:#676E95;font-style:italic;"> // S == &quot;8+9+10&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{0:$[ + ]@[x]}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make_range</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">V</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> V</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">()));</span><span style="color:#676E95;font-style:italic;"> // S == &quot;0x8 + 0x9 + 0xA&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">isPhysReg</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">R</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">All virt regs should have been allocated already.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">llvm_unreachable</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X should be Foo or Bar here</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">Error 类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//自定义的错误类型</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">BadFileFormat</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ErrorInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BadFileFormat</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> ID</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string Path</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">BadFileFormat</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">StringRef</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">Path</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Path</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">str</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">raw_ostream</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">OS</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    OS </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> Path </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> is malformed</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">error_code</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">convertToErrorCode</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">make_error_code</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">object_error</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">parse_failed</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BadFileFormat</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">ID</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // This should be declared in the C++ file.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Error</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printFormattedFile</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">StringRef</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">Path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(&lt;</span><span style="color:#A6ACCD;">check </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> valid format</span><span style="color:#89DDFF;">&gt;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make_error</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BadFileFormat</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">Path</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> //返回特定的错误类型,这里的BadFileFormat必须继承ErrorInfo</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // print file contents.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Error</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">success</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>如何使用<code>Error. Expected&lt;T&gt; </code>可以隐形的转换为bool</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Expected</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FormattedFile</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">openFormattedFile</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">StringRef</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">Path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // If badly formatted, return an error.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> Err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">checkFormat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Path</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">move</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Err</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Otherwise return a FormattedFile instance.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FormattedFile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Path</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Error</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">processFormattedFile</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">StringRef</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">Path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Try to open a formatted file</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> FileOrErr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">openFormattedFile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Path</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;"> //error 应该是重载了bool判断操作符,c++坑真多.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // On success, grab a reference to the file and continue.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">File </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">FileOrErr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // On error, extract the Error value and return it.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> FileOrErr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">takeError</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>简单的错误:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// These two lines of code are equivalent:</span></span>
<span class="line"><span style="color:#82AAFF;">make_error</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">StringError</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bad executable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">errc</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">executable_format_error</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">createStringError</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">errc</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">executable_format_error</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bad executable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以动态判断error类型</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> ChildOrErr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMember</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">I</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> Err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ChildOrErr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">takeError</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isA</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">BadFileFormat</span><span style="color:#89DDFF;">&gt;())</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">consumeError</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">move</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">Err</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>拼接error:<code>DeferredErrs = joinErrors(std::move(DeferredErrs), std::move(Err));</code></p><h2 id="函数作为参数" tabindex="-1">函数作为参数 <a class="header-anchor" href="#函数作为参数" aria-label="Permalink to &quot;函数作为参数&quot;">​</a></h2><ol><li>原始的:</li></ol><p><code>void takeCallback(bool (*Callback)(Function *, void *), void *Cookie);</code></p><ol start="2"><li>函数模板</li></ol><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">template</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Callable</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">takeCallback</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Callable</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">Callback</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">Callback</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>function_ref <code>function_ref&lt;Ret(Param1, Param2, ...)&gt;</code> 有一个对Callable的隐式转换, c++为了支持新特性,还兼容老语法,所以越来越复杂,就像x86指令集</li></ol><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">visitBasicBlocks</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">F</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">function_ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">BasicBlock</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">Callback</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">BasicBlock </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">BB </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">F</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">Callback</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">BB</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="llvm-debug-使用" tabindex="-1">LLVM_DEBUG 使用 <a class="header-anchor" href="#llvm-debug-使用" aria-label="Permalink to &quot;LLVM_DEBUG 使用&quot;">​</a></h2><p>配合-debug选项,<code>llvm/Support/Debug.h</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">LLVM_DEBUG(dbgs() &lt;&lt; &quot;I am here!\\n&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ opt &lt; a.bc &gt; /dev/null -mypass</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;no output&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">$ opt &lt; a.bc &gt; /dev/null -mypass -debug</span></span>
<span class="line"><span style="color:#A6ACCD;">I am here!</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>还支持更细节的<code>DEBUG_TYPE</code></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DEBUG_TYPE</span><span style="color:#A6ACCD;"> &quot;foo&quot; //注意核心是这里的宏的定义,而不是下面的foo字符串</span></span>
<span class="line"><span style="color:#82AAFF;">LLVM_DEBUG</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">dbgs</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;foo&#39; debug type</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#undef</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">DEBUG_TYPE</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DEBUG_TYPE</span><span style="color:#A6ACCD;"> &quot;bar&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">LLVM_DEBUG</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">dbgs</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;bar&#39; debug type</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#undef</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">DEBUG_TYPE</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ opt &lt; a.bc &gt; /dev/null -mypass</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;no output&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">$ opt &lt; a.bc &gt; /dev/null -mypass -debug</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;foo&#39; debug type</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;bar&#39; debug type</span></span>
<span class="line"><span style="color:#A6ACCD;">$ opt &lt; a.bc &gt; /dev/null -mypass -debug-only=foo</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;foo&#39; debug type</span></span>
<span class="line"><span style="color:#A6ACCD;">$ opt &lt; a.bc &gt; /dev/null -mypass -debug-only=bar</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;bar&#39; debug type</span></span>
<span class="line"><span style="color:#A6ACCD;">$ opt &lt; a.bc &gt; /dev/null -mypass -debug-only=foo,bar</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;foo&#39; debug type</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;bar&#39; debug type</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="函数的图形化展示" tabindex="-1">函数的图形化展示 <a class="header-anchor" href="#函数的图形化展示" aria-label="Permalink to &quot;函数的图形化展示&quot;">​</a></h3><p><code>Function::viewCFG()</code></p><h2 id="核心数据类型" tabindex="-1">核心数据类型 <a class="header-anchor" href="#核心数据类型" aria-label="Permalink to &quot;核心数据类型&quot;">​</a></h2><p>位于<code>llvm/ADT/</code>下,一般用STL即可,</p><ol><li><p>llvm::ArrayRef</p></li><li><p><code>TinyPtrVector&lt;Type&gt;</code> 为只有一个或者0个元素的vector的优化版本</p></li><li><p><code>SmallVector&lt;Type, N&gt;</code> 有固定大小的vector,在栈上分配,无需malloc,是alloca的有效替代版本</p><p>一些示例</p></li></ol><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// DISCOURAGED: Clients cannot pass e.g. raw arrays.</span></span>
<span class="line"><span style="color:#82AAFF;">hardcodedContiguousStorage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SmallVectorImpl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">In</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ENCOURAGED: Clients can pass any contiguous storage of Foo.</span></span>
<span class="line"><span style="color:#82AAFF;">allowsAnyContiguousStorage</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ArrayRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> In</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">someFunc1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Foo Vec[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;"> /* ... */</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">hardcodedContiguousStorage</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Vec</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Error.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">allowsAnyContiguousStorage</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Vec</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Works.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// DISCOURAGED: Clients cannot pass e.g. SmallVector&lt;Foo, 8&gt;.</span></span>
<span class="line"><span style="color:#82AAFF;">hardcodedSmallSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SmallVector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">Out</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ENCOURAGED: Clients can pass any SmallVector&lt;Foo, N&gt;.</span></span>
<span class="line"><span style="color:#82AAFF;">allowsAnySmallSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SmallVectorImpl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">Out</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">someFunc2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  SmallVector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> Vec</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">hardcodedSmallSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Vec</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Error.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">allowsAnySmallSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Vec</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // Works.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="set类" tabindex="-1">Set类 <a class="header-anchor" href="#set类" aria-label="Permalink to &quot;Set类&quot;">​</a></h3><p>本质是一个有序的vector</p><ul><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#a-sorted-vector" target="_blank" rel="noreferrer">A sorted ‘vector’</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallset-h" target="_blank" rel="noreferrer">llvm/ADT/SmallSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallptrset-h" target="_blank" rel="noreferrer">llvm/ADT/SmallPtrSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-stringset-h" target="_blank" rel="noreferrer">llvm/ADT/StringSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-denseset-h" target="_blank" rel="noreferrer">llvm/ADT/DenseSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-sparseset-h" target="_blank" rel="noreferrer">llvm/ADT/SparseSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-sparsemultiset-h" target="_blank" rel="noreferrer">llvm/ADT/SparseMultiSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-foldingset-h" target="_blank" rel="noreferrer">llvm/ADT/FoldingSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#set" target="_blank" rel="noreferrer"></a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-setvector-h" target="_blank" rel="noreferrer">llvm/ADT/SetVector.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-uniquevector-h" target="_blank" rel="noreferrer">llvm/ADT/UniqueVector.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-immutableset-h" target="_blank" rel="noreferrer">llvm/ADT/ImmutableSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#other-set-like-container-options" target="_blank" rel="noreferrer">Other Set-Like Container Options</a></p></li><li></li></ul><h3 id="map类" tabindex="-1">Map类 <a class="header-anchor" href="#map类" aria-label="Permalink to &quot;Map类&quot;">​</a></h3><ul><li><a href="https://llvm.org/docs/ProgrammersManual.html#dss-sortedvectormap" target="_blank" rel="noreferrer">A sorted ‘vector’</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-stringmap-h" target="_blank" rel="noreferrer">llvm/ADT/StringMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-indexedmap-h" target="_blank" rel="noreferrer">llvm/ADT/IndexedMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-densemap-h" target="_blank" rel="noreferrer">llvm/ADT/DenseMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-ir-valuemap-h" target="_blank" rel="noreferrer">llvm/IR/ValueMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-intervalmap-h" target="_blank" rel="noreferrer">llvm/ADT/IntervalMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-intervaltree-h" target="_blank" rel="noreferrer">llvm/ADT/IntervalTree.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#map" target="_blank" rel="noreferrer"><strong>Map</strong></a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-mapvector-h" target="_blank" rel="noreferrer">llvm/ADT/MapVector.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-inteqclasses-h" target="_blank" rel="noreferrer">llvm/ADT/IntEqClasses.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-immutablemap-h" target="_blank" rel="noreferrer">llvm/ADT/ImmutableMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#other-map-like-container-options" target="_blank" rel="noreferrer">Other Map-Like Container Options</a></li></ul><h3 id="bit-类" tabindex="-1">Bit 类 <a class="header-anchor" href="#bit-类" aria-label="Permalink to &quot;Bit 类&quot;">​</a></h3><ul><li><a href="https://llvm.org/docs/ProgrammersManual.html#bitvector" target="_blank" rel="noreferrer">BitVector</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#smallbitvector" target="_blank" rel="noreferrer">SmallBitVector</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#sparsebitvector" target="_blank" rel="noreferrer">SparseBitVector</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#coalescingbitvector" target="_blank" rel="noreferrer">CoalescingBitVector</a></li></ul><h2 id="调试技术" tabindex="-1">调试技术 <a class="header-anchor" href="#调试技术" aria-label="Permalink to &quot;调试技术&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">source /path/to/llvm/src/utils/gdb-scripts/prettyprinters.py</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>让print更友好</p><h2 id="llvm中常用的操作" tabindex="-1">LLVM中常用的操作 <a class="header-anchor" href="#llvm中常用的操作" aria-label="Permalink to &quot;LLVM中常用的操作&quot;">​</a></h2><h3 id="遍历函数" tabindex="-1">遍历函数 <a class="header-anchor" href="#遍历函数" aria-label="Permalink to &quot;遍历函数&quot;">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Function </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">Func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">BasicBlock </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">BB </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Func</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Print out the name of the basic block if it has one, and then the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // number of instructions that it contains</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">errs</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basic block (name=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> BB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">) has </span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> BB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> instructions.</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">BasicBlock</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> BB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Instruction </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">I </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> BB</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   // The next statement works since operator&lt;&lt;(ostream&amp;,...)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   // is overloaded for Instruction&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">errs</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> I </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>也可以是外部的iterator:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">llvm/IR/InstIterator.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// F is a pointer to a Function instance</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">inst_iterator I </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inst_begin</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">F</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> E </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inst_end</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">F</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> I </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> E</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">I</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">errs</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">I </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>另一个统计function调用的例子:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> targetFunc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">OurFunctionPass</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionPass</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">OurFunctionPass</span><span style="color:#89DDFF;">():</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">callCounter</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">runOnFunction</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Function</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">F</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">BasicBlock </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">B </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> F</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">Instruction </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">I</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> B</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">CB </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dyn_cast</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CallBase</span><span style="color:#89DDFF;">&gt;(&amp;</span><span style="color:#F07178;">I</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // We know we&#39;ve encountered some kind of call instruction (call,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // invoke, or callbr), so we need to determine if it&#39;s a call to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // the function pointed to by m_func or not.</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CB</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getCalledFunction</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> targetFunc</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">callCounter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> callCounter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="def-use和use-def的遍历" tabindex="-1">def-use和use-def的遍历 <a class="header-anchor" href="#def-use和use-def的遍历" aria-label="Permalink to &quot;def-use和use-def的遍历&quot;">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Function </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">F </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">User </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">U </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> F</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">users</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">Instruction </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">Inst </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dyn_cast</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Instruction</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F07178;">U</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">errs</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">F is used in instruction:</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">errs</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">Inst </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">Instruction </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">pi </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> ...</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">Use </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">U </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pi</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">operands</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Value </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">v </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">U</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">llvm/IR/CFG.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">BasicBlock </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">BB </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> ...</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">BasicBlock </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">Pred </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">predecessors</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">BB</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="修改ir" tabindex="-1">修改IR <a class="header-anchor" href="#修改ir" aria-label="Permalink to &quot;修改IR&quot;">​</a></h3><ol><li>创建和插入指令</li><li>删除指令</li><li>替换指令</li><li>删除全局变量</li></ol><h2 id="llvm中的多线程" tabindex="-1">LLVM中的多线程 <a class="header-anchor" href="#llvm中的多线程" aria-label="Permalink to &quot;LLVM中的多线程&quot;">​</a></h2><p><strong>用完LLVM的api后,记得调用llvm_shutdown来释放llvm自己内部分配的内存</strong></p><p>ManagedStatic 解决静态变量初始化的问题,他已经考虑了单线程和多线程两种情况,所以直接使用,无需考虑多线程问题.</p><h2 id="核心类" tabindex="-1">核心类 <a class="header-anchor" href="#核心类" aria-label="Permalink to &quot;核心类&quot;">​</a></h2><p>注意这些类针对的都是IR</p><h3 id="type" tabindex="-1">Type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;Type&quot;">​</a></h3><ul><li><code>bool isIntegerTy() const</code>: Returns true for any integer type.</li><li><code>bool isFloatingPointTy()</code>: Return true if this is one of the five floating point types.</li><li><code>bool isSized()</code>: Return true if the type has known size. Things that don’t have a size are abstract types, labels and void.</li></ul><p>子类:</p><ul><li>IntegerType</li><li>SequentialType <ul><li>ArrayType</li><li>VectorType</li></ul></li><li>PointerType</li><li>StructType</li><li>FunctionType</li></ul><h3 id="module" tabindex="-1">Module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;Module&quot;">​</a></h3><p>是函数,全局变量,符号表的组合.</p><h3 id="value" tabindex="-1">Value <a class="header-anchor" href="#value" aria-label="Permalink to &quot;Value&quot;">​</a></h3><p>The <code>Value</code> class is the most important class in the LLVM Source base. It represents a typed value that may be used (among other things) as an operand to an instruction. There are many different types of <code>Value</code>s, such as <a href="https://llvm.org/docs/ProgrammersManual.html#constant" target="_blank" rel="noreferrer">Constant</a>s, <a href="https://llvm.org/docs/ProgrammersManual.html#argument" target="_blank" rel="noreferrer">Argument</a>s. Even <a href="https://llvm.org/docs/ProgrammersManual.html#instruction" target="_blank" rel="noreferrer">Instruction</a>s and <a href="https://llvm.org/docs/ProgrammersManual.html#c-function" target="_blank" rel="noreferrer">Function</a>s are <code>Value</code>s.</p><p>Value可以认为是某个Type的实例</p><h3 id="user" tabindex="-1">User <a class="header-anchor" href="#user" aria-label="Permalink to &quot;User&quot;">​</a></h3><p>The <code>User</code> class is the common base class of all LLVM nodes that may refer to <code>Value</code>s. It exposes a list of “Operands” that are all of the <code>Value</code>s that the User is referring to. The <code>User</code> class itself is a subclass of <code>Value</code>.</p><p>代表对Value的使用</p><h3 id="instruction" tabindex="-1">Instruction <a class="header-anchor" href="#instruction" aria-label="Permalink to &quot;Instruction&quot;">​</a></h3><p>就是IR中的指令</p><h3 id="constant" tabindex="-1">Constant <a class="header-anchor" href="#constant" aria-label="Permalink to &quot;Constant&quot;">​</a></h3><p>代表各种常量</p><ul><li>ConstantInt</li><li>ConstantFP</li><li>ConstantArray</li><li>ConstantStruct</li><li>GlobalValue</li></ul><h3 id="globalvalue" tabindex="-1">GlobalValue <a class="header-anchor" href="#globalvalue" aria-label="Permalink to &quot;GlobalValue&quot;">​</a></h3><p>比如函数,全局变量等</p><p>InternalLinkage是能不能对外链接,比如c语言中的static变量,</p><h3 id="function" tabindex="-1">Function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;Function&quot;">​</a></h3><p>代表函数</p><h3 id="globalvariable" tabindex="-1">GlobalVariable <a class="header-anchor" href="#globalvariable" aria-label="Permalink to &quot;GlobalVariable&quot;">​</a></h3><p>GobalValue的子类,代表全局变量</p><h3 id="basicblock" tabindex="-1">BasicBlock <a class="header-anchor" href="#basicblock" aria-label="Permalink to &quot;BasicBlock&quot;">​</a></h3><p>Instruction的Parent,其Parent是Function</p><h3 id="argument" tabindex="-1">Argument <a class="header-anchor" href="#argument" aria-label="Permalink to &quot;Argument&quot;">​</a></h3><p>参数</p><h2 id="llvm-开发资料来源" tabindex="-1">LLVM 开发资料来源: <a class="header-anchor" href="#llvm-开发资料来源" aria-label="Permalink to &quot;LLVM 开发资料来源:&quot;">​</a></h2><ul><li>reviews.llvm.org 有特性的实现细节和说明</li><li>llvm’s developers’ meeting 有很好的视频教程</li><li>单元测试</li></ul>`,102),e=[o];function r(t,c,F,y,i,D){return n(),a("div",null,e)}const u=s(p,[["render",r]]);export{C as __pageData,u as default};
