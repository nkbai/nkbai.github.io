import{o as n,c as s,e as a}from"./app.f8197458.js";const p='{"title":"5. 最长回文子串-另一种解法","description":"","frontmatter":{"title":"5. 最长回文子串-另一种解法","date":"2019-06-05T03:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["技术相关"]},"headers":[{"level":2,"title":"每天一道Rust-LeetCode(2019-06-05) 最长回文子串","slug":"每天一道rust-leetcode-2019-06-05-最长回文子串"},{"level":2,"title":"题目描述","slug":"题目描述"},{"level":2,"title":"解题过程","slug":"解题过程"},{"level":2,"title":"一点感悟","slug":"一点感悟"},{"level":2,"title":"其他","slug":"其他"}],"relativePath":"rust-leetcode/2019-06-05.md","lastUpdated":1582015486000}',t={},e=[a('<h2 id="每天一道rust-leetcode-2019-06-05-最长回文子串"><a class="header-anchor" href="#每天一道rust-leetcode-2019-06-05-最长回文子串" aria-hidden="true">#</a> 每天一道Rust-LeetCode(2019-06-05) 最长回文子串</h2><p>坚持每天一道题,刷题学习Rust. 接续昨天,最长会问字符串的另一种解法</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/longest-palindromic-substring/</a> 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><div class="language-"><pre><code>示例 1：\n\n输入: &quot;babad&quot;\n输出: &quot;bab&quot;\n注意: &quot;aba&quot; 也是一个有效答案。\n示例 2：\n\n输入: &quot;cbbd&quot;\n输出: &quot;bb&quot;\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="解题过程"><a class="header-anchor" href="#解题过程" aria-hidden="true">#</a> 解题过程</h2><p>思路: 怎么把规模大的问题化成规模小的问题进行解决 假设用m[i][j]表示从i到j是回文的长度 那么只有两种情况可以扩展出回文 m[i][j]是回文,当且仅当:</p><ol><li>m[i][j-1]是回文,并且m[i][j-1]长度是1,并且m[j-1]==m[j]</li><li>m[i+1][j-1]是回文,并且m[i]==m[j] 遍历的过程中记一个最长字符串即可.</li></ol><div class="language-rust line-numbers-mode"><pre><code>    <span class="token comment">//leetcode最快解法</span>\n    <span class="token comment">//.0:该元素坐标,.1 相同数值截止坐标</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">pre_prase</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//iter 转vector</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> l <span class="token operator">=</span> <span class="token number">0_usize</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> r <span class="token operator">=</span> <span class="token number">0_usize</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n            <span class="token keyword">while</span> l <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n                r <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">if</span> l <span class="token operator">&gt;</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> r <span class="token operator">&gt;</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            l <span class="token operator">=</span> r<span class="token punctuation">;</span>\n            r <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        result\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">longest_palindrome2</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> length <span class="token operator">=</span> chars<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//        println!(&quot;{:?}&quot;,chars);</span>\n\n        <span class="token comment">// 边界值的处理很垃圾。。。</span>\n        <span class="token keyword">match</span> length <span class="token punctuation">{</span>\n            <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> s<span class="token punctuation">,</span>\n            <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> s<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            _ <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//什么都不做</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> cur_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0_usize</span><span class="token punctuation">,</span> <span class="token number">0_usize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> cur_len <span class="token operator">=</span> <span class="token number">0_usize</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> max_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0_usize</span><span class="token punctuation">,</span> <span class="token number">0_usize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> max_len <span class="token operator">=</span> <span class="token number">0_usize</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> poses <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">pre_prase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;poses:{:?}&quot;</span><span class="token punctuation">,</span> poses<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> pos <span class="token keyword">in</span> poses <span class="token punctuation">{</span>\n            <span class="token comment">// 1 2 3 4 5 6</span>\n            <span class="token comment">//            i+=1;</span>\n\n            cur_pos <span class="token operator">=</span> pos<span class="token punctuation">;</span>\n            cur_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n            <span class="token comment">//从左右两边,选一个短的,这样也保证了后面cur.pos.1+j,cur.pos.0-j都在有效范围之内</span>\n            <span class="token keyword">let</span> ml <span class="token operator">=</span> <span class="token keyword">if</span> cur_pos<span class="token number">.0</span> <span class="token operator">&lt;</span> length <span class="token operator">-</span> cur_pos<span class="token number">.1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n                cur_pos<span class="token number">.0</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                length <span class="token operator">-</span> cur_pos<span class="token number">.1</span> <span class="token operator">-</span> <span class="token number">1</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> <span class="token keyword">mut</span> ml <span class="token operator">=</span> ml <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token comment">//            println!(&quot;cur_pos {:?}, mml {}&quot;,cur_pos,ml);</span>\n            <span class="token comment">//这个思路好处就是他并不是以字符为单位向左右展开,而是以字符串为单位向左右展开,节省了重复遍历的时间</span>\n            <span class="token comment">//相当于一种改进的从中间向两边扩展的情形</span>\n            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>ml <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> chars<span class="token punctuation">[</span>cur_pos<span class="token number">.1</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>cur_pos<span class="token number">.0</span> <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n                    cur_len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token number">2</span> <span class="token operator">*</span> cur_len <span class="token operator">+</span> cur_pos<span class="token number">.1</span> <span class="token operator">-</span> cur_pos<span class="token number">.0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> max_len <span class="token operator">+</span> max_pos<span class="token number">.1</span> <span class="token operator">-</span> max_pos<span class="token number">.0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n                max_len <span class="token operator">=</span> cur_len<span class="token punctuation">;</span>\n                max_pos <span class="token operator">=</span> cur_pos<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">//            println!(&quot;grow pos? {:?} len {}  {} &gt; {} &quot;,max_pos,max_len,cur_len + cur_pos.1 - cur_pos.0 + 1, max_len + max_pos.1 - max_pos.0 + 1);</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//        println!(&quot;res pos {:?} len {} &quot;,max_pos,max_len);</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> left <span class="token operator">=</span> max_pos<span class="token number">.0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> max_len<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> right <span class="token operator">=</span> max_pos<span class="token number">.1</span> <span class="token operator">+</span> max_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token comment">//        println!(&quot;left {} right {}&quot;,left,right);</span>\n        <span class="token keyword">for</span> i <span class="token keyword">in</span> left<span class="token punctuation">..</span>right <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n            v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//有没有办法不用push,直接用chars的slice方式呢?</span>\n        <span class="token punctuation">}</span>\n        v<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br></div></div><h2 id="一点感悟"><a class="header-anchor" href="#一点感悟" aria-hidden="true">#</a> 一点感悟</h2><p>这个解法是copy自leetcode别人的解法, 他并不以单个字符为单位进行扩展,而是以字符串为单位,省去了很多重复的工作. 这个复杂度低了很多,没有明确的证明过程,但是感觉应该是在O(N)复杂度,O(NlogN)最多</p><h2 id="其他"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>欢迎关注我的<a href="https://github.com/nkbai" target="_blank" rel="noopener noreferrer">github</a>,本项目文章所有代码都可以找到.</p>',13)];t.render=function(a,p,t,o,c,l){return n(),s("div",null,e)};export{p as __pageData,t as default};
