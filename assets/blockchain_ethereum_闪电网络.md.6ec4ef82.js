import{o as n,c as s,e as a}from"./app.9c6df70b.js";const e='{"title":"闪电网络","description":"","frontmatter":{"title":"闪电网络","date":"2018-09-12T06:16:20.000Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"\\b创建通道","slug":"创建通道"},{"level":2,"title":"数据库中 channel 的存储","slug":"数据库中-channel-的存储"},{"level":2,"title":"转发数据库结构","slug":"转发数据库结构"},{"level":2,"title":"数据库中的 graph","slug":"数据库中的-graph"},{"level":3,"title":"术语","slug":"术语"}],"relativePath":"blockchain/ethereum/闪电网络.md","lastUpdated":1561553438000}',t={},p=[a('<h1 id="闪电网络阅读"><a class="header-anchor" href="#闪电网络阅读" aria-hidden="true">#</a> 闪电网络阅读</h1><h2 id="创建通道"><a class="header-anchor" href="#创建通道" aria-hidden="true">#</a> \b创建通道</h2><pre class="mermaid loading">sequenceDiagram\n    participant A as Alice\n    participant B as Bob\n\n    A-&gt;&gt;B: lnwire.OpenChannel\n    B-&gt;&gt;A: lnwire.AcceptChannel\n   A-&gt;&gt;B:lnwire.FundingCreated\n   B-&gt;&gt;A:lnwire.FundingSigned\n   A-&gt;&gt;B:lnwire.FundingLocked\n   B-&gt;&gt;A:lnwire.FundingLocked</pre><p><mark>Bob就是等待通道创建事件,然后再等待6个确认以后就认为通道可以使用了.</mark></p><h2 id="数据库中-channel-的存储"><a class="header-anchor" href="#数据库中-channel-的存储" aria-hidden="true">#</a> 数据库中 channel 的存储</h2><pre class="mermaid loading">graph BT\n    open-chan-bucket--&gt;node1-pubkey\n    open-chan-bucket--&gt;node2-pubkey\n    open-chan-bucket--&gt;node3-pubkey\n    node1-pubkey--&gt;mainnet\n    node1-pubkey--&gt;testnet\n    mainnet--&gt;FundingOutPoint1[channel1]\n    mainnet--&gt;FundingOutPoint2[channel2]\n    FundingOutPoint1---channelInformation(ChanType,TotalMSatRecived...)\n    FundingOutPoint1---commitKey(localCommitment,remoteCommitment)\n    FundingOutPoint1---revocationStateKey(RemoteRevocation...)</pre><p>矩形表示 bucket 圆角矩形表示存储的序列化 Data</p><h2 id="转发数据库结构"><a class="header-anchor" href="#转发数据库结构" aria-hidden="true">#</a> 转发数据库结构</h2><pre class="mermaid loading">graph BT\nfwd-packages--&gt; short-channel-ID1\nfwd-packages--&gt; short-channel-ID2\nfwd-packages--&gt; short-channel-ID3\nshort-channel-ID1--&gt;height1\nshort-channel-ID1--&gt;height2\nheight1--&gt;add-updates\nheight1--&gt;fail-settle-updates\nheight1--&gt;fwd-filter-key(fwd-filter-key)\nheight1--&gt;ack-filter-key(ack-filter-key)\nheight1--&gt;settle-fail-filter-key(settle-fail-filter-key)\nadd-updates--&gt;idx:logupdate(idx:LogUpdate)\nfail-settle-updates--&gt;idx:LogUpdate</pre><p>height1,height2这些指的是foward HTLC的 height short-channel-ID 是一个8字节的通道 ID, 由 blocknumber,block 中的哪个 tx(tx 在通道中的Index),tx的哪个输出 (output index)</p><h2 id="数据库中的-graph"><a class="header-anchor" href="#数据库中的-graph" aria-hidden="true">#</a> 数据库中的 graph</h2><pre class="mermaid loading">graph BT\nnodeBucket[graph-node]--&gt;sourceKey(source-&gt;node public key)\nnodeBucket[graph-node]--&gt;nodePub1_node(node public key1-&gt;LightningNode1)\nnodeBucket[graph-node]--&gt;nodePub2_node(node public key2-&gt;LightningNode2)\n\nnodeBucket[graph-node]--&gt;aliasIndexBucket[alias]\nnodeBucket[graph-node]--&gt;nodeUpdateIndexBucket[graph-node-update-index]\naliasIndexBucket[alias]--&gt;nodePub1_nickName(node public key1-&gt;node1&#39;s nick name)</pre><p>source 是一个星型拓扑图的中心,实际上就是节点自身</p><pre class="mermaid loading">graph BT\nedgeBucket[graph-edge]--&gt;edgeIndexBucket[edge-index]\nedgeBucket[graph-edge]--&gt;channelPointBucket[chan-index]\nedgeIndexBucket--&gt;shortChannelID(shortChannelID-&gt;ChannelEdgeInfo)\nchannelPointBucket[chan-index]--&gt;ChannelPoint(FundingOutPoint-&gt;ShortChannelID)\nedgeBucket[graph-edge]--&gt;edgeKey(nodePub+ShortChannelID-&gt;ChannelEdgePolicy)</pre><p>剪辑 Graph</p><pre class="mermaid loading">graph BT\ngraphMetaBucket[graph-meta]--&gt;pruneLogBucket[prune-log]\npruneLogBucket[prune-log]--&gt;blockHeight_blockHash(block Height-&gt; block Hash)</pre><p>注意: 这里的 block Height 和 block Hash 就是指的链上某一块的高度(块号)和这个块的 hash 值</p><ol><li>存储在数据库中的一条通道,这个是没有方向的</li></ol><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// ChannelEdgeInfo represents a fully authenticated channel along with all its</span>\n<span class="token comment">// unique attributes. Once an authenticated channel announcement has been</span>\n<span class="token comment">// processed on the network, then an instance of ChannelEdgeInfo encapsulating</span>\n<span class="token comment">// the channels attributes is stored. The other portions relevant to routing</span>\n<span class="token comment">// policy of a channel are stored within a ChannelEdgePolicy for each direction</span>\n<span class="token comment">// of the channel.</span>\n<span class="token keyword">type</span> ChannelEdgeInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ChannelID is the unique channel ID for the channel. The first 3</span>\n\t<span class="token comment">// bytes are the block height, the next 3 the index within the block,</span>\n\t<span class="token comment">// and the last 2 bytes are the output index for the channel.</span>\n\tChannelID <span class="token builtin">uint64</span>\n\n\t<span class="token comment">// ChainHash is the hash that uniquely identifies the chain that this</span>\n\t<span class="token comment">// channel was opened within.</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// TODO(roasbeef): need to modify db keying for multi-chain</span>\n\t<span class="token comment">//  * must add chain hash to prefix as well</span>\n\tChainHash chainhash<span class="token punctuation">.</span>Hash\n\n\t<span class="token comment">// NodeKey1Bytes is the raw public key of the first node.</span>\n\tNodeKey1Bytes <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\tnodeKey1      <span class="token operator">*</span>btcec<span class="token punctuation">.</span>PublicKey\n\n\t<span class="token comment">// NodeKey2Bytes is the raw public key of the first node.</span>\n\tNodeKey2Bytes <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\tnodeKey2      <span class="token operator">*</span>btcec<span class="token punctuation">.</span>PublicKey\n\n\t<span class="token comment">// BitcoinKey1Bytes is the raw public key of the first node.</span>\n\tBitcoinKey1Bytes <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\tbitcoinKey1      <span class="token operator">*</span>btcec<span class="token punctuation">.</span>PublicKey\n\n\t<span class="token comment">// BitcoinKey2Bytes is the raw public key of the first node.</span>\n\tBitcoinKey2Bytes <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\tbitcoinKey2      <span class="token operator">*</span>btcec<span class="token punctuation">.</span>PublicKey\n\n\t<span class="token comment">// Features is an opaque byte slice that encodes the set of channel</span>\n\t<span class="token comment">// specific features that this channel edge supports.</span>\n\tFeatures <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\n\t<span class="token comment">// AuthProof is the authentication proof for this channel. This proof</span>\n\t<span class="token comment">// contains a set of signatures binding four identities, which attests</span>\n\t<span class="token comment">// to the legitimacy of the advertised channel.</span>\n\tAuthProof <span class="token operator">*</span>ChannelAuthProof\n\n\t<span class="token comment">// ChannelPoint is the funding outpoint of the channel. This can be</span>\n\t<span class="token comment">// used to uniquely identify the channel within the channel graph.</span>\n\tChannelPoint wire<span class="token punctuation">.</span>OutPoint\n\n\t<span class="token comment">// Capacity is the total capacity of the channel, this is determined by</span>\n\t<span class="token comment">// the value output in the outpoint that created this channel.</span>\n\tCapacity btcutil<span class="token punctuation">.</span>Amount\n<span class="token punctuation">}</span>\n<span class="token comment">// ChannelAuthProof is the authentication proof (the signature portion) for a</span>\n<span class="token comment">// channel. Using the four signatures contained in the struct, and some</span>\n<span class="token comment">// auxiliary knowledge (the funding script, node identities, and outpoint) nodes</span>\n<span class="token comment">// on the network are able to validate the authenticity and existence of a</span>\n<span class="token comment">// channel. Each of these signatures signs the following digest: chanID ||</span>\n<span class="token comment">// nodeID1 || nodeID2 || bitcoinKey1|| bitcoinKey2 || 2-byte-feature-len ||</span>\n<span class="token comment">// features.</span>\n这个是双方广播通道时候的信息\n<span class="token keyword">type</span> ChannelAuthProof <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// nodeSig1 is a cached instance of the first node signature.</span>\n\tnodeSig1 <span class="token operator">*</span>btcec<span class="token punctuation">.</span>Signature\n\n\t<span class="token comment">// NodeSig1Bytes are the raw bytes of the first node signature encoded</span>\n\t<span class="token comment">// in DER format.</span>\n\tNodeSig1Bytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\n\t<span class="token comment">// nodeSig2 is a cached instance of the second node signature.</span>\n\tnodeSig2 <span class="token operator">*</span>btcec<span class="token punctuation">.</span>Signature\n\n\t<span class="token comment">// NodeSig2Bytes are the raw bytes of the second node signature</span>\n\t<span class="token comment">// encoded in DER format.</span>\n\tNodeSig2Bytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\n\t<span class="token comment">// bitcoinSig1 is a cached instance of the first bitcoin signature.</span>\n\tbitcoinSig1 <span class="token operator">*</span>btcec<span class="token punctuation">.</span>Signature\n\n\t<span class="token comment">// BitcoinSig1Bytes are the raw bytes of the first bitcoin signature</span>\n\t<span class="token comment">// encoded in DER format.</span>\n\tBitcoinSig1Bytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\n\t<span class="token comment">// bitcoinSig2 is a cached instance of the second bitcoin signature.</span>\n\tbitcoinSig2 <span class="token operator">*</span>btcec<span class="token punctuation">.</span>Signature\n\n\t<span class="token comment">// BitcoinSig2Bytes are the raw bytes of the second bitcoin signature</span>\n\t<span class="token comment">// encoded in DER format.</span>\n\tBitcoinSig2Bytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// ChannelEdgePolicy represents a *directed* edge within the channel graph. For</span>\n<span class="token comment">// each channel in the database, there are two distinct edges: one for each</span>\n<span class="token comment">// possible direction of travel along the channel. The edges themselves hold</span>\n<span class="token comment">// information concerning fees, and minimum time-lock information which is</span>\n<span class="token comment">// utilized during path finding.</span>\n这个是通道参与一方定义的如何处理从我这里路过交易\n<span class="token keyword">type</span> ChannelEdgePolicy <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// SigBytes is the raw bytes of the signature of the channel edge</span>\n\t<span class="token comment">// policy. We&#39;ll only parse these if the caller needs to access the</span>\n\t<span class="token comment">// signature for validation purposes.</span>\n\tSigBytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\n\t<span class="token comment">// sig is a cached fully parsed signature.</span>\n\tsig <span class="token operator">*</span>btcec<span class="token punctuation">.</span>Signature\n\n\t<span class="token comment">// ChannelID is the unique channel ID for the channel. The first 3</span>\n\t<span class="token comment">// bytes are the block height, the next 3 the index within the block,</span>\n\t<span class="token comment">// and the last 2 bytes are the output index for the channel.</span>\n\tChannelID <span class="token builtin">uint64</span>\n\n\t<span class="token comment">// LastUpdate is the last time an authenticated edge for this channel</span>\n\t<span class="token comment">// was received.</span>\n\tLastUpdate time<span class="token punctuation">.</span>Time\n\n\t<span class="token comment">// Flags is a bitfield which signals the capabilities of the channel as</span>\n\t<span class="token comment">// well as the directed edge this update applies to.</span>\n\tFlags lnwire<span class="token punctuation">.</span>ChanUpdateFlag\n\n\t<span class="token comment">// TimeLockDelta is the number of blocks this node will subtract from</span>\n\t<span class="token comment">// the expiry of an incoming HTLC. This value expresses the time buffer</span>\n\t<span class="token comment">// the node would like to HTLC exchanges.</span>\n\tTimeLockDelta <span class="token builtin">uint16</span>\n\n\t<span class="token comment">// MinHTLC is the smallest value HTLC this node will accept, expressed</span>\n\t<span class="token comment">// in millisatoshi.</span>\n\tMinHTLC lnwire<span class="token punctuation">.</span>MilliSatoshi\n\n\t<span class="token comment">// FeeBaseMSat is the base HTLC fee that will be charged for forwarding</span>\n\t<span class="token comment">// ANY HTLC, expressed in mSAT&#39;s.</span>\n\tFeeBaseMSat lnwire<span class="token punctuation">.</span>MilliSatoshi\n\n\t<span class="token comment">// FeeProportionalMillionths is the rate that the node will charge for</span>\n\t<span class="token comment">// HTLCs for each millionth of a satoshi forwarded.</span>\n\tFeeProportionalMillionths lnwire<span class="token punctuation">.</span>MilliSatoshi\n\n\t<span class="token comment">// Node is the LightningNode that this directed edge leads to. Using</span>\n\t<span class="token comment">// this pointer the channel graph can further be traversed.</span>\n\tNode <span class="token operator">*</span>LightningNode\n\n\tdb <span class="token operator">*</span>DB\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// LightningNode represents an individual vertex/node within the channel graph.</span>\n<span class="token comment">// A node is connected to other nodes by one or more channel edges emanating</span>\n<span class="token comment">// from it. As the graph is directed, a node will also have an incoming edge</span>\n<span class="token comment">// attached to it for each outgoing edge.</span>\n<span class="token keyword">type</span> LightningNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// PubKeyBytes is the raw bytes of the public key of the target node.</span>\n\tPubKeyBytes <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\tpubKey      <span class="token operator">*</span>btcec<span class="token punctuation">.</span>PublicKey\n\n\t<span class="token comment">// HaveNodeAnnouncement indicates whether we received a node</span>\n\t<span class="token comment">// announcement for this particular node. If true, the remaining fields</span>\n\t<span class="token comment">// will be set, if false only the PubKey is known for this node.</span>\n\tHaveNodeAnnouncement <span class="token builtin">bool</span>\n\n\t<span class="token comment">// LastUpdate is the last time the vertex information for this node has</span>\n\t<span class="token comment">// been updated.</span>\n\tLastUpdate time<span class="token punctuation">.</span>Time\n\n\t<span class="token comment">// Address is the TCP address this node is reachable over.</span>\n\tAddresses <span class="token punctuation">[</span><span class="token punctuation">]</span>net<span class="token punctuation">.</span>Addr\n\n\t<span class="token comment">// Color is the selected color for the node.</span>\n\tColor color<span class="token punctuation">.</span>RGBA\n\n\t<span class="token comment">// Alias is a nick-name for the node. The alias can be used to confirm</span>\n\t<span class="token comment">// a node&#39;s identity or to serve as a short ID for an address book.</span>\n\tAlias <span class="token builtin">string</span>\n\n\t<span class="token comment">// AuthSigBytes is the raw signature under the advertised public key</span>\n\t<span class="token comment">// which serves to authenticate the attributes announced by this node.</span>\n\tAuthSigBytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\n\t<span class="token comment">// Features is the list of protocol features supported by this node.</span>\n\tFeatures <span class="token operator">*</span>lnwire<span class="token punctuation">.</span>FeatureVector\n\n\tdb <span class="token operator">*</span>DB\n\n\t<span class="token comment">// TODO(roasbeef): discovery will need storage to keep it&#39;s last IP</span>\n\t<span class="token comment">// address and re-announce if interface changes?</span>\n\n\t<span class="token comment">// TODO(roasbeef): add update method and fetch?</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br></div></div><h3 id="术语"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h3><p>settle \b类似于 raiden 中的 unlock 消息,结束一笔 HTLC PublicKey 32字节的公钥</p>',21)];t.render=function(a,e,t,l,c,i){return n(),s("div",null,p)};export{e as __pageData,t as default};
