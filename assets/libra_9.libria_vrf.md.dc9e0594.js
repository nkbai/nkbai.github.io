import{o as s,c as a,f as n,b as t,d as l,e}from"./app.26819860.js";const p='{"title":"9.libra中的vrf","description":"","frontmatter":{"title":"9.libra中的vrf","date":"2019-07-05T01:55:01.000Z","draft":false,"tags":["rust","blockchain","libra"],"series":["libra"],"categories":["技术相关"]},"headers":[{"level":2,"title":"1. ED25519","slug":"_1-ed25519"},{"level":2,"title":"2. 什么是VRF","slug":"_2-什么是vrf"},{"level":2,"title":"3. Libra中VRF的实现","slug":"_3-libra中vrf的实现"},{"level":3,"title":"3.1 推导中用到的符号的含义","slug":"_3-1-推导中用到的符号的含义"},{"level":3,"title":"3.2 生成过程","slug":"_3-2-生成过程"},{"level":3,"title":"3.3 验证的过程","slug":"_3-3-验证的过程"},{"level":2,"title":"4. 结束语","slug":"_4-结束语"}],"relativePath":"libra/9.libria_vrf.md","lastUpdated":1564531739000}',c={},m=t("ul",null,[t("li",null,[t("a",{href:"#1-ed25519"}," 1. ED25519")]),t("li",null,[t("a",{href:"#2-%E4%BB%80%E4%B9%88%E6%98%AFvrf"}," 2. 什么是VRF")]),t("li",null,[t("a",{href:"#3-libra%E4%B8%ADvrf%E7%9A%84%E5%AE%9E%E7%8E%B0"}," 3. Libra中VRF的实现"),t("ul",null,[t("li",null,[t("a",{href:"#31-%E6%8E%A8%E5%AF%BC%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%90%AB%E4%B9%89"}," 3.1 推导中用到的符号的含义")]),t("li",null,[t("a",{href:"#32-%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B"}," 3.2 生成过程"),t("ul",null,[t("li",null,[t("a",{href:"#321-h1%E6%8A%8A%E4%BB%BB%E6%84%8F%E4%BF%A1%E6%81%AF%E6%98%A0%E5%B0%84%E5%88%B0%E6%9B%B2%E7%BA%BF%E4%B8%8A%E7%9A%84%E7%82%B9"}," 3.2.1 H1:把任意信息映射到曲线上的点")]),t("li",null,[t("a",{href:"#322-h2-%E5%B0%86%E4%B8%80%E7%B3%BB%E5%88%97%E7%82%B9hash%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%A4%A7%E6%95%B4%E6%95%B0"}," 3.2.2 H2: 将一系列点Hash为一个大整数")]),t("li",null,[t("a",{href:"#323-ecvrf_nonce_generation"}," 3.2.3 ECVRF_nonce_generation ")]),t("li",null,[t("a",{href:"#324-%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BB%A5%E5%8F%8A%E8%AF%81%E6%98%8E"}," 3.2.4 生成随机数以及证明")])])]),t("li",null,[t("a",{href:"#33-%E9%AA%8C%E8%AF%81%E7%9A%84%E8%BF%87%E7%A8%8B"}," 3.3 验证的过程"),t("ul",null,[t("li",null,[t("a",{href:"#331-%E8%AF%81%E6%98%8Eubk"},[l(" 3.3.1 证明U="),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("msup",null,[t("mi",null,"B"),t("mi",null,"k")])]),t("annotation",{encoding:"application/x-tex"},"B^k")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.849108em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.849108em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])])])])])])]),t("li",null,[t("a",{href:"#332-%E8%AF%81%E6%98%8Evhk"},[l(" 3.3.2 证明V="),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("msup",null,[t("mi",null,"H"),t("mi",null,"k")])]),t("annotation",{encoding:"application/x-tex"},"H^k")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.849108em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.849108em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])])])])])])]),t("li",null,[t("a",{href:"#333-%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B"}," 3.3.3 实现过程")])])])])]),t("li",null,[t("a",{href:"#4-%E7%BB%93%E6%9D%9F%E8%AF%AD"}," 4. 结束语")])],-1),i=e('<p>Libra中采用的椭圆曲线是ED25519,而不是像以太坊比特币使用的是secp256k1. 虽然有不同,但是从本质上来说他们都是椭圆曲线,基本性质都是完全相同的.因此适用于S256曲线的VRF算法在Libra中也是相通的.</p><h2 id="_1-ed25519"><a class="header-anchor" href="#_1-ed25519" aria-hidden="true">#</a> 1. ED25519</h2><p><a href="http://ed25519.cr.yp.to/Ed25519%E6%98%AF%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%EF%BC%8C%E7%AD%BE%E5%90%8D%E5%92%8C%E9%AA%8C%E8%AF%81%E7%9A%84%E6%80%A7%E8%83%BD%E9%83%BD%E6%9E%81%E9%AB%98%EF%BC%8C" target="_blank" rel="noopener noreferrer">http://ed25519.cr.yp.to/Ed25519是一个数字签名算法，签名和验证的性能都极高，</a> 一个4核2.4GHz 的 Westmere cpu，每秒可以验证 71000 个签名，安全性极高，等价于RSA约3000-bit。签名过程不依赖随机数生成器，不依赖hash函数的防碰撞性，没有时间通道攻击的问题，并且签名很小，只有64字节，公钥也很小，只有32字节。 部署情 况：<a href="http://ianix.com/pub/ed25519-deployment.html" target="_blank" rel="noopener noreferrer">http://ianix.com/pub/ed25519-deployment.html</a></p><p>同时在zcash中签名使用了ED25519,也就是在隐私交易方面,ED25519也有其独特应用之处,这应该也是主打隐私牌的Libra采用它的原因.</p><h2 id="_2-什么是vrf"><a class="header-anchor" href="#_2-什么是vrf" aria-hidden="true">#</a> 2. 什么是VRF</h2><p>内容主要来自我的另一篇文章<a href="http://stevenbai.top/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E6%87%82vrf/" target="_blank" rel="noopener noreferrer">一篇文章搞懂VRF</a></p><p>VRF全称是verifiable random function ,也就是可验证随机数. 他有两个特性, 他产生的是随机数,第二还是可验证的.</p>',7),r=t("p",null,[l("我直接引用"),t("a",{href:"https://en.wikipedia.org/wiki/Verifiable_random_function",target:"_blank",rel:"noopener noreferrer"},"维基百科上的VRF"),l(",就是说针对一个输入x,一个私钥SK的拥有者可以计算"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"y"),t("mo",null,"="),t("mi",null,"F"),t("mi",null,"S"),t("mi",null,"K"),t("mo",{stretchy:"false"},"("),t("mi",null,"x"),t("mo",{stretchy:"false"},")")]),t("annotation",{encoding:"application/x-tex"},"y=FSK(x)")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.19444em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"FS"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K"),t("span",{class:"mopen"},"("),t("span",{class:"mord mathnormal"},"x"),t("span",{class:"mclose"},")")])])]),l("和证明"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"P"),t("mi",null,"S"),t("mi",null,"K"),t("mo",{stretchy:"false"},"("),t("mi",null,"x"),t("mo",{stretchy:"false"},")")]),t("annotation",{encoding:"application/x-tex"},"PSK(x)")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"PS"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K"),t("span",{class:"mopen"},"("),t("span",{class:"mord mathnormal"},"x"),t("span",{class:"mclose"},")")])])]),l(". 依据证明(proof)和SK对应的公钥PK("),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"P"),t("mi",null,"K"),t("mo",null,"="),t("msup",null,[t("mi",null,"g"),t("mrow",null,[t("mi",null,"S"),t("mi",null,"K")])])]),t("annotation",{encoding:"application/x-tex"},"PK=g^{SK}")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1.035771em","vertical-align":"-0.19444em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8413309999999999em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"S"),t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.07153em"}},"K")])])])])])])])])])])]),l("),任何人都可以验证y是被正确计算的,但是不能知道SK是什么.")],-1),o=e('<p>原文中提到了使用双线性映射来做这个事情,当然VRF可以有很多种不同的实现,只要满足上面提出的条件即可.一个是随机数,另一个是可验证.</p><p>简单解释一下:</p><ol><li>验证人只知道x,在SK持有人没有广播之前不知道随机数是什么</li><li>SK持有人无法伪造随机数,一旦x确定,随机数也确定了. 这就是所谓的随机数(除了SK持有人之外,其他任何人事先不知道) 可验证(知道PK的任何人都知道SK生成的随机数是否合规)</li></ol><h2 id="_3-libra中vrf的实现"><a class="header-anchor" href="#_3-libra中vrf的实现" aria-hidden="true">#</a> 3. Libra中VRF的实现</h2><p>Libra中对于VRF的实现依据来自于<a href="https://tools.ietf.org/html/draft-irtf-cfrg-vrf-04" target="_blank" rel="noopener noreferrer"> Verifiable Random Functions (VRFs) draft-irtf-cfrg-vrf-04</a> 感兴趣的可以读读这篇标准草案</p><h3 id="_3-1-推导中用到的符号的含义"><a class="header-anchor" href="#_3-1-推导中用到的符号的含义" aria-hidden="true">#</a> 3.1 推导中用到的符号的含义</h3>',6),u=t("p",null,[l("B:ED25519曲线中的基点 SK:私钥 x:可以认为是私钥,或者有私钥推导出来. Y:公钥,其中"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"Y"),t("mo",null,"="),t("msup",null,[t("mi",null,"B"),t("mi",null,"x")])]),t("annotation",{encoding:"application/x-tex"},"Y=B^x")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"Y"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.664392em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])]),l(" 大小的字母都表示曲线上的点,小写字母表示大整数 另外需要知道在ECDSA中: 1.如果一个整数乘以一个点,实际上表示出来就是指数,比如x*B="),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("msup",null,[t("mi",null,"B"),t("mi",null,"x")])]),t("annotation",{encoding:"application/x-tex"},"B^x")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.664392em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])]),l(" 2. 两个点相减则表示除法,比如H-B="),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mfrac",null,[t("mi",null,"H"),t("mi",null,"B")])]),t("annotation",{encoding:"application/x-tex"},"\\frac H B")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1.217331em","vertical-align":"-0.345em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.872331em"}},[t("span",{style:{top:"-2.6550000000000002em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.394em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.08125em"}},"H")])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.345em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])])])])],-1),h=e('<h3 id="_3-2-生成过程"><a class="header-anchor" href="#_3-2-生成过程" aria-hidden="true">#</a> 3.2 生成过程</h3><p>也就是证明方按照生成一个随机数,并给出证明,这个随机数就是按照我们确定的规则生成的.</p><h4 id="_3-2-1-h1-把任意信息映射到曲线上的点"><a class="header-anchor" href="#_3-2-1-h1-把任意信息映射到曲线上的点" aria-hidden="true">#</a> 3.2.1 H1:把任意信息映射到曲线上的点</h4><p>思路也很简单,将Hash(m)(<strong>注意是256位hash</strong>)作为曲线上的X,然后带入上述椭圆曲线公式,求出相应的Y即可. 具体对应代码中就是<code>hash_to_curve</code></p><div class="language-rust line-numbers-mode"><pre><code>    <span class="token comment">//self是私钥,alpha就是VRF的输入源</span>\n    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">hash_to_curve</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">EdwardsPoint</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> wrapped_point<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">EdwardsPoint</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> wrapped_point<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            result<span class="token punctuation">.</span><span class="token function">copy_from_slice</span><span class="token punctuation">(</span>\n                <span class="token operator">&amp;</span><span class="token class-name">Sha512</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token constant">SUITE</span><span class="token punctuation">,</span> <span class="token constant">ONE</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>alpha<span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>counter<span class="token punctuation">]</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//这里用的是sha512,但是只取了前半部分,因此是256位</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            wrapped_point <span class="token operator">=</span> <span class="token class-name">CompressedEdwardsY</span><span class="token punctuation">::</span><span class="token function">from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decompress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        wrapped_point<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mul_by_cofactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="_3-2-2-h2-将一系列点hash为一个大整数"><a class="header-anchor" href="#_3-2-2-h2-将一系列点hash为一个大整数" aria-hidden="true">#</a> 3.2.2 H2: 将一系列点Hash为一个大整数</h4><p>这个就更简单了,将这些点序列化,然后Hash,就得到一个大整数. 只是需要注意的是这个大整数需要模上曲线的阶.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">hash_points</span><span class="token punctuation">(</span>points<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">EdwardsPoint</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> ed25519_Scalar <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> hash <span class="token operator">=</span> <span class="token class-name">Sha512</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token constant">SUITE</span><span class="token punctuation">,</span> <span class="token constant">TWO</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> point <span class="token keyword">in</span> points<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        hash <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    result<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copy_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hash<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ed25519_Scalar<span class="token punctuation">::</span><span class="token function">from_bits</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">//这里实际上对基点就是取模</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_3-2-3-ecvrf-nonce-generation"><a class="header-anchor" href="#_3-2-3-ecvrf-nonce-generation" aria-hidden="true">#</a> 3.2.3 ECVRF_nonce_generation</h4><p>根据私钥和待签名信息导出一个确定的大整数. 这里的nonce是从私钥推导出来的,h_point则是下文中用到的H.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">nonce_generation_bytes</span><span class="token punctuation">(</span>nonce<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h_point<span class="token punctuation">:</span> <span class="token class-name">EdwardsPoint</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">64</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> k_buf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    k_buf<span class="token punctuation">.</span><span class="token function">copy_from_slice</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token class-name">Sha512</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>h_point<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成思路也很简单,就是Hash一下,就可以得到一个大整数</span>\n    k_buf\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_3-2-4-生成随机数以及证明"><a class="header-anchor" href="#_3-2-4-生成随机数以及证明" aria-hidden="true">#</a> 3.2.4 生成随机数以及证明</h4>',12),g=t("p",null,[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mrow",null,[t("mi",null,"H"),t("mo",null,"="),t("mi",null,"H"),t("mn",null,"1"),t("mo",{stretchy:"false"},"("),t("mi",null,"α"),t("mo",{stretchy:"false"},")"),t("mspace",{linebreak:"newline"}),t("mi",null,"k"),t("mo",null,"="),t("mi",null,"E"),t("mi",null,"C"),t("mi",null,"V"),t("mi",null,"R"),t("mi",null,"F"),t("mi",{mathvariant:"normal"},"_"),t("mi",null,"n"),t("mi",null,"o"),t("mi",null,"n"),t("mi",null,"c"),t("mi",null,"e"),t("mi",{mathvariant:"normal"},"_"),t("mi",null,"g"),t("mi",null,"e"),t("mi",null,"n"),t("mi",null,"e"),t("mi",null,"r"),t("mi",null,"a"),t("mi",null,"t"),t("mi",null,"i"),t("mi",null,"o"),t("mi",null,"n"),t("mo",{stretchy:"false"},"("),t("mi",null,"S"),t("mi",null,"K"),t("mo",{separator:"true"},","),t("mi",null,"H"),t("mo",{stretchy:"false"},")"),t("mspace",{linebreak:"newline"}),t("mi",{mathvariant:"normal"},"Γ"),t("mo",null,"="),t("msup",null,[t("mi",null,"H"),t("mi",null,"x")]),t("mspace",{linebreak:"newline"}),t("mi",null,"c"),t("mo",null,"="),t("mi",null,"H"),t("mn",null,"2"),t("mo",{stretchy:"false"},"("),t("mi",null,"H"),t("mo",{separator:"true"},","),t("mi",{mathvariant:"normal"},"Γ"),t("mo",{separator:"true"},","),t("msup",null,[t("mi",null,"B"),t("mi",null,"k")]),t("mo",{separator:"true"},","),t("msup",null,[t("mi",null,"H"),t("mi",null,"k")]),t("mo",{stretchy:"false"},")"),t("mspace",{linebreak:"newline"}),t("mi",null,"s"),t("mo",null,"="),t("mi",null,"k"),t("mo",null,"+"),t("mi",null,"c"),t("mi",null,"x")]),t("annotation",{encoding:"application/x-tex"},"H=H1(\\alpha) \\\\ k=ECVRF\\_nonce\\_generation(SK,H) \\\\ \\Gamma =H^x \\\\ c=H2(H,\\Gamma,B^k,H^k) \\\\ s=k+cx ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"mord"},"1"),t("span",{class:"mopen"},"("),t("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),t("span",{class:"mclose"},")")]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.69444em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1.06em","vertical-align":"-0.31em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"EC"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"RF"),t("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),t("span",{class:"mord mathnormal"},"n"),t("span",{class:"mord mathnormal"},"o"),t("span",{class:"mord mathnormal"},"n"),t("span",{class:"mord mathnormal"},"ce"),t("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),t("span",{class:"mord mathnormal"},"e"),t("span",{class:"mord mathnormal"},"n"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),t("span",{class:"mord mathnormal"},"a"),t("span",{class:"mord mathnormal"},"t"),t("span",{class:"mord mathnormal"},"i"),t("span",{class:"mord mathnormal"},"o"),t("span",{class:"mord mathnormal"},"n"),t("span",{class:"mopen"},"("),t("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K"),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"mclose"},")")]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord"},"Γ"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.7143919999999999em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.7143919999999999em"}},[t("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal"},"c"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1.149108em","vertical-align":"-0.25em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"mord"},"2"),t("span",{class:"mopen"},"("),t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),t("span",{class:"mord"},"Γ"),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8991079999999999em"}},[t("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])]),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8991079999999999em"}},[t("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])]),t("span",{class:"mclose"},")")]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal"},"s"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.77777em","vertical-align":"-0.08333em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mbin"},"+"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal"},"c"),t("span",{class:"mord mathnormal"},"x")])])])])],-1),k=t("p",null,[l("然后将Proof={"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",{mathvariant:"normal"},"Γ")]),t("annotation",{encoding:"application/x-tex"},"\\Gamma")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord"},"Γ")])])]),l(",c,s}发给验证方. 证明其实就是想证明我这里的"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",{mathvariant:"normal"},"Γ"),t("mo",null,"="),t("msup",null,[t("mi",null,"H"),t("mi",null,"x")])]),t("annotation",{encoding:"application/x-tex"},"\\Gamma=H^x")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord"},"Γ"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.664392em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])]),l(",而不是通过什么其他方式得到的.")],-1),d=e('<div class="language-rust line-numbers-mode"><pre><code><span class="token comment">/// A longer private key which is slightly optimized for proof generation.</span>\n<span class="token comment">///</span>\n<span class="token comment">/// This is similar in structure to ed25519_dalek::ExpandedSecretKey. It can be produced from</span>\n<span class="token comment">/// a VRFPrivateKey.</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">VRFExpandedPrivateKey</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> key<span class="token punctuation">:</span> ed25519_Scalar<span class="token punctuation">,</span>\n    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> nonce<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/// Produces a proof for an input (using the expanded private key)</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">prove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> pk<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">VRFPublicKey</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Proof</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> h_point <span class="token operator">=</span> pk<span class="token punctuation">.</span><span class="token function">hash_to_curve</span><span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//k实际上是一个随机数,这里采用RFC6979中的规则是为了让每次生成的proof都完全一样,</span>\n        <span class="token comment">// 比特币以太坊签名中也是这么使用的. 但是如果你非要用一个随机数,别人也没办法,</span>\n        <span class="token comment">// 并且完全行得通</span>\n        <span class="token keyword">let</span> k_scalar <span class="token operator">=</span>\n            ed25519_Scalar<span class="token punctuation">::</span><span class="token function">from_bytes_mod_order_wide</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">nonce_generation_bytes</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>nonce<span class="token punctuation">,</span> h_point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//nonce由私钥hash后生成,可以认为私钥确定了,nonce就确定了,而h_point和签名中的用法是一样的,</span>\n        <span class="token comment">// 就是待签名信息        因此原文中共识是这样的:k = ECVRF_nonce_generation(SK,</span>\n        <span class="token comment">// h_string)</span>\n\n        <span class="token comment">//Gamma = x*H</span>\n        <span class="token keyword">let</span> gamma <span class="token operator">=</span> h_point <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>\n        <span class="token comment">//        c = ECVRF_hash_points(H, Gamma, k*B, k*H)</span>\n        <span class="token keyword">let</span> c_scalar <span class="token operator">=</span> <span class="token function">hash_points</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>\n            h_point<span class="token punctuation">,</span>\n            gamma<span class="token punctuation">,</span>\n            <span class="token constant">ED25519_BASEPOINT_POINT</span> <span class="token operator">*</span> k_scalar<span class="token punctuation">,</span>\n            h_point <span class="token operator">*</span> k_scalar<span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//s = (k + c*x) mod q</span>\n        <span class="token comment">//proof={gama,c,s}</span>\n        <span class="token class-name">Proof</span> <span class="token punctuation">{</span>\n            gamma<span class="token punctuation">,</span> <span class="token comment">//这也是VRF生成的随机数</span>\n            c<span class="token punctuation">:</span> c_scalar<span class="token punctuation">,</span>\n            s<span class="token punctuation">:</span> k_scalar <span class="token operator">+</span> c_scalar <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>需要补充说明的是验证方不可能知道:</p>',2),y=t("ol",null,[t("li",null,"私钥也就是x"),t("li",null,[l("k,这是证明方用ECVRF_nonce_generation生成的 虽然随机数用"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",{mathvariant:"normal"},"Γ")]),t("annotation",{encoding:"application/x-tex"},"\\Gamma")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord"},"Γ")])])]),l("也就是曲线上的一个点来表示,但是很容易通过Hash计算转换成一个大整数")])],-1),b=t("h3",{id:"_3-3-验证的过程"},[t("a",{class:"header-anchor",href:"#_3-3-验证的过程","aria-hidden":"true"},"#"),l(" 3.3 验证的过程")],-1),v=t("p",null,"已知信息:",-1),f=t("ol",null,[t("li",null,"Y:公钥"),t("li",null,[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"α")]),t("annotation",{encoding:"application/x-tex"},"\\alpha")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),l(":VRF输入源")]),t("li",null,[l("Proof:{"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",{mathvariant:"normal"},"Γ")]),t("annotation",{encoding:"application/x-tex"},"\\Gamma")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord"},"Γ")])])]),l(",c,s}")])],-1),w=t("p",null,[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mrow",null,[t("mi",null,"H"),t("mo",null,"="),t("mi",null,"H"),t("mn",null,"1"),t("mo",{stretchy:"false"},"("),t("mi",null,"α"),t("mo",{stretchy:"false"},")"),t("mspace",{linebreak:"newline"}),t("mi",null,"U"),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"B"),t("mi",null,"s")]),t("msup",null,[t("mi",null,"Y"),t("mi",null,"c")])]),t("mspace",{linebreak:"newline"}),t("mi",null,"V"),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"H"),t("mi",null,"s")]),t("msup",null,[t("mi",{mathvariant:"normal"},"Γ"),t("mi",null,"c")])]),t("mspace",{linebreak:"newline"}),t("msup",null,[t("mi",null,"c"),t("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")]),t("mo",null,"="),t("mi",null,"H"),t("mn",null,"2"),t("mo",{stretchy:"false"},"("),t("mi",null,"H"),t("mo",{separator:"true"},","),t("mi",{mathvariant:"normal"},"Γ"),t("mo",{separator:"true"},","),t("mi",null,"U"),t("mo",{separator:"true"},","),t("mi",null,"V"),t("mo",{stretchy:"false"},")")]),t("annotation",{encoding:"application/x-tex"},"H=H1(\\alpha) \\\\ U=\\frac {B^s} {Y^c} \\\\ V=\\frac {H^s} {\\Gamma^c} \\\\ c'=H2(H,\\Gamma,U,V) ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"mord"},"1"),t("span",{class:"mopen"},"("),t("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),t("span",{class:"mclose"},")")]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.04633em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.36033em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"Y"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.664392em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"s")])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.04633em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.36033em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord"},"Γ"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.664392em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"s")])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.801892em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"c"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.801892em"}},[t("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mtight"},"′")])])])])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"mord"},"2"),t("span",{class:"mopen"},"("),t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),t("span",{class:"mord"},"Γ"),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),t("span",{class:"mpunct"},","),t("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),t("span",{class:"mclose"},")")])])])])],-1),_=t("p",null,[t("strong",null,[l("如果c'和c相等,则认可"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",{mathvariant:"normal"},"Γ")]),t("annotation",{encoding:"application/x-tex"},"\\Gamma")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord"},"Γ")])])]),l("就是证明方按照规则生产的随机数.")])],-1),x=t("p",null,"这里在计算c'和证明方计算c的过程不一样的对方只有两处:",-1),E=t("ol",null,[t("li",null,[l("用U来代替了"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("msup",null,[t("mi",null,"B"),t("mi",null,"k")])]),t("annotation",{encoding:"application/x-tex"},"B^k")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.849108em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.849108em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])])])])]),l(",")]),t("li",null,[l("用V代替了"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("msup",null,[t("mi",null,"H"),t("mi",null,"k")])]),t("annotation",{encoding:"application/x-tex"},"H^k")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.849108em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.849108em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])])])])])])],-1),z=t("p",null,"接下来我们要证明,两者都是相等的.",-1),B=t("h4",{id:"_3-3-1-证明u"},[t("a",{class:"header-anchor",href:"#_3-3-1-证明u","aria-hidden":"true"},"#"),l(" 3.3.1 证明U="),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("msup",null,[t("mi",null,"B"),t("mi",null,"k")])]),t("annotation",{encoding:"application/x-tex"},"B^k")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.849108em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.849108em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])])])])])],-1),H=t("p",null,[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mrow",null,[t("mi",null,"U"),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"B"),t("mi",null,"s")]),t("msup",null,[t("mi",null,"Y"),t("mi",null,"c")])]),t("mspace",{linebreak:"newline"}),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"B"),t("mrow",null,[t("mi",null,"k"),t("mo",null,"+"),t("mi",null,"c"),t("mi",null,"x")])]),t("msup",null,[t("mi",null,"Y"),t("mi",null,"c")])]),t("mspace",{linebreak:"newline"}),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"B"),t("mrow",null,[t("mi",null,"k"),t("mo",null,"+"),t("mi",null,"c"),t("mi",null,"x")])]),t("msup",null,[t("msup",null,[t("mi",null,"B"),t("mi",null,"x")]),t("mi",null,"c")])]),t("mspace",{linebreak:"newline"}),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"B"),t("mrow",null,[t("mi",null,"k"),t("mo",null,"+"),t("mi",null,"c"),t("mi",null,"x")])]),t("msup",null,[t("mi",null,"B"),t("mrow",null,[t("mi",null,"c"),t("mi",null,"x")])])]),t("mspace",{linebreak:"newline"}),t("mo",null,"="),t("msup",null,[t("mi",null,"B"),t("mi",null,"k")])]),t("annotation",{encoding:"application/x-tex"},"U=\\frac {B^s} {Y^c} \\\\ =\\frac {B^{k+cx}} {Y^c} \\\\ =\\frac {B^{k+cx}} {{B^x}^c} \\\\ =\\frac {B^{k+cx}} {B^{cx}} \\\\ =B^k ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.04633em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.36033em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"Y"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.664392em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"s")])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.36687em","vertical-align":"0em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.2121079999999997em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.5261079999999998em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"Y"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8491079999999999em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mbin mtight"},"+"),t("span",{class:"mord mathnormal mtight"},"c"),t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.36687em","vertical-align":"0em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.2121079999999997em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.5261079999999998em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])]),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.737622em"}},[t("span",{style:{top:"-3.1362300000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8491079999999999em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mbin mtight"},"+"),t("span",{class:"mord mathnormal mtight"},"c"),t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.36687em","vertical-align":"0em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.2121079999999997em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.5261079999999998em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight"},"c"),t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8491079999999999em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mbin mtight"},"+"),t("span",{class:"mord mathnormal mtight"},"c"),t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.36687em","vertical-align":"0em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.8991079999999999em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8991079999999999em"}},[t("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])])])])])])],-1),A=t("h4",{id:"_3-3-2-证明v"},[t("a",{class:"header-anchor",href:"#_3-3-2-证明v","aria-hidden":"true"},"#"),l(" 3.3.2 证明V="),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("msup",null,[t("mi",null,"H"),t("mi",null,"k")])]),t("annotation",{encoding:"application/x-tex"},"H^k")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.849108em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.849108em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])])])])])],-1),M=t("p",null,[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mrow",null,[t("mi",null,"V"),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"H"),t("mi",null,"s")]),t("msup",null,[t("mi",{mathvariant:"normal"},"Γ"),t("mi",null,"c")])]),t("mspace",{linebreak:"newline"}),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"H"),t("mrow",null,[t("mi",null,"k"),t("mo",null,"+"),t("mi",null,"c"),t("mi",null,"x")])]),t("msup",null,[t("mi",{mathvariant:"normal"},"Γ"),t("mi",null,"c")])]),t("mspace",{linebreak:"newline"}),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"H"),t("mrow",null,[t("mi",null,"k"),t("mo",null,"+"),t("mi",null,"c"),t("mi",null,"x")])]),t("msup",null,[t("msup",null,[t("mi",null,"H"),t("mi",null,"x")]),t("mi",null,"c")])]),t("mspace",{linebreak:"newline"}),t("mo",null,"="),t("mfrac",null,[t("msup",null,[t("mi",null,"H"),t("mrow",null,[t("mi",null,"k"),t("mo",null,"+"),t("mi",null,"c"),t("mi",null,"x")])]),t("msup",null,[t("mi",null,"H"),t("mrow",null,[t("mi",null,"c"),t("mi",null,"x")])])]),t("mspace",{linebreak:"newline"}),t("mo",null,"="),t("msup",null,[t("mi",null,"H"),t("mi",null,"k")])]),t("annotation",{encoding:"application/x-tex"},"V=\\frac {H^s} {\\Gamma^c} \\\\ = \\frac {H^{k+cx}} {\\Gamma^c} \\\\ = \\frac {H^{k+cx}} {{H^x}^c} \\\\ = \\frac {H^{k+cx}} {H^{cx}} \\\\ = H^k ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.04633em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.36033em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord"},"Γ"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.664392em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"s")])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.36687em","vertical-align":"0em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.2121079999999997em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.5261079999999998em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord"},"Γ"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8491079999999999em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mbin mtight"},"+"),t("span",{class:"mord mathnormal mtight"},"c"),t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.36687em","vertical-align":"0em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.2121079999999997em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.5261079999999998em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])]),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.737622em"}},[t("span",{style:{top:"-3.1362300000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8491079999999999em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mbin mtight"},"+"),t("span",{class:"mord mathnormal mtight"},"c"),t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.36687em","vertical-align":"0em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.2121079999999997em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.5261079999999998em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.590392em"}},[t("span",{style:{top:"-2.9890000000000003em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight"},"c"),t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8491079999999999em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mbin mtight"},"+"),t("span",{class:"mord mathnormal mtight"},"c"),t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.36687em","vertical-align":"0em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.8991079999999999em","vertical-align":"0em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8991079999999999em"}},[t("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])])])])])])],-1),F=e('<h4 id="_3-3-3-实现过程"><a class="header-anchor" href="#_3-3-3-实现过程" aria-hidden="true">#</a> 3.3.3 实现过程</h4><div class="language-rust line-numbers-mode"><pre><code>\n<span class="token comment">/// An ECVRF public key</span>\n<span class="token attribute attr-name">#[derive(Serialize, Deserialize, Deref, Debug, PartialEq, Eq)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">VRFPublicKey</span><span class="token punctuation">(</span>ed25519_PublicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token comment">/// Given a [`Proof`] and an input, returns whether or not the proof is valid for the input</span>\n    <span class="token comment">/// and public key</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">verify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> proof<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Proof</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">//同样将已知的确定信息alpha映射到H点</span>\n        <span class="token keyword">let</span> h_point <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">hash_to_curve</span><span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//PK:是公钥</span>\n        <span class="token keyword">let</span> pk_point <span class="token operator">=</span> <span class="token class-name">CompressedEdwardsY</span><span class="token punctuation">::</span><span class="token function">from_slice</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">decompress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//c&#39; = ECVRF_hash_points(H, Gamma, U, V)</span>\n        <span class="token keyword">let</span> cprime <span class="token operator">=</span> <span class="token function">hash_points</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>\n            h_point<span class="token punctuation">,</span>\n            proof<span class="token punctuation">.</span>gamma<span class="token punctuation">,</span>\n            <span class="token constant">ED25519_BASEPOINT_POINT</span> <span class="token operator">*</span> proof<span class="token punctuation">.</span>s <span class="token operator">-</span> pk_point <span class="token operator">*</span> proof<span class="token punctuation">.</span>c<span class="token punctuation">,</span> <span class="token comment">//U=s*B - c*Y</span>\n            h_point <span class="token operator">*</span> proof<span class="token punctuation">.</span>s <span class="token operator">-</span> proof<span class="token punctuation">.</span>gamma <span class="token operator">*</span> proof<span class="token punctuation">.</span>c<span class="token punctuation">,</span>              <span class="token comment">//V= s*H - c*Gamma</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//相等则有效,不等则无效</span>\n        <span class="token keyword">if</span> proof<span class="token punctuation">.</span>c <span class="token operator">==</span> cprime <span class="token punctuation">{</span>\n            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token macro property">bail!</span><span class="token punctuation">(</span><span class="token string">&quot;The proof failed to verify for this public key&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="_4-结束语"><a class="header-anchor" href="#_4-结束语" aria-hidden="true">#</a> 4. 结束语</h2><p>VRF是一个好东西,给区块链带来了可预测的伪随机性. 不过在Libra中号称自己使用了VRF,并且也在代码中看到了实现.就是没有找到使用的地方,可能是我的找法不对? 我看的代码版本是<a href="https://github.com/libra/libra/tree/d324ce75cc9bcc6777a2b45c756f4df2f47c4ef3/crypto" target="_blank" rel="noopener noreferrer">d324ce75cc9bcc6777a2b45c756f4df2f47c4ef3</a></p>',4);c.render=function(t,l,e,p,c,V){return s(),a("div",null,[n(' @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} '),n(" code_chunk_output "),m,n(" /code_chunk_output "),i,r,o,u,h,g,k,d,y,b,v,f,w,_,x,E,z,B,H,A,M,F])};export{p as __pageData,c as default};
