import{_ as s,c as n,o as a,N as l}from"./chunks/framework.3a9190c5.js";const A=JSON.parse('{"title":"btcjson","description":"","frontmatter":{"title":"btcjson","date":"2018-12-26T03:19:02.000Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/btcd/btcjson.md"}'),p={name:"blockchain/btcd/btcjson.md"},e=l(`<h1 id="btcd-btcjson-如何管理命令" tabindex="-1">btcd/btcjson 如何管理命令 <a class="header-anchor" href="#btcd-btcjson-如何管理命令" aria-label="Permalink to &quot;btcd/btcjson 如何管理命令&quot;">​</a></h1><p>以debuglevel命令为例来说明btcd对于rpc命令是如何组织的.</p><h2 id="_1-注册" tabindex="-1">1. 注册 <a class="header-anchor" href="#_1-注册" aria-label="Permalink to &quot;1. 注册&quot;">​</a></h2><p>通过此方式可以注册一个新的命令,</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// DebugLevelCmd defines the debuglevel JSON-RPC command.  This command is not a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// standard Bitcoin command.  It is an extension for btcd.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebugLevelCmd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	LevelSpec </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">MustRegisterCmd</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">debuglevel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">DebugLevelCmd</span><span style="color:#89DDFF;">)(nil),</span><span style="color:#A6ACCD;"> flags</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>MustRegisterCmd 最终通过RegisterCmd来实现命令注册,这里面用到了不少反射代码来简化函数的调用.</p><p>最终MustRegisterCmd提供信息会保存到三个全局map中,</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	methodToConcreteType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">(map[</span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Type</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	methodToInfo         </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">(map[</span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">methodInfo</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	concreteTypeToMethod </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">(map[</span><span style="color:#A6ACCD;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Type</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中methodToInfo 的key是<code>debuglevel</code>,用于对该命令进行描述,为btcctl help 提供信息,也是rpc server检测提供参数格式是否正确的依据.</p><p>btcctl help中的信息还有一部分来源就是helpDescsEnUS中,</p><p>其中methodToConcreteType和concreteTypeToMethod是互为映射,主要是为了帮助创建DebugLevelCmd结构体.以及根据这个结构体找到对应的命令. 针对这个命令来说,三个map中会写入如下信息</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">methodToConcreteType</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">debuglevel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]=</span><span style="color:#A6ACCD;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TypeOf</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">DebugLevelCmd</span><span style="color:#89DDFF;">{})</span></span>
<span class="line"><span style="color:#A6ACCD;">methodToInfo</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">debuglevel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">该结构体的信息</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">concreteTypeToMethod</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TypeOf</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">DebugLevelCmd</span><span style="color:#89DDFF;">{})]=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">debuglevel</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>**注意这里面并没有定义如何处理这个命令. **</p><h2 id="_2-命令处理" tabindex="-1">2. 命令处理 <a class="header-anchor" href="#_2-命令处理" aria-label="Permalink to &quot;2. 命令处理&quot;">​</a></h2><p>rpc server对一个命令的处理入口主要在rpcserver.go中,还是以debuglevel这个命令为例. 在rpcHandlersBeforeInit可以看到 &quot;debuglevel&quot;对应的处理函数是handleDebugLevel</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// handleDebugLevel handles debuglevel commands.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleDebugLevel</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">rpcServer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cmd </span><span style="color:#89DDFF;">interface{},</span><span style="color:#A6ACCD;"> closeChan </span><span style="color:#89DDFF;">&lt;-chan</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct{})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(interface{},</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	c </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> cmd</span><span style="color:#89DDFF;">.(*</span><span style="color:#A6ACCD;">btcjson</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DebugLevelCmd</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Special show command to list supported subsystems.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">LevelSpec </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">show</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sprintf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Supported subsystems %v</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#82AAFF;">supportedSubsystems</span><span style="color:#89DDFF;">()),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parseAndSetDebugLevels</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">LevelSpec</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">btcjson</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RPCError</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			Code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    btcjson</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ErrRPCInvalidParams</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Code</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">			Message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Error</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Done.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>走到这里的时候,框架已经做完参数解析以及初步验证,还有就是告诉你如何返回结果. cmd 参数就是DebugLevelCmd结构体.处理完毕以后直接返回结果即可.</p><p>需要说明的是closeChan一般不用,如果你处理的是一个长时间不能返回的任务,那么这时候有可能客户端已经停止请求了,这时候处理函数可以通过closeChan检测到这种情况来停止任务,然后返回一个错误信息. 比如<code>return nil, ErrClientQuit</code></p><h2 id="_3-客户端使用" tabindex="-1">3. 客户端使用 <a class="header-anchor" href="#_3-客户端使用" aria-label="Permalink to &quot;3. 客户端使用&quot;">​</a></h2><p>具体见btcctl.go</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	cmd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcjson</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewCmd</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> params</span><span style="color:#89DDFF;">...)</span></span>
<span class="line"><span style="color:#A6ACCD;">	marshalledJSON</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcjson</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MarshalCmd</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cmd</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	result</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sendPostRequest</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">marshalledJSON</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cfg</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//result就是命令的执行结果,根据情况进行解析</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_4-其他" tabindex="-1">4. 其他 <a class="header-anchor" href="#_4-其他" aria-label="Permalink to &quot;4. 其他&quot;">​</a></h2><p>rpcserver是提供了外部使用者如何调控一个正在运行的btcd全节点.</p><ul><li>提供的接口完全兼容bitcoind.</li><li>没有钱包相关功能</li><li>很多命令提供的功能可以在btcd.conf预置 <ul><li>比如可以在btcd.conf中指定debuglevel</li></ul></li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3>`,25),o=[e];function t(r,c,D,y,F,i){return a(),n("div",null,o)}const b=s(p,[["render",t]]);export{A as __pageData,b as default};
