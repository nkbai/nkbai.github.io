import{o as s,c as n,e as a}from"./app.3f14a1b4.js";const p='{"title":"typescript的一些高级语法","description":"","frontmatter":{"title":"typescript的一些高级语法","date":"2022-01-010T21:57:03+08:00","draft":false,"tags":["program","typescript","javascript"],"categories":["other"]},"headers":[{"level":2,"title":"联合类型定义","slug":"联合类型定义"},{"level":2,"title":"泛型","slug":"泛型"},{"level":3,"title":"最简单的泛型","slug":"最简单的泛型"},{"level":3,"title":"泛型的一些关键字","slug":"泛型的一些关键字"},{"level":3,"title":"一个完整的例子","slug":"一个完整的例子"},{"level":2,"title":"更多类型编程","slug":"更多类型编程"}],"relativePath":"other/typescript_advanced_syntax.md","lastUpdated":1643422924622}',e={},t=[a('<p>本文内容主要来自<code>玩转vue3全家桶</code>课程.</p><h2 id="联合类型定义"><a class="header-anchor" href="#联合类型定义" aria-hidden="true">#</a> 联合类型定义</h2><div class="language-typescript line-numbers-mode"><pre><code><span class="token keyword">let</span> course1 <span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">//course的类型可以是string以及number,其他则是错误.</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="泛型"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>语言引入泛型后,不可避免的复杂化.</p><h3 id="最简单的泛型"><a class="header-anchor" href="#最简单的泛型" aria-hidden="true">#</a> 最简单的泛型</h3><div class="language-typescript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> arg\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="泛型的一些关键字"><a class="header-anchor" href="#泛型的一些关键字" aria-hidden="true">#</a> 泛型的一些关键字</h3><h4 id="keyof"><a class="header-anchor" href="#keyof" aria-hidden="true">#</a> keyof</h4><p>keyof <code>keyof T</code> 获取T的所有key,相当于返回一个字符串列表,其中每一个字符串都是T的key</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">CourseProps</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> VueCourse5 <span class="token comment">// 只能是name和price选一个</span>\n<span class="token keyword">let</span> k<span class="token operator">:</span>CourseProps <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span>\n<span class="token keyword">let</span> k1<span class="token operator">:</span>CourseProps <span class="token operator">=</span> <span class="token string">&#39;p&#39;</span> <span class="token comment">// 改成price</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="类型三元表达式"><a class="header-anchor" href="#类型三元表达式" aria-hidden="true">#</a> 类型三元表达式</h4><p>extends 关键字 <code>T extends U? X:Y</code> 主要这里的T,U,X,Y都是类型,而不是数值</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">MyType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">boolean</span></span><span class="token operator">?</span>String<span class="token operator">:</span>Number\n<span class="token keyword">type</span> <span class="token class-name">MyTypeString</span><span class="token operator">=</span>MyType<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token comment">//MyTypeString类型实际上是String 等价于type MyTypeString=String</span>\n<span class="token keyword">type</span> <span class="token class-name">MyTypeNumber</span><span class="token operator">=</span>MyType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token comment">//MyTypeString类型实际上是Number,等价于type MyTypeNumber=Number</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="in-关键字"><a class="header-anchor" href="#in-关键字" aria-hidden="true">#</a> in 关键字</h4><p>in 用于类型中</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">Courses</span> <span class="token operator">=</span> <span class="token string">&#39;玩转Vue 3&#39;</span><span class="token operator">|</span><span class="token string">&#39;重学前端&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">CourseObj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>k <span class="token keyword">in</span> Courses<span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token comment">// 遍历Courses类型作为key</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 上面的代码等于下面的定义</span>\n<span class="token comment">// type CourseObj = {</span>\n<span class="token comment">//     玩转Vue 3: number;</span>\n<span class="token comment">//     重学前端: number;</span>\n<span class="token comment">// }</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="组合起来的getproperty"><a class="header-anchor" href="#组合起来的getproperty" aria-hidden="true">#</a> 组合起来的getProperty</h4><p>这里的extends和上面说的并不一致, <code>K extends key of T</code>限定了K的类型是一个字符串常量列表,其中每一个字符串都是T的field名字. <code>T[K]</code>则表示T的field K的类型</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span> field<span class="token operator">:</span><span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="infer关键字"><a class="header-anchor" href="#infer关键字" aria-hidden="true">#</a> infer关键字</h4><p>来自<a href="https://zhuanlan.zhihu.com/p/402541135" target="_blank" rel="noopener noreferrer">知乎</a></p><p>infer关键字用于类型解构,想得到一个类型的某部分的类型,可以使用infer.</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">?</span> <span class="token constant">R</span><span class="token operator">:</span><span class="token builtin">any</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>这里的T如果infer,比如 <code>T extends ()=&gt;string</code> 表示T是一个返回类型是string的函数,但是我想取这个函数类型的返回值类型,该怎么办呢? 就用<code>infer R</code>,相当于引入了一个新类型,该类型表示<code>T</code>的某一个局部的类型.</p><h4 id="更多例子"><a class="header-anchor" href="#更多例子" aria-hidden="true">#</a> 更多例子</h4><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token comment">//注意这里的?,</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//Exclude from T those types that are assignable to U</span>\n<span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span><span class="token operator">?</span> <span class="token builtin">never</span><span class="token operator">:</span> <span class="token constant">T</span>\n\n<span class="token comment">//Construct a type with a set of properties K of type T</span>\n<span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> key <span class="token keyword">of</span> <span class="token builtin">any</span><span class="token punctuation">,</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// From T, pick a set of properties whose keys are in the union K</span>\n<span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="一个完整的例子"><a class="header-anchor" href="#一个完整的例子" aria-hidden="true">#</a> 一个完整的例子</h3><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n<span class="token keyword">interface</span> <span class="token class-name">Api</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;/course/buy&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        id<span class="token operator">:</span><span class="token builtin">number</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;/course/comment&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        id<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span><span class="token builtin">string</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Api<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span>obj<span class="token operator">:</span>Api<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>obj<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;/course/buy&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;/course/comment&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>message<span class="token operator">:</span><span class="token string">&#39;嘎嘎好看&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;/course/comment&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//Argument type {id: number} is not assignable to parameter type Api[&quot;/course/comment&quot;] </span>\n<span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;/course/404&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//Argument type &quot;/course/404&quot; is not assignable to parameter type keyof Api </span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="更多类型编程"><a class="header-anchor" href="#更多类型编程" aria-hidden="true">#</a> 更多类型编程</h2><p>这玩意感觉类似于针对类型的编程语法,有点象高级宏,和普通编程的思路是不太一样的. 更多的例子到<a href="https://github.com/type-challenges/type-challenges" target="_blank" rel="noopener noreferrer">type-challenges</a>. 这也是c++,Rust等语言在支持泛型后,不可避免带来的复杂化问题. 而Java的泛型则实际上是动态执行的时候都会转换成Object,并不完全 编译期泛型.</p>',31)];e.render=function(a,p,e,o,c,l){return s(),n("div",null,t)};export{p as __pageData,e as default};
