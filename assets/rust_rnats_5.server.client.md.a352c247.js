import{o as n,c as s,e as a}from"./app.1f3c315f.js";const p='{"title":"从零实现消息中间件-server.client","description":"","frontmatter":{"title":"从零实现消息中间件-server.client","date":"2020-01-31T01:57:03.000Z","draft":false,"tags":["rust"],"categories":["技术相关"]},"headers":[{"level":2,"title":"数据结构定义","slug":"数据结构定义"},{"level":2,"title":"代码实现","slug":"代码实现"},{"level":3,"title":"process_connection","slug":"process-connection"},{"level":3,"title":"client_task","slug":"client-task"},{"level":3,"title":"process_error","slug":"process-error"},{"level":3,"title":"process_sub","slug":"process-sub"},{"level":3,"title":"process_pub","slug":"process-pub"},{"level":3,"title":"send_message","slug":"send-message"},{"level":2,"title":"其他","slug":"其他"}],"relativePath":"rust/rnats/5.server.client.md","lastUpdated":1641141384550}',t={},e=[a('<p>这部分主要说的是服务器端对于来自client连接的数据的处理. 主要功能包括</p><ol><li>接收消息</li><li>收到sub消息,就记录到全局列表中</li><li>收到pub消息,就发送给相关订阅的client</li><li>出错,删除订阅,关闭连接</li></ol><h2 id="数据结构定义"><a class="header-anchor" href="#数据结构定义" aria-hidden="true">#</a> 数据结构定义</h2><p>Client中除了cid以外,其他两项都使用了Mutex进行保护,<a href="./4.server.html">上一篇</a>讲到过,凡是多线程读写的都需要Arc&lt;Mutex&gt;保护.</p><ul><li>srv: 主要还是pub sub的时候都需要访问全局的sublist.</li><li>msg_sender: 之所以用Mutex保护是因为除了client自己要发送消息,当其他client pub消息的时候也要通过这个ClientMessageSender发送消息 ClientMessageSender在我们这个版本中则非常简单,就是一个TcpStream的writer.</li></ul><div class="language-rust line-numbers-mode"><pre><code><span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Client</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">SubListTrait</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> srv<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">ServerState</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> cid<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> msg_sender<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">ClientMessageSender</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ClientMessageSender</span> <span class="token punctuation">{</span>\n    writer<span class="token punctuation">:</span> <span class="token class-name">WriteHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="代码实现"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><h3 id="process-connection"><a class="header-anchor" href="#process-connection" aria-hidden="true">#</a> process_connection</h3><ul><li>创建Client以及可以共享使用的ClientMessageSender</li><li>启动client_task</li></ul><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">SubListTrait</span> <span class="token operator">+</span> <span class="token class-name">Send</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">&#39;static</span><span class="token operator">&gt;</span> <span class="token class-name">Client</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">process_connection</span><span class="token punctuation">(</span>\n        cid<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n        srv<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">ServerState</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        conn<span class="token punctuation">:</span> <span class="token class-name">TcpStream</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">ClientMessageSender</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token punctuation">(</span>reader<span class="token punctuation">,</span> writer<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">split</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> msg_sender <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">ClientMessageSender</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>\n            srv<span class="token punctuation">:</span> srv<span class="token punctuation">,</span>\n            cid<span class="token punctuation">,</span>\n            msg_sender<span class="token punctuation">:</span> msg_sender<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">client_task</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> reader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        msg_sender\n    <span class="token punctuation">}</span>\n     \n    <span class="token punctuation">...</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="client-task"><a class="header-anchor" href="#client-task" aria-hidden="true">#</a> client_task</h3><p>主要功能:</p><ul><li>读取,解析消息</li><li>分发消息给相应的处理函数 <ul><li>process_error</li><li>process_sub</li><li>process_pub</li></ul></li></ul><p>这个其实就是一个tcp连接的主循环,说到这里我想把tokio::spawn 和 go语言中的go关键字做一个类比. 在go中TcpServer接收到一个连接以后,紧接着就是单独起一个goroutine来处理.类似于<code>go client.processConnection()</code>,而到了Rust中基本上可以等价为</p><div class="language-rust line-numbers-mode"><pre><code><span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">move</span><span class="token punctuation">{</span>\n <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">process_connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然Rust重要复杂很多,涉及到所有权,生命周期等一系列问题.</p><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">client_task</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token keyword">mut</span> reader<span class="token punctuation">:</span> <span class="token class-name">ReadHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> buf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> parser <span class="token operator">=</span> <span class="token class-name">Parser</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> subs <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> r <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buf<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> e <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">unwrap_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">process_error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> subs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">let</span> r <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> n <span class="token operator">=</span> r<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n                <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">process_error</span><span class="token punctuation">(</span><span class="token class-name">NError</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token constant">ERROR_CONNECTION_CLOSED</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subs<span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">let</span> <span class="token keyword">mut</span> buf <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> r <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">process_error</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">unwrap_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                    <span class="token keyword">return</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">let</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> left<span class="token punctuation">)</span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">match</span> result <span class="token punctuation">{</span>\n                    <span class="token class-name">ParseResult</span><span class="token punctuation">::</span><span class="token class-name">NoMsg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token class-name">ParseResult</span><span class="token punctuation">::</span><span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token keyword">ref</span> sub<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">process_sub</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> subs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>\n                            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">process_error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> subs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                            <span class="token keyword">return</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token class-name">ParseResult</span><span class="token punctuation">::</span><span class="token class-name">Pub</span><span class="token punctuation">(</span><span class="token keyword">ref</span> pub_arg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">process_pub</span><span class="token punctuation">(</span>pub_arg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>\n                            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">process_error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> subs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                            <span class="token keyword">return</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> left <span class="token operator">==</span> buf<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                buf <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span>left<span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>从整个代码中也可以看出client_task的主要工作就是接受消息,并处理.</p><h3 id="process-error"><a class="header-anchor" href="#process-error" aria-hidden="true">#</a> process_error</h3><ol><li>删除所有订阅</li><li>关闭连接</li></ol><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">process_error</span><span class="token operator">&lt;</span><span class="token class-name">E</span><span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> \n    err<span class="token punctuation">:</span> <span class="token class-name">E</span><span class="token punctuation">,</span> subs<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ArcSubscription</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;client {} process err {:?}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>cid<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> <span class="token keyword">mut</span> sublist <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>srv<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> sub<span class="token punctuation">)</span> <span class="token keyword">in</span> subs <span class="token punctuation">{</span>\n                sublist<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>msg_sender<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span>writer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;shutdown err {:?}&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">unwrap_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="process-sub"><a class="header-anchor" href="#process-sub" aria-hidden="true">#</a> process_sub</h3><p>对于收到的sub则是</p><ol><li>全局订阅列表中保存一份</li><li>本地连接保存一份,这样连接断开的时候好删除 为了避免内存分配,我们的SubArg里面使用的还是Parer缓冲区中的内存,当我们需要在连接之外访问这些信息的时候,我们就必须单独保存一份了,这里我们用的是sub.subject.to_string()来分配一个新的内存.</li></ol><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">process_sub</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>\n        sub<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">SubArg</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        subs<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ArcSubscription</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token class-name">Subscription</span> <span class="token punctuation">{</span>\n            subject<span class="token punctuation">:</span> sub<span class="token punctuation">.</span>subject<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            queue<span class="token punctuation">:</span> sub<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>q<span class="token closure-punctuation punctuation">|</span></span> q<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            sid<span class="token punctuation">:</span> sub<span class="token punctuation">.</span>sid<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            msg_sender<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>msg_sender<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        subs<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span>subject<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sub<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> sublist <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>srv<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>\n        sublist<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="process-pub"><a class="header-anchor" href="#process-pub" aria-hidden="true">#</a> process_pub</h3><p>收到pub消息,</p><ol><li>查找所有的订阅</li><li>将消息逐一转发给他们 转发的过程中要稍微麻烦一点,因为考虑到设计中的负载均衡问题,qsubs则是从同一个queue中随机选择一个来推送消息.</li></ol><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">process_pub</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> pub_arg<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">PubArg</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> sub_result <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> sub_list <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>srv<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span>sublist<span class="token punctuation">;</span>\n            sub_list<span class="token punctuation">.</span><span class="token function">match_subject</span><span class="token punctuation">(</span>pub_arg<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token operator">?</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> sub <span class="token keyword">in</span> sub_result<span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">send_message</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pub_arg<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token keyword">await</span>\n                <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">NError</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token constant">ERROR_CONNECTION_CLOSED</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//qsubs 要考虑负载均衡问题</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span>rngs<span class="token punctuation">::</span></span><span class="token class-name">StdRng</span><span class="token punctuation">::</span><span class="token function">from_entropy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> qsubs <span class="token keyword">in</span> sub_result<span class="token punctuation">.</span>qsubs<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> n <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">next_u32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> n <span class="token operator">=</span> n <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token operator">%</span> qsubs<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> sub <span class="token operator">=</span> qsubs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">send_message</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pub_arg<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token keyword">await</span>\n                <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">NError</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token constant">ERROR_CONNECTION_CLOSED</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="send-message"><a class="header-anchor" href="#send-message" aria-hidden="true">#</a> send_message</h3><p>就是拼装消息格式 因为是第一个版本,也是展示关键api的使用,里面用到了大量的await,实际上没有必要. 实际项目中,肯定会使用缓冲区来做.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">///消息格式</span>\n<span class="token comment">///```</span>\n<span class="token comment">/// MSG &lt;subject&gt; &lt;sid&gt; &lt;size&gt;\\r\\n</span>\n<span class="token comment">/// &lt;message&gt;\\r\\n</span>\n<span class="token comment">/// ```</span>\n<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">send_message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> sub<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Subscription</span><span class="token punctuation">,</span> pub_arg<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">PubArg</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> writer <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> sub<span class="token punctuation">.</span>msg_sender<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span>writer<span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;MSG &quot;</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span>subject<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span>sid<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>pub_arg<span class="token punctuation">.</span>size_buf<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>pub_arg<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="其他"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>相关代码都在我的github <a href="https://github.com/nkbai/learnrustbynats" target="_blank" rel="noopener noreferrer">rnats</a> 欢迎围观</p>',34)];t.render=function(a,p,t,o,c,l){return n(),s("div",null,e)};export{p as __pageData,t as default};
