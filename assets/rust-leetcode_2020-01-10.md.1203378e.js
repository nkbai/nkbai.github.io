import{_ as n,c as s,o as a,a as p}from"./app.4bbc222c.js";const d='{"title":"488. \u7956\u739B\u6E38\u620F","description":"","frontmatter":{"title":"488. \u7956\u739B\u6E38\u620F","date":"2020-01-09T19:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["\u6280\u672F\u76F8\u5173"],"plugins":["viz"]},"headers":[{"level":2,"title":"\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2020-01-10)","slug":"\u6BCF\u5929\u4E00\u9053rust-leetcode-2020-01-10"},{"level":2,"title":"\u9898\u76EE\u63CF\u8FF0","slug":"\u9898\u76EE\u63CF\u8FF0"},{"level":2,"title":"\u89E3\u9898\u601D\u8DEF","slug":"\u89E3\u9898\u601D\u8DEF"},{"level":2,"title":"\u89E3\u9898\u8FC7\u7A0B","slug":"\u89E3\u9898\u8FC7\u7A0B"},{"level":2,"title":"\u4E00\u70B9\u611F\u609F","slug":"\u4E00\u70B9\u611F\u609F"},{"level":2,"title":"\u5176\u4ED6","slug":"\u5176\u4ED6"}],"relativePath":"rust-leetcode/2020-01-10.md"}',t={},o=p(`<h2 id="\u6BCF\u5929\u4E00\u9053rust-leetcode-2020-01-10" tabindex="-1">\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2020-01-10) <a class="header-anchor" href="#\u6BCF\u5929\u4E00\u9053rust-leetcode-2020-01-10" aria-hidden="true">#</a></h2><p>\u575A\u6301\u6BCF\u5929\u4E00\u9053\u9898,\u5237\u9898\u5B66\u4E60Rust.</p><h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1">\u9898\u76EE\u63CF\u8FF0 <a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a></h2><p>\u56DE\u5FC6\u4E00\u4E0B\u7956\u739B\u6E38\u620F\u3002\u73B0\u5728\u684C\u4E0A\u6709\u4E00\u4E32\u7403\uFF0C\u989C\u8272\u6709\u7EA2\u8272(R)\uFF0C\u9EC4\u8272(Y)\uFF0C\u84DD\u8272(B)\uFF0C\u7EFF\u8272(G)\uFF0C\u8FD8\u6709\u767D\u8272(W)\u3002 \u73B0\u5728\u4F60\u624B\u91CC\u4E5F\u6709\u51E0\u4E2A\u7403\u3002</p><p>\u6BCF\u4E00\u6B21\uFF0C\u4F60\u53EF\u4EE5\u4ECE\u624B\u91CC\u7684\u7403\u9009\u4E00\u4E2A\uFF0C\u7136\u540E\u628A\u8FD9\u4E2A\u7403\u63D2\u5165\u5230\u4E00\u4E32\u7403\u4E2D\u7684\u67D0\u4E2A\u4F4D\u7F6E\u4E0A\uFF08\u5305\u62EC\u6700\u5DE6\u7AEF\uFF0C\u6700\u53F3\u7AEF\uFF09\u3002\u63A5\u7740\uFF0C\u5982\u679C\u6709\u51FA\u73B0\u4E09\u4E2A\u6216\u8005\u4E09\u4E2A\u4EE5\u4E0A\u989C\u8272\u76F8\u540C\u7684\u7403\u76F8\u8FDE\u7684\u8BDD\uFF0C\u5C31\u628A\u5B83\u4EEC\u79FB\u9664\u6389\u3002\u91CD\u590D\u8FD9\u4E00\u6B65\u9AA4\u76F4\u5230\u684C\u4E0A\u6240\u6709\u7684\u7403\u90FD\u88AB\u79FB\u9664\u3002</p><p>\u627E\u5230\u63D2\u5165\u5E76\u53EF\u4EE5\u79FB\u9664\u6389\u684C\u4E0A\u6240\u6709\u7403\u6240\u9700\u7684\u6700\u5C11\u7684\u7403\u6570\u3002\u5982\u679C\u4E0D\u80FD\u79FB\u9664\u684C\u4E0A\u6240\u6709\u7684\u7403\uFF0C\u8F93\u51FA -1 \u3002</p><p>\u793A\u4F8B: \u8F93\u5165: &quot;WRRBBW&quot;, &quot;RB&quot; \u8F93\u51FA: -1 \u89E3\u91CA: WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW \uFF08\u7FFB\u8BD1\u8005\u6807\u6CE8\uFF1A\u624B\u4E0A\u7403\u5DF2\u7ECF\u7528\u5B8C\uFF0C\u684C\u4E0A\u8FD8\u5269\u4E24\u4E2A\u7403\u65E0\u6CD5\u6D88\u9664\uFF0C\u8FD4\u56DE-1\uFF09</p><p>\u8F93\u5165: &quot;WWRRBBWW&quot;, &quot;WRBRW&quot; \u8F93\u51FA: 2 \u89E3\u91CA: WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty</p><p>\u8F93\u5165:&quot;G&quot;, &quot;GGGGG&quot; \u8F93\u51FA: 2 \u89E3\u91CA: G -&gt; G[G] -&gt; GG[G] -&gt; empty</p><p>\u8F93\u5165: &quot;RBYYBBRRB&quot;, &quot;YRBGB&quot; \u8F93\u51FA: 3 \u89E3\u91CA: RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty \u6807\u6CE8:</p><p>\u4F60\u53EF\u4EE5\u5047\u8BBE\u684C\u4E0A\u4E00\u5F00\u59CB\u7684\u7403\u4E2D\uFF0C\u4E0D\u4F1A\u6709\u4E09\u4E2A\u53CA\u4E09\u4E2A\u4EE5\u4E0A\u989C\u8272\u76F8\u540C\u4E14\u8FDE\u7740\u7684\u7403\u3002 \u684C\u4E0A\u7684\u7403\u4E0D\u4F1A\u8D85\u8FC720\u4E2A\uFF0C\u8F93\u5165\u7684\u6570\u636E\u4E2D\u4EE3\u8868\u8FD9\u4E9B\u7403\u7684\u5B57\u7B26\u4E32\u7684\u540D\u5B57\u662F &quot;board&quot; \u3002 \u4F60\u624B\u4E2D\u7684\u7403\u4E0D\u4F1A\u8D85\u8FC75\u4E2A\uFF0C\u8F93\u5165\u7684\u6570\u636E\u4E2D\u4EE3\u8868\u8FD9\u4E9B\u7403\u7684\u5B57\u7B26\u4E32\u7684\u540D\u5B57\u662F &quot;hand&quot;\u3002 \u8F93\u5165\u7684\u4E24\u4E2A\u5B57\u7B26\u4E32\u5747\u4E3A\u975E\u7A7A\u5B57\u7B26\u4E32\uFF0C\u4E14\u53EA\u5305\u542B\u5B57\u7B26 &#39;R&#39;,&#39;Y&#39;,&#39;B&#39;,&#39;G&#39;,&#39;W&#39;\u3002</p><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1">\u89E3\u9898\u601D\u8DEF <a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a></h2><p>\u66B4\u529B\u7A77\u4E3E \u56E0\u4E3A\u53EF\u4EE5\u4E3E\u4F8B\u8BC1\u660E\u8D2A\u5FC3\u4E0D\u53EF\u9760 \u6BD4\u5982\u5148\u627E\u4E24\u4E2A\u8FDE\u7740\u7684,\u6D88\u9664\u540E\u518D\u53BB\u5C1D\u8BD5\u5176\u4ED6 \u8FD9\u79CD\u60C5\u51B5\u5C31\u662F\u9519\u7684 WBWW \u8FD9\u79CD\u60C5\u51B5\u653E\u4E24\u4E2AB\u5C31\u662F\u6700\u4F18\u9009\u62E9</p><h2 id="\u89E3\u9898\u8FC7\u7A0B" tabindex="-1">\u89E3\u9898\u8FC7\u7A0B <a class="header-anchor" href="#\u89E3\u9898\u8FC7\u7A0B" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Solution</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">find_min_step</span><span class="token punctuation">(</span>board<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> hand<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token comment">//RYBGW \u53EA\u6709\u8FD9\u4E94\u79CD\u60C5\u51B5,\u5206\u522B\u6620\u5C04\u4E3A0,1,2,3,4 \u7B80\u5355\u8D77\u89C1</span>
        <span class="token keyword">let</span> board <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">map_board</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> hand <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">map_hand</span><span class="token punctuation">(</span>hand<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        println!(&quot;board={:?}&quot;, board);</span>
        <span class="token comment">//        println!(&quot;hand={:?}&quot;, hand);</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> min_step <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>board<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">try_step</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> board<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hand<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> c <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> min_step <span class="token operator">&gt;</span> c <span class="token punctuation">{</span>
                min_step <span class="token operator">=</span> c<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//            println!(&quot;try c={},i={},min_step={}&quot;, c, i, min_step);</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> min_step <span class="token operator">==</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span> <span class="token punctuation">{</span>
            min_step <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        min_step
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">try_step</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token keyword">mut</span> board<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">mut</span> hand<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token comment">//        println!(&quot;try start={}, current={}&quot;, start, current);</span>
        <span class="token comment">//        println!(&quot;board={:?},hand={:?}&quot;, board, hand);</span>

        <span class="token keyword">let</span> pick <span class="token operator">=</span> board<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> pick<span class="token number">.1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> hand<span class="token punctuation">[</span>pick<span class="token number">.0</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> need <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u53EF\u4EE5\u79FB\u9664\u4E00\u4E2A\u4E86,</span>
        <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">remove_and_merge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> board<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hand<span class="token punctuation">[</span>pick<span class="token number">.0</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token operator">-=</span> need<span class="token punctuation">;</span>
        <span class="token keyword">if</span> board<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;found={}&quot;</span><span class="token punctuation">,</span> current <span class="token operator">+</span> need<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> current <span class="token operator">+</span> need<span class="token punctuation">;</span> <span class="token comment">//\u627E\u5230\u4E86\u4E00\u79CD\u65B9\u6CD5,</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> current_min_step <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>board<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">try_step</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> board<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hand<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> current <span class="token operator">+</span> need<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> c <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> current_min_step <span class="token operator">&gt;</span> c <span class="token punctuation">{</span>
                current_min_step <span class="token operator">=</span> c<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> current_min_step <span class="token operator">!=</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> current_min_step<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">remove_and_merge</span><span class="token punctuation">(</span>board<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        board<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> board<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            <span class="token comment">//\u79FB\u9664\u7684\u662F\u4E2D\u95F4\u7684\u67D0\u4E2A\u6570\u503C,\u5982\u679C\u79FB\u9664\u7684\u662F0,\u6216\u8005\u6700\u540E\u4E00\u4E2A,\u80AF\u5B9A\u4E0D\u4F1A\u5408\u5E76</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> left <span class="token operator">=</span> board<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> right <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> left<span class="token number">.0</span> <span class="token operator">==</span> right<span class="token number">.0</span> <span class="token punctuation">{</span>
                left<span class="token number">.1</span> <span class="token operator">+=</span> right<span class="token number">.1</span><span class="token punctuation">;</span>
                board<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> left<span class="token number">.1</span> <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token punctuation">{</span>
                    <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">remove_and_merge</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    board<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u6BCF\u4E2A\u5B57\u7B26\u4EE5\u53CA\u5176\u51FA\u73B0\u7684\u6B21\u6570</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">map_board</span><span class="token punctuation">(</span>board<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> last <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> last_count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> board<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token operator">*</span>i <span class="token keyword">as</span> <span class="token keyword">char</span> <span class="token punctuation">{</span>
                <span class="token char">&#39;R&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token char">&#39;Y&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token char">&#39;B&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token char">&#39;G&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span>
                <span class="token char">&#39;W&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span>
                _ <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;not possible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> c <span class="token operator">!=</span> last <span class="token punctuation">{</span>
                <span class="token keyword">if</span> last_count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> last_count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                last <span class="token operator">=</span> c<span class="token punctuation">;</span>
                last_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                last_count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> last_count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> last_count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        v
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">map_hand</span><span class="token punctuation">(</span>hand<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> hand<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token operator">*</span>i <span class="token keyword">as</span> <span class="token keyword">char</span> <span class="token punctuation">{</span>
                <span class="token char">&#39;R&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token char">&#39;Y&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token char">&#39;B&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token char">&#39;G&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span>
                <span class="token char">&#39;W&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span>
                _ <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;not possible&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            v<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        v
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">test</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">find_min_step</span><span class="token punctuation">(</span><span class="token string">&quot;WWRRBBWW&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;WRBRW&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//&quot;WRRBBW&quot;, &quot;RB&quot; -1</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">find_min_step</span><span class="token punctuation">(</span><span class="token string">&quot;WRRBBW&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;RB&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//&quot;G&quot;, &quot;GGGGG&quot;  2</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">find_min_step</span><span class="token punctuation">(</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;GGGGG&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// &quot;RBYYBBRRB&quot;, &quot;YRBGB&quot; ,3</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">find_min_step</span><span class="token punctuation">(</span><span class="token string">&quot;RBYYBBRRB&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;YRBGB&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//        &quot;BGGRRYY&quot; &quot;BBYRG&quot; 5</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">find_min_step</span><span class="token punctuation">(</span><span class="token string">&quot;BGGRRYY&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;BBYRG&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br></div></div><h2 id="\u4E00\u70B9\u611F\u609F" tabindex="-1">\u4E00\u70B9\u611F\u609F <a class="header-anchor" href="#\u4E00\u70B9\u611F\u609F" aria-hidden="true">#</a></h2><h2 id="\u5176\u4ED6" tabindex="-1">\u5176\u4ED6 <a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a></h2><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u7684<a href="https://github.com/nkbai/rust-leetcode" target="_blank" rel="noopener noreferrer">github</a>,\u672C\u9879\u76EE\u6587\u7AE0\u6240\u6709\u4EE3\u7801\u90FD\u53EF\u4EE5\u627E\u5230.</p>`,18),e=[o];function c(l,u,r,k,i,b){return a(),s("div",null,e)}var y=n(t,[["render",c]]);export{d as __pageData,y as default};
