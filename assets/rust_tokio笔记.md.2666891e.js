import{_ as n,c as s,o as a,a as p}from"./app.8cf0e725.js";const d='{"title":"tokio\u7B14\u8BB0.md","description":"","frontmatter":{"title":"tokio\u7B14\u8BB0.md","date":"2019-07-03T03:57:03.000Z","draft":false,"tags":["rust"],"categories":["\u6280\u672F\u76F8\u5173"]},"headers":[{"level":2,"title":"Future","slug":"future"},{"level":2,"title":"Stream","slug":"stream"},{"level":2,"title":"\u5173\u4E8EPin","slug":"\u5173\u4E8Epin"},{"level":3,"title":"\u4E3A\u4EC0\u4E48\u9700\u8981Pin","slug":"\u4E3A\u4EC0\u4E48\u9700\u8981pin"},{"level":3,"title":"\u5982\u4F55\u4F7F\u7528Pin","slug":"\u5982\u4F55\u4F7F\u7528pin"},{"level":2,"title":"tokio runtime","slug":"tokio-runtime"},{"level":2,"title":"\u81EA\u5DF1\u7EC4\u5408Future","slug":"\u81EA\u5DF1\u7EC4\u5408future"},{"level":2,"title":"\u7EC4\u5408\u5DE5\u5177","slug":"\u7EC4\u5408\u5DE5\u5177"}],"relativePath":"rust/tokio\u7B14\u8BB0.md"}',t={},e=p(`<h2 id="future" tabindex="-1">Future <a class="header-anchor" href="#future" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">//\u867D\u7136\u548C\u6807\u51C6\u5E93\u4E2D\u7684\u4E0D\u8981\u592A\u4E00\u6837,\u4F46\u662F\u66F4\u597D\u7406\u89E3</span>
<span class="token keyword">trait</span> <span class="token type-definition class-name">Future</span> <span class="token punctuation">{</span>
    <span class="token comment">/// The type of the value returned when the future completes.</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span>

    <span class="token comment">/// The type representing errors that occurred while processing the computation.</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Error</span><span class="token punctuation">;</span>

    <span class="token comment">/// The function that will be repeatedly called to see if the future</span>
    <span class="token comment">/// has completed or not. The \`Async\` enum can either be \`Ready\` or</span>
    <span class="token comment">/// \`NotReady\` and indicates whether the future is ready to produce</span>
    <span class="token comment">/// a value or not.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Async</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u6210\u529F\u7684\u65F6\u5019\u8FD4\u56DE<code>Ok(Async::Ready(value))</code>,\u5982\u679C\u6CA1\u6709\u51C6\u5907\u597D\u5219\u8FD4\u56DE<code>Async::NotReady</code>.</p><h2 id="stream" tabindex="-1">Stream <a class="header-anchor" href="#stream" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">trait</span> <span class="token type-definition class-name">Stream</span> <span class="token punctuation">{</span>
    <span class="token comment">/// The type of the value yielded by the stream.</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span>

    <span class="token comment">/// The type representing errors that occurred while processing the computation.</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Error</span><span class="token punctuation">;</span>

    <span class="token comment">/// The function that will be repeatedly called to see if the stream has</span>
    <span class="token comment">/// another value it can yield</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u548CFuture\u4E0D\u4E00\u6837\u7684\u662F\u4ED6\u8981\u6301\u7EED\u8FD4\u56DE\u6570\u636E,\u6240\u4EE5Ready\u4E2D\u53C8\u5206\u4E86Some\u548CNone\u4E24\u79CD\u60C5\u51B5. \u5206\u6210\u56DB\u79CD\u60C5\u51B5\u8FD4\u56DE:</p><ol><li>Ok(Async::Ready(Some(value))) \u8868\u793A\u6570\u636E\u51C6\u5907\u597D\u4E86</li><li>Ok(Async::NotReady) \u6570\u636E\u6CA1\u51C6\u5907\u597D</li><li>Ok(Async::Ready(None)) \u6CA1\u6570\u636E\u4E86</li><li>Err(error) \u51FA\u9519\u4E86</li></ol><h2 id="\u5173\u4E8Epin" tabindex="-1">\u5173\u4E8EPin <a class="header-anchor" href="#\u5173\u4E8Epin" aria-hidden="true">#</a></h2><h3 id="\u4E3A\u4EC0\u4E48\u9700\u8981pin" tabindex="-1">\u4E3A\u4EC0\u4E48\u9700\u8981Pin <a class="header-anchor" href="#\u4E3A\u4EC0\u4E48\u9700\u8981pin" aria-hidden="true">#</a></h3><p>async\u5173\u952E\u5B57\u672C\u8D28\u4E0A\u662F\u4E00\u4E2A\u72B6\u6001\u673A,</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">async</span> <span class="token punctuation">{</span>
     fut_one<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
     fut_two<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u8FD9\u4E48\u4E00\u6BB5\u4EE3\u7801\u6700\u7EC8\u4F1A\u88AB\u7FFB\u8BD1\u6210\u5982\u4E0B\u4EE3\u7801</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">// The \`Future\` type generated by our \`async { ... }\` block</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">AsyncFuture</span> <span class="token punctuation">{</span>
    fut_one<span class="token punctuation">:</span> <span class="token class-name">FutOne</span><span class="token punctuation">,</span>
    fut_two<span class="token punctuation">:</span> <span class="token class-name">FutTwo</span><span class="token punctuation">,</span>
    state<span class="token punctuation">:</span> <span class="token class-name">State</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
 <span class="token comment">// List of states our \`async\` block can be in</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>
    <span class="token class-name">AwaitingFutOne</span><span class="token punctuation">,</span>
    <span class="token class-name">AwaitingFutTwo</span><span class="token punctuation">,</span>
    <span class="token class-name">Done</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
 <span class="token keyword">impl</span> <span class="token class-name">AsyncFuture</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">loop</span> <span class="token punctuation">{</span>
            <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token punctuation">{</span>
                <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">AwaitingFutOne</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>fut_one<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">AwaitingFutTwo</span><span class="token punctuation">,</span>
                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">AwaitingFutTwo</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>fut_two<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Done</span><span class="token punctuation">,</span>
                    <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Pending</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Done</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Poll</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>\u8FD9\u91CC\u9762\u7684\u5173\u952E\u5C31\u662F\u5982\u679CAsyncFuture\u5305\u542B\u81EA\u5F15\u7528,\u90A3\u4E48\u4E00\u65E6AsyncFuture\u88AB\u79FB\u52A8,\u5C31\u4F1A\u5BFC\u81F4\u91CC\u9762\u7684\u6307\u9488\u5931\u6548.</p><p>\u6BD4\u5982:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> read_into_buf_fut <span class="token operator">=</span> <span class="token function">read_into_buf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span><span class="token operator">!</span><span class="token punctuation">(</span>read_into_buf_fut<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u88AB\u7FFB\u8BD1\u540E\u4E3A:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">ReadIntoBuf</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    buf<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// points to \`x\` below</span>
<span class="token punctuation">}</span>
 <span class="token keyword">struct</span> <span class="token type-definition class-name">AsyncFuture</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    read_into_buf_fut<span class="token punctuation">:</span> <span class="token class-name">ReadIntoBuf</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;what_lifetime</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u56E0\u6B64\u9700\u8981Pin\u6765\u56FA\u5B9AAsyncFuture\u4E0D\u88AB\u79FB\u52A8.</p><h3 id="\u5982\u4F55\u4F7F\u7528pin" tabindex="-1">\u5982\u4F55\u4F7F\u7528Pin <a class="header-anchor" href="#\u5982\u4F55\u4F7F\u7528pin" aria-hidden="true">#</a></h3><p>\u5206\u522B\u662FBox::pinned\u548Cpin_utils::pin_mut!\u5B8F.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">pin_utils<span class="token punctuation">::</span></span>pin_mut<span class="token punctuation">;</span> <span class="token comment">// \`pin_utils\` is a handy crate available on crates.io</span>
 <span class="token comment">// A function which takes a \`Future\` that implements \`Unpin\`.</span>
<span class="token keyword">fn</span> <span class="token function-definition function">execute_unpin_future</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span><span class="token class-name">Output</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token operator">+</span> <span class="token class-name">Unpin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>
 <span class="token keyword">let</span> fut <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">execute_unpin_future</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: \`fut\` does not implement \`Unpin\` trait</span>
 <span class="token comment">// Pinning with \`Box\`:</span>
<span class="token keyword">let</span> fut <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> fut <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">pinned</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">execute_unpin_future</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
 <span class="token comment">// Pinning with \`pin_mut!\`:</span>
<span class="token keyword">let</span> fut <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property">pin_mut!</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">execute_unpin_future</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="tokio-runtime" tabindex="-1">tokio runtime <a class="header-anchor" href="#tokio-runtime" aria-hidden="true">#</a></h2><div class="language-"><pre><code>As hinted at earlier, the Rust asynchronous model is very different than that of other languages. Most other languages use a \u201Ccompletion\u201D based model, usually built using some form of callbacks. In this case, when an asynchronous action is started, it is submitted with a function to call once the operation completes. When the process receives the I/O notification from the operating system, it finds the function associated with it and calls it immediately. This is a push based model because the value is pushed into the callback.

The rust asynchronous model is pull based. Instead of a Future being responsible for pushing the data into a callback, it relies on something else asking if it is complete or not. In the case of Tokio, that something else is the Tokio runtime.

Using a poll based model offers many advantages, including being a zero cost abstraction, i.e., using Rust futures has no added overhead compared to writing the asynchronous code by hand.
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>pin<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Poll</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Future</span> <span class="token punctuation">{</span>
    <span class="token comment">/// The type of value produced on completion.</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Output</span><span class="token punctuation">;</span>

    <span class="token comment">/// Attempt to resolve the future to a final value, registering</span>
    <span class="token comment">/// the current task for wakeup if the value is not yet available.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> cx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Output</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u914D\u5408Context\u4E2D\u7684awake,\u6211\u89C9\u5F97\u5927\u591A\u6570\u60C5\u51B5\u4E0B\u548Cpush\u6A21\u578B\u5DEE\u4E0D\u591A\u554A. \u53EF\u80FD\u662F\u6211\u7406\u89E3\u7684\u4E0D\u6DF1.</p><h2 id="\u81EA\u5DF1\u7EC4\u5408future" tabindex="-1">\u81EA\u5DF1\u7EC4\u5408Future <a class="header-anchor" href="#\u81EA\u5DF1\u7EC4\u5408future" aria-hidden="true">#</a></h2><p>\u6CE8\u610F\u8FD9\u91CC\u9762\u7684use, \u81EA\u5DF1\u5199\u7684\u65F6\u5019\u662F\u7F3A\u4E00\u4E0D\u53EF\u7684.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">tokio</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">bytes</span><span class="token punctuation">;</span>
<span class="token attribute attr-name">#[macro_use]</span>
<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">futures</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">AsyncWrite</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">TcpStream</span><span class="token punctuation">,</span> <span class="token namespace">tcp<span class="token punctuation">::</span></span><span class="token class-name">ConnectFuture</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">bytes<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Bytes</span><span class="token punctuation">,</span> <span class="token class-name">Buf</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">futures<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Future</span><span class="token punctuation">,</span> <span class="token class-name">Async</span><span class="token punctuation">,</span> <span class="token class-name">Poll</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Cursor</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// HelloWorld has two states, namely waiting to connect to the socket</span>
<span class="token comment">// and already connected to the socket</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token class-name">Connecting</span><span class="token punctuation">(</span><span class="token class-name">ConnectFuture</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Connected</span><span class="token punctuation">(</span><span class="token class-name">TcpStream</span><span class="token punctuation">,</span> <span class="token class-name">Cursor</span><span class="token operator">&lt;</span><span class="token class-name">Bytes</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Future</span> <span class="token keyword">for</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Error</span> <span class="token operator">=</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Poll</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">use</span> <span class="token keyword">self</span><span class="token punctuation">::</span><span class="token class-name">HelloWorld</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

        <span class="token keyword">loop</span> <span class="token punctuation">{</span>
            <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
                <span class="token class-name">Connecting</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token keyword">mut</span> f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token macro property">try_ready!</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token class-name">Cursor</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">::</span><span class="token function">from_static</span><span class="token punctuation">(</span><span class="token string">b&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">*</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token class-name">Connected</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">Connected</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token keyword">mut</span> socket<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">mut</span> data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Keep trying to write the buffer to the socket as long as the</span>
                    <span class="token comment">// buffer has more bytes available for consumption</span>
                    <span class="token keyword">while</span> data<span class="token punctuation">.</span><span class="token function">has_remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token macro property">try_ready!</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">write_buf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Async</span><span class="token punctuation">::</span><span class="token class-name">Ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> addr <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1:1234&quot;</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> connect_future <span class="token operator">=</span> <span class="token class-name">TcpStream</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> hello_world <span class="token operator">=</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">::</span><span class="token class-name">Connecting</span><span class="token punctuation">(</span>connect_future<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Run it, here we map the error since tokio::run expects a Future&lt;Item=(), Error=()&gt;</span>
    <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">run</span><span class="token punctuation">(</span>hello_world<span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h2 id="\u7EC4\u5408\u5DE5\u5177" tabindex="-1">\u7EC4\u5408\u5DE5\u5177 <a class="header-anchor" href="#\u7EC4\u5408\u5DE5\u5177" aria-hidden="true">#</a></h2><p>\u6709\u70B9\u50CF\u6807\u51C6\u5E93\u4E2D\u7684Option,iter\u7B49,futures\u4E5F\u4E3AFuture\u5B9E\u73B0\u4E86\u4E00\u4E9B\u8F85\u52A9\u5DE5\u5177</p><ol><li>map</li><li>and_then</li></ol>`,32),o=[e];function c(l,u,i,r,k,m){return a(),s("div",null,o)}var y=n(t,[["render",c]]);export{d as __pageData,y as default};
