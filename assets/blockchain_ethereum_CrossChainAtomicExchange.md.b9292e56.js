import{_ as e,c as a,o as s,N as n}from"./chunks/framework.3a9190c5.js";const u=JSON.parse('{"title":"CrossChainAtomicExchange","description":"","frontmatter":{"title":"CrossChainAtomicExchange","date":"2018-09-14T03:02:02.000Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/ethereum/CrossChainAtomicExchange.md"}'),l={name:"blockchain/ethereum/CrossChainAtomicExchange.md"},t=n(`<h1 id="smartraiden-和-lighting-network-进行去中心化跨链原子资产交换" tabindex="-1">SmartRaiden 和 Lighting Network 进行去中心化跨链原子资产交换 <a class="header-anchor" href="#smartraiden-和-lighting-network-进行去中心化跨链原子资产交换" aria-label="Permalink to &quot;SmartRaiden 和 Lighting Network 进行去中心化跨链原子资产交换&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>如果能够进行以太坊和比特币跨链原子资产交换，是不是一件很酷的事情？ 目前链下的扩容方式有很多，最广为人知的就是比特币的闪电网络和以太坊的雷电网络，今天我就来告诉如何通过智能雷电和闪电网络来实现跨链原子资产交换。</p><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><ol><li>Alice 在某个信息发布网站上发布信息,希望用1个 BTC 置换100个 SMT</li><li>Bob 看到以后,和 Alice 进行沟通,达成交换意见 那么Alice 和 Bob 如何不需要借助任何第三方实现原子资产置换呢?</li></ol><h2 id="智能雷电与闪电网络测试环境" tabindex="-1">智能雷电与闪电网络\b测试环境 <a class="header-anchor" href="#智能雷电与闪电网络测试环境" aria-label="Permalink to &quot;智能雷电与闪电网络\b测试环境&quot;">​</a></h2><h3 id="什么是智能雷电" tabindex="-1">什么是智能雷电？ <a class="header-anchor" href="#什么是智能雷电" aria-label="Permalink to &quot;什么是智能雷电？&quot;">​</a></h3><p>智能雷电是一种最新的链下扩容方案，可以实现即时的、低费用和可扩展的支付。可以运行与以太坊和光谱链，兼容ERC20 token 和 ERC233 token。 它是跨平台的，目前支持 Windows Linux MacOS Android IOS 为了更好的适用于移动设备各种复杂的网络环境，智能雷电支持无网支付，安全快捷。 同时智能雷电也是开源的，并且正在积极维护中，想要参与和详细了解请移步<a href="https://github.com/SmartMeshFoundation/SmartRaiden" target="_blank" rel="noreferrer">官方源码</a>.</p><h3 id="准备步骤" tabindex="-1">准备步骤 <a class="header-anchor" href="#准备步骤" aria-label="Permalink to &quot;准备步骤&quot;">​</a></h3><h4 id="安装启动智能雷电" tabindex="-1">安装启动\b智能雷电 <a class="header-anchor" href="#安装启动智能雷电" aria-label="Permalink to &quot;安装启动\b智能雷电&quot;">​</a></h4><p>在本地搭建一个\bBob和Alice的环境，让他们建立通道。\b\b假设你已经安装好了 <code>go</code> <code>geth</code> 如果没有请参考<a href="https://smartraiden.readthedocs.io/en/latest/installation_guide/" target="_blank" rel="noreferrer">安装说明</a></p><h5 id="连接以太坊测试网络" tabindex="-1">连接以太坊测试网络 <a class="header-anchor" href="#连接以太坊测试网络" aria-label="Permalink to &quot;连接以太坊测试网络&quot;">​</a></h5><p>连接以太坊的测试链<code>testnet</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">geth --testnet --fast --rpc --rpcapi eth,net,web3 --bootnodes &quot;enode://20c9ad97c081d63397d7b685a412227a40e23c8bdc6688c6f37e97cfbc22d2b4d1db1510d8f61e6a8866ad7f0e17c02b14182d37ea7c3c8b9c2683aeb6b733a1@52.169.14.227:30303,enode://6ce05930c72abc632c58e2e4324f7c7ea478cec0ed4fa2528982cf34483094e9cbc9216e7aa349691242576d552a2a56aaeae426c5303ded677ce455ba1acd9d@13.84.180.240:30303&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="启动节点" tabindex="-1">启动节点 <a class="header-anchor" href="#启动节点" aria-label="Permalink to &quot;启动节点&quot;">​</a></h5><p>启动两个节点，分别是<code>Alice</code>和<code>Bob</code> 启动<code>Alice</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">smartraiden --datadir=.smartraiden --api-address=0.0.0.0:5001 --listen-address=127.0.0.1:400001 --address=&quot;0x69c5621db8093ee9a26cc2e253f929316e6e5b92&quot; --keystore-path ~/.ethereum/keystore  -password-file /file --eth-rpc-endpoint ws://127.0.0.1:8546 </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>启动<code>Bob</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">smartraiden --datadir=.smartraiden --api-address=0.0.0.0:5002 --listen-address=127.0.0.1:40002 --address=&quot;0x31ddac67e610c22d19e887fb1937bee3079b56cd&quot; --keystore-path ~/.ethereum/keystore --password-file /file --eth-rpc-endpoint ws://127.0.0.1:8546  </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>datadir</code> \b\b节点的本地数据存储目录</li><li><code>api-address</code> rest api 监听端口</li><li><code>address</code> 以太坊节点地址，如果没有可以\b通过<code> geth account new</code>创建</li><li><code>keystore-path</code> --keystore-path 路径</li><li><code>password-file</code> password-file 路径</li><li><code>eth-rpc-endpoint</code> 以太坊全节点的rpc\b端口，默认的<code>websocket</code>是8546</li></ul><p>此时你就已经成功搭建好了本地智能雷电节点网络，可以通过查询<a href="https://smartraiden.readthedocs.io/en/v0.8/rest_api/" target="_blank" rel="noreferrer">SmartRaiden api\b文档</a>来创建通道。</p><h4 id="安装启动闪电网络" tabindex="-1">安装启动闪电网络 <a class="header-anchor" href="#安装启动闪电网络" aria-label="Permalink to &quot;安装启动闪电网络&quot;">​</a></h4><p>本地搭建一个Bob和Alice的闪电网络测试环境，\b让他们建立通道。</p><h5 id="连接btcd测试链" tabindex="-1">连接Btcd测试链 <a class="header-anchor" href="#连接btcd测试链" aria-label="Permalink to &quot;连接Btcd测试链&quot;">​</a></h5><p>\b默认你已经安装好了<code>btcd</code>和<code>lnd</code>，\b如果没有请参考<a href="https://dev.lightning.community/guides/installation/" target="_blank" rel="noreferrer">安装说明</a></p><p>运行btcd,\b打开终端，然后运行</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">btcd --txindex --testnet --rpcuser=kek --rpcpass=kek</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>txindex</code>是必须的，以便<code>lnd</code>客户端能够从中查询历史交易<code>btcd</code></li><li><code>testnet</code> 指定我们正在使用的<code>testnet</code>网络</li><li><code>rpcuser</code>和<code>rpcpass</code> 设置用于对<code>btcd</code>实例进行身份验证的默认密码</li></ul><h5 id="启动节点-1" tabindex="-1">启动节点 <a class="header-anchor" href="#启动节点-1" aria-label="Permalink to &quot;启动节点&quot;">​</a></h5><p>启动两个节点，分别是<code>Alice</code>和<code>Bob</code> 启动<code>Alice</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">lnd --rpclisten=localhost:10001 --listen=localhost:10011 --restlisten=localhost:8001 --datadir=data --logdir=log --debuglevel=info --bitcoin.testnet --bitcoin.active --bitcoin.node=btcd --btcd.rpcuser=kek --btcd.rpcpass=kek </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>rpclisten</code>：host：侦听RPC服务器的端口。这是应用程序与之通信的主要方式lnd</li><li><code>listen</code>：host：侦听传入P2P连接的端口。这是在网络层面，不同于Lightning频道网络和比特币/ Litcoin网络本身。</li><li><code>restlisten</code>：host：port，公开REST api，用于与lndHTTP 进行交互。例如，您可以通过向GET请求获取Alice的频道余额localhost:8001/v1/channels。</li><li><code>datadir</code>：lnd将存储数据的目录</li><li><code>logdir</code>：记录输出的目录。</li><li><code>debuglevel</code>：所有子系统的日志记录级别。可以设置为 trace，debug，info，warn，error，critical。</li><li><code>bitcoin.testnet</code>t：指定是否使用simnet或testnet</li><li><code>bitcoin.active</code>：指定比特币处于活动状态。还可以包括 --litecoin.active激活Litecoin。</li><li><code>bitcoin.node=btcd</code>：使用btcd完整节点与区块链连接。请注意，使用Litecoin时，选项是--litecoin.node=btcd。</li><li><code>btcd.rpcuser和--btcd.rpcpass</code>：btcd实例的用户名和密码。请注意，使用Litecoin时，选项为--ltcd.rpcuser 和--ltcd.rpcpass</li></ul><p>启动<code>Bob</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">lnd --rpclisten=localhost:10002 --listen=localhost:10012--restlisten=localhost:8002 --datadir=data --logdir=log --debuglevel=info --bitcoin.testnet --bitcoin.active --bitcoin.node=btcd --btcd.rpcuser=kek --btcd.rpcpass=kek </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>为了不必每次都输入一堆命令，可以修改配置文件<code>lnd.conf</code></p><ul><li>MacOS:<code>lnd.conf</code>位于：<code>/Users/[username]/Library/Application\\ Support/Lnd/lnd.conf</code></li><li>Linux:<code>~/.lnd/lnd.conf</code></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">datadir=data</span></span>
<span class="line"><span style="color:#A6ACCD;">logdir=log</span></span>
<span class="line"><span style="color:#A6ACCD;">debuglevel=info</span></span>
<span class="line"><span style="color:#A6ACCD;">debughtlc=true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">bitcoin.active=1</span></span>
<span class="line"><span style="color:#A6ACCD;">bitcoin.testnet=1</span></span>
<span class="line"><span style="color:#A6ACCD;">bitcoin.node=btcd</span></span>
<span class="line"><span style="color:#A6ACCD;">btcd.rpchost=localhost</span></span>
<span class="line"><span style="color:#A6ACCD;">btcd.rpcuser=kek</span></span>
<span class="line"><span style="color:#A6ACCD;">btcd.rpcpass=kek</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>现在启动Alice节点我们只需要输入</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">lnd --rpclisten=localhost:10001 --listen=localhost:10011 --restlisten=localhost:8001</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>重新打开新的终端，创建<code>Alice</code>钱包密码</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">lncli --rpcserver=localhost:10001 --macaroonpath=data/admin.macaroon create</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>为了避免每次都输入<code>--rpcserver=localhost:1000X</code>和<code>--macaroonpath</code>标记,可以设置一些别名</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">alias lncli-alice=&quot;lncli --rpcserver=localhost:10001 --macaroonpath=data/admin.macaroon&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">alias lncli-bob=&quot;lncli --rpcserver=localhost:10002 --macaroonpath=data/admin.macaroon&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>Bob</code>创建钱包同上</p><p>此时<code>Alice</code>和<code>Bob</code>就可以创建通道了，详细教程请参考<a href="https://api.lightning.community/rest/index.html" target="_blank" rel="noreferrer">lnd api</a></p><h2 id="实现方法" tabindex="-1">实现方法 <a class="header-anchor" href="#实现方法" aria-label="Permalink to &quot;实现方法&quot;">​</a></h2><p>到这里我们为了进行SmartRaiden 和 Lighting Network 进行跨链原子资产交换的准备工作就已经完成了，具体的实现方法如下。 回到我们最初的那个问题</p><blockquote><p>Alice 在某个信息发布网站上发布信息,希望用1个 BTC 置换100个 SMT</p></blockquote><h4 id="bob和alice-smartraiden场景" tabindex="-1">Bob和Alice SmartRaiden场景 <a class="header-anchor" href="#bob和alice-smartraiden场景" aria-label="Permalink to &quot;Bob和Alice SmartRaiden场景&quot;">​</a></h4><pre class="mermaid loading">sequenceDiagram
participant A as Alice&#39;s SmartRaden
participant B as Bob&#39;s SmartRaiden 
B-&gt;&gt;A:发送100SMT 密码=Secret
Note over A,A:收到MediatedTransfer，密码hash=Sha256(Secret)
A-&gt;&gt;B:不断发送SecretRequest...</pre><h4 id="bob和alice-lnd场景" tabindex="-1">Bob和\bAlice Lnd场景 <a class="header-anchor" href="#bob和alice-lnd场景" aria-label="Permalink to &quot;Bob和\bAlice Lnd场景&quot;">​</a></h4><pre class="mermaid loading">sequenceDiagram
participant A as Alice&#39;s Lnd
participant B as Bob&#39;s Lnd 
Note over B,B:Bob addinvoice：密码=Secret 1BTC
A-&gt;&gt;B:发送:1BTC，payment_hash=Sha256(Secret)
Note over B,B:校验Payment_hash=Sha256(Secret)
Note over A,A:发送成功后，可以知道交易的Secret</pre><h4 id="_1-bob和-alice-分别启动自己的-atmosphere-服务" tabindex="-1">1. Bob和 Alice 分别启动自己的 Atmosphere 服务 <a class="header-anchor" href="#_1-bob和-alice-分别启动自己的-atmosphere-服务" aria-label="Permalink to &quot;1. Bob和 Alice 分别启动自己的 Atmosphere 服务&quot;">​</a></h4><p><a href="https://github.com/SmartMeshFoundation/Atmosphere" target="_blank" rel="noreferrer">Atmosphere</a> 服务会启动响应的SmartRaiden和Lnd 假设 Alice 在SmartRaiden的节点\b使用的私钥为 SA_Priv, 公钥为 SA, 在 Lnd 节点使用的私钥为 LA_Priv, 公钥为 LA 假设 Bob 在 SmartRaiden 节点使用的私钥为 SB_Priv, 公钥为 SB, 在 Lnd 节点使用的私钥为 LB_Priv, 公钥为 LB</p><h4 id="_2-bob-的atmosphere服务" tabindex="-1">2. Bob 的Atmosphere服务 <a class="header-anchor" href="#_2-bob-的atmosphere服务" aria-label="Permalink to &quot;2. Bob 的Atmosphere服务&quot;">​</a></h4><ul><li><p>1 Bob发起交易,指定Secret,金额为100,token 为 SMT,接收方为 SA</p></li><li><p>2 Bob\b等待是否收到一个金额为1BTC,密码 hash 为 Sha256(Secret),</p></li><li><p>3 收到以后,允许自己的 SmartRaiden 响应 SecretRequest</p></li></ul><h4 id="_3-alice-的atmosphere-服务" tabindex="-1">3. Alice 的Atmosphere 服务 <a class="header-anchor" href="#_3-alice-的atmosphere-服务" aria-label="Permalink to &quot;3. Alice 的Atmosphere 服务&quot;">​</a></h4><ul><li><p>1 Alice 在 SmartRaiden 上等待是否收到了来自 Bob 的100个 SMT交易</p></li><li><p>2 一旦收到, Alice 校验该交易是否有效,比如 Expiration 时间是否足够,必须大于125分钟(500Spectrum 块)</p></li><li><p>3 如果都一致,那么通过向自己的 Lnd 注册这个 PaymentReq,并指定过期时间为100分钟,\bsecretHash</p></li><li><p>4 检测 Lnd 是否收到了密码,如果收到了,立即向 自己的SmartRaiden 注册密码</p></li></ul><h3 id="跨链时序图" tabindex="-1">跨链时序图 <a class="header-anchor" href="#跨链时序图" aria-label="Permalink to &quot;跨链时序图&quot;">​</a></h3><pre class="mermaid loading">sequenceDiagram
participant ae as  Alice&#39;s Atmosphere
    participant al as Alice&#39;s Lnd
    participant as as Alice&#39;s SmartRaiden
    participant space
    participant bs as Bob&#39;s SmartRaiden
    participant bl as Bob&#39;s Lnd
    participant be as Bob&#39;s Atmosphere
    
    be-&gt;&gt;ae: 可以用我100SMT换你1 BTC? 
    ae-&gt;&gt;be: 没问题
    be-&gt;&gt;bs: 发送MediatedTransfer 给Alice:Secret,100SMT
    be-&gt;&gt;bl:准备接受金额为1BTC,密码为Secret的交易
    bs-&gt;&gt;as: MediatedTransfer(Secret,100SMT,from Bob to Alice,Expiration=600)
    as-&gt;&gt;ae: 收到了有效的 MediatedTransfer
    ae-&gt;&gt;al: 通过Lnd向bob发送 (1BTC, secretHash, Expiration=10Block) 
  
    al-&gt;&gt;bl: Send payment to bob(1BTC,secertHash,Expiration=10Block)
        loop alice wait
        al-&gt;&gt;al:是否收到了Secret(包括链上注册的密码)
    end
    bl-&gt;&gt;al: 凭借Secret换回1BTC
    bl-&gt;&gt;be: 收到有效的 HTLC
    loop bob wait
        be-&gt;&gt;be: 收到了来自Alice的1BTC ?
    end
    be-&gt;&gt;bs: 响应来自Alice&#39;SmartRaiden 的 SecretRequest 
    bs-&gt;&gt;as: 发送 \bSecret给Alice 开始正常的雷电交易
    ae-&gt;&gt;as:\b如果还没有收到Smarraiden交易，去链上注册密码</pre>`,60),i=[t];function c(o,r,p,d,b,h){return s(),a("div",null,i)}const A=e(l,[["render",c]]);export{u as __pageData,A as default};
