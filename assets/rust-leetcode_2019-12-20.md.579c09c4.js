import{_ as n,c as s,o as a,a as p}from"./app.eda6f95c.js";const d='{"title":"84. \u67F1\u72B6\u56FE\u4E2D\u6700\u5927\u7684\u77E9\u5F62-2","description":"","frontmatter":{"title":"84. \u67F1\u72B6\u56FE\u4E2D\u6700\u5927\u7684\u77E9\u5F62-2","date":"2019-12-19T19:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["\u6280\u672F\u76F8\u5173"],"plugins":["viz"]},"headers":[{"level":2,"title":"\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-12-20)","slug":"\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-12-20"},{"level":2,"title":"\u9898\u76EE\u63CF\u8FF0","slug":"\u9898\u76EE\u63CF\u8FF0"},{"level":2,"title":"\u89E3\u9898\u601D\u8DEF","slug":"\u89E3\u9898\u601D\u8DEF"},{"level":2,"title":"\u89E3\u9898\u8FC7\u7A0B","slug":"\u89E3\u9898\u8FC7\u7A0B"},{"level":2,"title":"\u4E00\u70B9\u611F\u609F","slug":"\u4E00\u70B9\u611F\u609F"},{"level":2,"title":"\u5176\u4ED6","slug":"\u5176\u4ED6"}],"relativePath":"rust-leetcode/2019-12-20.md"}',t={},e=p(`<h2 id="\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-12-20" tabindex="-1">\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-12-20) <a class="header-anchor" href="#\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-12-20" aria-hidden="true">#</a></h2><p>\u575A\u6301\u6BCF\u5929\u4E00\u9053\u9898,\u5237\u9898\u5B66\u4E60Rust.</p><h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1">\u9898\u76EE\u63CF\u8FF0 <a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a></h2><p>\u7ED9\u5B9A n \u4E2A\u975E\u8D1F\u6574\u6570\uFF0C\u7528\u6765\u8868\u793A\u67F1\u72B6\u56FE\u4E2D\u5404\u4E2A\u67F1\u5B50\u7684\u9AD8\u5EA6\u3002\u6BCF\u4E2A\u67F1\u5B50\u5F7C\u6B64\u76F8\u90BB\uFF0C\u4E14\u5BBD\u5EA6\u4E3A 1 \u3002</p><p>\u6C42\u5728\u8BE5\u67F1\u72B6\u56FE\u4E2D\uFF0C\u80FD\u591F\u52FE\u52D2\u51FA\u6765\u7684\u77E9\u5F62\u7684\u6700\u5927\u9762\u79EF\u3002</p><p><img alt="" data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram.png" loading="lazy" class="lazy"></p><p>\u4EE5\u4E0A\u662F\u67F1\u72B6\u56FE\u7684\u793A\u4F8B\uFF0C\u5176\u4E2D\u6BCF\u4E2A\u67F1\u5B50\u7684\u5BBD\u5EA6\u4E3A 1\uFF0C\u7ED9\u5B9A\u7684\u9AD8\u5EA6\u4E3A\xA0[2,1,5,6,2,3]\u3002</p><p><img alt="" data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram_area.png" loading="lazy" class="lazy"></p><p>\u56FE\u4E2D\u9634\u5F71\u90E8\u5206\u4E3A\u6240\u80FD\u52FE\u52D2\u51FA\u7684\u6700\u5927\u77E9\u5F62\u9762\u79EF\uFF0C\u5176\u9762\u79EF\u4E3A\xA010\xA0\u4E2A\u5355\u4F4D\u3002</p><p>\u793A\u4F8B:</p><p>\u8F93\u5165: [2,1,5,6,2,3] \u8F93\u51FA: 10</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1A<a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/largest-rectangle-in-histogram</a> \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1">\u89E3\u9898\u601D\u8DEF <a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a></h2><p>\u9012\u589E\u6808\u601D\u8DEF \u6808\u4E2D\u4FDD\u5B58\u7684\u662F\u6570\u7EC4\u7684\u4E0B\u6807,\u4F46\u662F\u8981\u6C42a[i]&lt;a[j] stack=&gt;| 0 1 2 ,5,7 | \u8981\u6C42a[0]&lt;a[1]&lt;a[2]&lt;a[5]&lt;a[7] \u6CE8\u610F\u662F\u4E25\u683C\u9012\u589E,\u4E0D\u80FD\u662F\u76F8\u7B49 \u4E00\u5F00\u59CB\u538B\u6808-1, \u5047\u8BBE\u8FD9\u65F6\u5019\u7AD9\u5185\u662F|-1,0,1,2,7| \u9AD8\u5EA6\u5206\u522B\u662F|0,2,7,8,9|,\u90A3\u4E48\u8FD9\u65F6\u5019\u6765a[8]\u9AD8\u5EA6\u4E3A5,\u5219\u5FC5\u987B\u4E00\u76F4\u5F39\u51FA\u76F4\u5230a[0]=2\u7559\u4E0B |0,8| \u5BF9\u5E94\u7684\u9AD8\u5EA6\u5206\u522B\u662F|2,5| \u4F46\u662F\u5728\u5F39\u51FA\u7684\u8FC7\u7A0B\u4E2D\u8981\u4E00\u4E2A\u4E00\u4E2A\u8BA1\u7B97\u9762\u79EF \u6BD4\u5982\u5F39\u51FA9\u7684\u65F6\u5019,\u5F97\u5230\u9762\u79EF\u662F9x(8-2-1) //\u53EF\u4EE5\u786E\u5B9A\u7684\u662F\u4ECE\u4E0B\u68072\u52307\u88AB\u5F39\u51FA\u53BB\u7684\u90A3\u90E8\u5206\u80AF\u5B9A\u90FD\u662F\u5927\u4E8E9\u7684,\u5426\u5219\u5B83\u4EEC\u5C31\u4F1A\u88AB\u4FDD\u7559\u4E0B\u6765. \u5F39\u51FA8\u7684\u65F6\u5019\u5F97\u5230\u9762\u79EF\u662F8x(8-1-1) //\u53EF\u4EE5\u786E\u5B9A\u7684\u662F\u4ECE\u4E0B\u68071\u52308\u5F39\u51FA\u53BB\u7684\u503C\u90FD\u662F\u5927\u4E8E8\u7684,\u5426\u5219\u5B83\u4EEC\u5C31\u4F1A\u88AB\u4FDD\u7559\u4E0B\u6765. \u8BA1\u7B97\u9762\u79EF\u516C\u5F0F\u662F a[stack[top]]<em>(i-stack[top-1]-1) \u5F53\u5168\u90E8\u538B\u6808\u540E,\u987A\u7740\u540C\u6837\u7684\u601D\u8DEF\u51FA\u6808, \u53EA\u662F\u6CE8\u610F\u4E00\u70B9\u8FD9\u65F6\u5019\u7684\u8BA1\u7B97\u516C\u5F0F\u5C31\u662F //\u56E0\u4E3A\u5F88\u663E\u7136\u6808\u9876\u5143\u7D20\u540E\u9762\u7684\u8FD9\u4E9B\u503C\u90FD\u662F\u5927\u4E8E\u7B49\u4E8E\u6808\u9876\u7684,\u5426\u5219\u4ED6\u80AF\u5B9A\u8FD8\u5728\u6808\u4E2D\u4E86 a[stack[top]]</em>(a.len()-stack[top-1])</p><h2 id="\u89E3\u9898\u8FC7\u7A0B" tabindex="-1">\u89E3\u9898\u8FC7\u7A0B <a class="header-anchor" href="#\u89E3\u9898\u8FC7\u7A0B" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token punctuation">{</span>max<span class="token punctuation">,</span> min<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Solution</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">get_value</span><span class="token punctuation">(</span>heights<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> heights<span class="token punctuation">[</span>index <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">top_minus_1</span><span class="token punctuation">(</span>stack<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">largest_rectangle_area</span><span class="token punctuation">(</span>heights<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> stack <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> max_area <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> heights<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> top <span class="token operator">=</span> <span class="token operator">*</span>stack<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;must have one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> aj <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">get_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heights<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> ai <span class="token operator">=</span> <span class="token operator">*</span>i<span class="token number">.1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> ai <span class="token operator">&lt;=</span> aj <span class="token punctuation">{</span>
                <span class="token comment">//\u51FA\u6808,\u8BA1\u7B97\u9762\u79EF</span>
                <span class="token keyword">while</span> aj <span class="token operator">&gt;</span> ai <span class="token punctuation">{</span>
                    <span class="token comment">//a[stack[top]]*(i-stack[top-1]-1)</span>
                    <span class="token keyword">let</span> area <span class="token operator">=</span> heights<span class="token punctuation">[</span>top <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token number">.0</span> <span class="token keyword">as</span> <span class="token keyword">i32</span> <span class="token operator">-</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">top_minus_1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    max_area <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_area<span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    top <span class="token operator">=</span> <span class="token operator">*</span>stack<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;must have one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    aj <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">get_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heights<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token number">.0</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u6700\u540E\u68C0\u67E5\u4E00\u4E0B\u7AD9\u5185\u662F\u5426\u8FD8\u6709\u5269\u4F59</span>
        <span class="token keyword">while</span> stack<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            <span class="token comment">//a[stack[top]]*(a.len()-stack[top-1]-1)</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> top <span class="token operator">=</span> <span class="token operator">*</span>stack<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;must have one&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> area <span class="token operator">=</span> heights<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>heights<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span> <span class="token operator">-</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">top_minus_1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            max_area <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_area<span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        max_area
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">test</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">largest_rectangle_area</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">largest_rectangle_area</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">largest_rectangle_area</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><h2 id="\u4E00\u70B9\u611F\u609F" tabindex="-1">\u4E00\u70B9\u611F\u609F <a class="header-anchor" href="#\u4E00\u70B9\u611F\u609F" aria-hidden="true">#</a></h2><p>\u9012\u589E\u6808\u9012\u51CF\u6808\u7528\u597D\u4E86,\u771F\u662F\u4E00\u79CD\u9B54\u672F\u554A</p><h2 id="\u5176\u4ED6" tabindex="-1">\u5176\u4ED6 <a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a></h2><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u7684<a href="https://github.com/nkbai/rust-leetcode" target="_blank" rel="noopener noreferrer">github</a>,\u672C\u9879\u76EE\u6587\u7AE0\u6240\u6709\u4EE3\u7801\u90FD\u53EF\u4EE5\u627E\u5230.</p>`,20),o=[e];function c(l,u,k,r,i,m){return a(),s("div",null,o)}var h=n(t,[["render",c]]);export{d as __pageData,h as default};
