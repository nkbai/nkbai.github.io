import{_ as a,c as e,o as s,N as l}from"./chunks/framework.3a9190c5.js";const m=JSON.parse('{"title":"using clang-tidy for customized checkers","description":"","frontmatter":{"title":"using clang-tidy for customized checkers","date":"2023-04-14T03:57:03.000Z","draft":false,"tags":["android","静态分析"],"series":["静态分析","llvm","clang-tidy"],"categories":["技术相关"]},"headers":[],"relativePath":"static_analysis/using_clang_tidy_for_custom_checkers.md"}'),n={name:"static_analysis/using_clang_tidy_for_custom_checkers.md"},t=l(`<p>来源: <a href="https://www.youtube.com/watch?v=UfLH7dORav8" target="_blank" rel="noreferrer">2020 LLVM Developers’ Meeting: “Using Clang-tidy for Customized Checkers and Large Scale Source...” - YouTube</a></p><p><a href="https://llvm.org/devmtg/2020-09/slides/Clang-tidy_for_Customized_Checkers_and_Large_Scale.pdf" target="_blank" rel="noreferrer">Austin LLVM Meetup</a></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">binaryOperator</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">hasOperatorName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">hasRHS</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">integerLiteral</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)).</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">KEY_NODE</span><span style="color:#89DDFF;">)));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img alt="image-20230414191046966" data-src="img/image-20230414191046966.png" loading="lazy" class="lazy"></p><h3 id="clang-tidy" tabindex="-1">Clang-tidy <a class="header-anchor" href="#clang-tidy" aria-label="Permalink to &quot;Clang-tidy&quot;">​</a></h3><ul><li>Now with this perspective, shifting focus to clang-tidy</li><li>A Clang based C++ Linting tool framework</li><li>Full access to the AST and preprocessor</li><li>Clang-tidy is extensible – custom checks are possible</li><li>More than 200 existing checks <ul><li>Readability, efficiency, correctness, modernization</li><li>Highly configurable</li><li>Can automatically fix the code in many place</li></ul></li></ul><h3 id="usage" tabindex="-1">usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;usage&quot;">​</a></h3><ul><li>Dump AST : clang –cc1 –ast-dump init.cpp</li><li>clang-tidy –list-checks ▪ clang-tidy –list-checks –checks=*</li><li>clang-tidy --checks=-*,cppcoreguidelines-init-variables init.cpp 禁用所有的规则,只启用cppcoreguidelines-init-variables</li><li><em>clang-tidy --checks=-</em>,cppcoreguidelines-init-variables --fix init.cpp</li></ul><h3 id="如何添加check" tabindex="-1">如何添加check <a class="header-anchor" href="#如何添加check" aria-label="Permalink to &quot;如何添加check&quot;">​</a></h3><ol><li><p>./add_new_check.py misc change-malloc</p></li><li><p>rubuild</p></li><li><p>clang-tidy --list-checks –checks=* | grep change</p></li></ol><p>手册:<a href="https://clang.llvm.org/docs/LibASTMatchersReference.html" target="_blank" rel="noreferrer">AST Matcher Reference (llvm.org)</a></p><h2 id="如何手工测试matcher" tabindex="-1">如何手工测试matcher <a class="header-anchor" href="#如何手工测试matcher" aria-label="Permalink to &quot;如何手工测试matcher&quot;">​</a></h2><p><code>clang-query test.cpp --</code></p><h2 id="使用体验" tabindex="-1">使用体验 <a class="header-anchor" href="#使用体验" aria-label="Permalink to &quot;使用体验&quot;">​</a></h2><p>labelStmt指的是紧跟的那一条语句</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">EXPECT_FALSE(</span></span>
<span class="line"><span style="color:#A6ACCD;">    matches(&quot;void f() { while (1) { bar: 1+2;break; foo: return; } }&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">            traverse(TK_AsIs, labelStmt(hasSubstatement(breakStmt())))));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,16),i=[t];function c(r,o,p,d,h,u){return s(),e("div",null,i)}const y=a(n,[["render",c]]);export{m as __pageData,y as default};
