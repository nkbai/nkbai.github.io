import{o as n,c as s,e as a}from"./app.735ab1d2.js";const p='{"title":"287. 寻找重复数","description":"","frontmatter":{"title":"287. 寻找重复数","date":"2020-02-25T19:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["技术相关"],"plugins":["viz"]},"headers":[{"level":2,"title":"每天一道Rust-LeetCode(2020-02-26)","slug":"每天一道rust-leetcode-2020-02-26"},{"level":2,"title":"题目描述","slug":"题目描述"},{"level":2,"title":"解题思路","slug":"解题思路"},{"level":2,"title":"解题过程","slug":"解题过程"},{"level":2,"title":"一点感悟","slug":"一点感悟"},{"level":2,"title":"其他","slug":"其他"}],"relativePath":"rust-leetcode/2020-02-26.md","lastUpdated":1583932927000}',t={},e=[a('<h2 id="每天一道rust-leetcode-2020-02-26"><a class="header-anchor" href="#每天一道rust-leetcode-2020-02-26" aria-hidden="true">#</a> 每天一道Rust-LeetCode(2020-02-26)</h2><p>坚持每天一道题,刷题学习Rust.</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><ol start="287"><li>寻找重复数 给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</li></ol><p>示例 1:</p><p>输入: [1,3,4,2,2] 输出: 2 示例 2:</p><p>输入: [3,1,3,4,2] 输出: 3 说明：</p><p>不能更改原数组（假设数组是只读的）。 只能使用额外的 O(1) 的空间。 时间复杂度小于 O(n2) 。 数组中只有一个重复的数字，但它可能不止重复出现一次。</p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/find-the-duplicate-number" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/find-the-duplicate-number</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>注意要求:</p><ol><li>不能更改原数组,所以不能排序</li><li>只能使用O(1)空间</li><li>时间复杂度小于O(N^2) 最暴力的方式: 针对a[i],在除a[i]之外的所有元素逐个比较. 这样肯定能找到重复的数字,但是违反了3,复杂度为O(N^2) 所以可以考虑二分查找: 第一遍在[1,n/2],(n/2,n]之间找,如果左边的个数超过n/2,则重复的数字一定在左边,否则在右边.</li></ol><h2 id="解题过程"><a class="header-anchor" href="#解题过程" aria-hidden="true">#</a> 解题过程</h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Solution</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">find_duplicate</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>\n        <span class="token comment">//区间都是闭区间,左右都包含</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">find_internal</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;l={:?},r={:?},result={:?}&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//在左边,加1是因为闭区间</span>\n            <span class="token keyword">if</span> result<span class="token number">.0</span> <span class="token operator">&gt;</span> l<span class="token number">.1</span> <span class="token operator">-</span> l<span class="token number">.0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> len <span class="token operator">=</span> l<span class="token number">.1</span> <span class="token operator">-</span> l<span class="token number">.0</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> len <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n                    <span class="token comment">//长度只有1表示找到了</span>\n                    <span class="token keyword">return</span> l<span class="token number">.0</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                r <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> l<span class="token number">.0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                l <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token number">.0</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> l<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token comment">//在右边</span>\n                <span class="token keyword">let</span> len <span class="token operator">=</span> r<span class="token number">.1</span> <span class="token operator">-</span> r<span class="token number">.0</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> len <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> r<span class="token number">.0</span><span class="token punctuation">;</span> <span class="token comment">//长度只有1表示找到了</span>\n                <span class="token punctuation">}</span>\n                l <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token number">.0</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> r<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                r <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> r<span class="token number">.0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// panic!(&quot;not found&quot;);</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">find_internal</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> countl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> countr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        nums<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>i<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token operator">*</span>i <span class="token operator">&gt;=</span> l<span class="token number">.0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>i <span class="token operator">&lt;=</span> l<span class="token number">.1</span> <span class="token punctuation">{</span>\n                countl <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token operator">*</span>i <span class="token operator">&gt;=</span> r<span class="token number">.0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>i <span class="token operator">&lt;=</span> r<span class="token number">.1</span> <span class="token punctuation">{</span>\n                countr <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">(</span>countl<span class="token punctuation">,</span> countr<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="一点感悟"><a class="header-anchor" href="#一点感悟" aria-hidden="true">#</a> 一点感悟</h2><p>另外还有一种<a href="https://leetcode-cn.com/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode/" target="_blank" rel="noopener noreferrer">弗洛伊德的乌龟和兔子（循环检测</a> 看了半天还是没明白,还是二分搜索更清晰,不过代码略长.</p><h2 id="其他"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>欢迎关注我的<a href="https://github.com/nkbai/rust-leetcode" target="_blank" rel="noopener noreferrer">github</a>,本项目文章所有代码都可以找到.</p>',18)];t.render=function(a,p,t,o,c,l){return n(),s("div",null,e)};export{p as __pageData,t as default};
