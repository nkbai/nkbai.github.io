import{_ as s,c as n,o as a,N as l}from"./chunks/framework.3a9190c5.js";const F=JSON.parse('{"title":"比特币的地址类型","description":"","frontmatter":{"title":"比特币的地址类型","date":"2019-05-22T23:47:24.337Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/btcd/比特币的地址类型.md"}'),p={name:"blockchain/btcd/比特币的地址类型.md"},e=l(`<h1 id="比特币的地址类型" tabindex="-1">比特币的地址类型 <a class="header-anchor" href="#比特币的地址类型" aria-label="Permalink to &quot;比特币的地址类型&quot;">​</a></h1><p>这部分内容主要来自于btcutil/address.go</p><p>一直困惑比特币是如何验证交易的,看了这个地质类型算是有点豁然开朗,实际上比特币的交易验证规则还是有点复杂的,它并不像以太坊那么简单明确.</p><p>个人理解,比特币对于交易的处理,首先是根据 pubkey script 判断是什么地址类型,然后进行不同的验证方法. 比如如果地质类型是AddressWitnessPubKeyHash,那么验证规则就明显和 P2PKH 不一样.</p><p>以下是address.go 中如何解析出地址:</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// DecodeAddress decodes the string encoding of an address and returns</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// the Address if addr is a valid encoding for a known address type.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// The bitcoin network the address is associated with is extracted if possible.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// When the address does not encode the network, such as in the case of a raw</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// public key, the address will be associated with the passed defaultNet.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DecodeAddress</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr </span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> defaultNet </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">chaincfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Params</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Bech32 encoded segwit addresses start with a human-readable part</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// (hrp) followed by &#39;1&#39;. For Bitcoin mainnet the hrp is &quot;bc&quot;, and for</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// testnet it is &quot;tb&quot;. If the address string has a prefix that matches</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// one of the prefixes for the known networks, we try to decode it as</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// a segwit address.</span></span>
<span class="line"><span style="color:#A6ACCD;">	oneIndex </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> strings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">LastIndexByte</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> oneIndex </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// The HRP is everything before the found &#39;1&#39;.</span></span>
<span class="line"><span style="color:#A6ACCD;">		hrp </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> strings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ToLower</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">[:</span><span style="color:#A6ACCD;">oneIndex</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> hrp </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> defaultNet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Bech32HRPSegwit </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			witnessVer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> witnessProg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">decodeSegWitAddress</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// We currently only support P2WPKH and P2WSH, which is</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// witness version 0.</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> witnessVer </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">UnsupportedWitnessVerError</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">witnessVer</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">witnessProg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newAddressWitnessPubKeyHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">hrp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> witnessProg</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newAddressWitnessScriptHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">hrp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> witnessProg</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">UnsupportedWitnessProgLenError</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">witnessProg</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Serialized public keys are either 65 bytes (130 hex chars) if</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// uncompressed/hybrid or 33 bytes (66 hex chars) if compressed.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">130</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">66</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		serializedPubKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> hex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">DecodeString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewAddressPubKey</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">serializedPubKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> defaultNet</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Switch on decoded length to determine the type.</span></span>
<span class="line"><span style="color:#A6ACCD;">	decoded</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> netID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> base58</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CheckDecode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> base58</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ErrChecksum </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> ErrChecksumMismatch</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> errors</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">decoded address is of unknown format</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">decoded</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> ripemd160</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// P2PKH or P2SH</span></span>
<span class="line"><span style="color:#A6ACCD;">		isP2PKH </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> netID </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> defaultNet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PubKeyHashAddrID</span></span>
<span class="line"><span style="color:#A6ACCD;">		isP2SH </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> netID </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> defaultNet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ScriptHashAddrID</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> hash160 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> decoded</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> isP2PKH </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> isP2SH</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> ErrAddressCollision</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> isP2PKH</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newAddressPubKeyHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">hash160</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> netID</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> isP2SH</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newAddressScriptHashFromHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">hash160</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> netID</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> ErrUnknownAddressType</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> errors</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">decoded address is of unknown size</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><p>总共有四中地质类型:</p><h2 id="addresspubkey" tabindex="-1">AddressPubKey <a class="header-anchor" href="#addresspubkey" aria-label="Permalink to &quot;AddressPubKey&quot;">​</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// AddressPubKey is an Address for a pay-to-pubkey transaction.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AddressPubKey</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	pubKeyFormat PubKeyFormat</span></span>
<span class="line"><span style="color:#A6ACCD;">	pubKey       </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">btcec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PublicKey</span></span>
<span class="line"><span style="color:#A6ACCD;">	pubKeyHashID </span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="addresspubkeyhash" tabindex="-1">AddressPubKeyHash <a class="header-anchor" href="#addresspubkeyhash" aria-label="Permalink to &quot;AddressPubKeyHash&quot;">​</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// AddressPubKeyHash is an Address for a pay-to-pubkey-hash (P2PKH)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// transaction.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AddressPubKeyHash</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	hash  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">ripemd160</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Size</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	netID </span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="addressscripthash" tabindex="-1">AddressScriptHash <a class="header-anchor" href="#addressscripthash" aria-label="Permalink to &quot;AddressScriptHash&quot;">​</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// AddressScriptHash is an Address for a pay-to-script-hash (P2SH)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// transaction.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AddressScriptHash</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	hash  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">ripemd160</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Size</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	netID </span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="addresswitnesspubkeyhash" tabindex="-1">AddressWitnessPubKeyHash <a class="header-anchor" href="#addresswitnesspubkeyhash" aria-label="Permalink to &quot;AddressWitnessPubKeyHash&quot;">​</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// AddressWitnessPubKeyHash is an Address for a pay-to-witness-pubkey-hash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (P2WPKH) output. See BIP 173 for further details regarding native segregated</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// witness address encoding:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AddressWitnessPubKeyHash</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	hrp            </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">	witnessVersion </span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	witnessProgram </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="addresswitnessscripthash" tabindex="-1">AddressWitnessScriptHash <a class="header-anchor" href="#addresswitnessscripthash" aria-label="Permalink to &quot;AddressWitnessScriptHash&quot;">​</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// AddressWitnessScriptHash is an Address for a pay-to-witness-script-hash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (P2WSH) output. See BIP 173 for further details regarding native segregated</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// witness address encoding:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AddressWitnessScriptHash</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	hrp            </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">	witnessVersion </span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	witnessProgram </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h1 id="地址类型对应的实际上就是锁定脚本的类型" tabindex="-1">地址类型对应的实际上就是锁定脚本的类型 <a class="header-anchor" href="#地址类型对应的实际上就是锁定脚本的类型" aria-label="Permalink to &quot;地址类型对应的实际上就是锁定脚本的类型&quot;">​</a></h1><p>比特币种的脚本执行流程比较复杂,必须根据脚本的内容来决定如何执行. 这与以太坊是完全不一样的,以太坊中是把输入环境构造完毕,不关心执行的code是什么.</p><h2 id="paytopubkeyhash" tabindex="-1">PayToPubKeyHash <a class="header-anchor" href="#paytopubkeyhash" aria-label="Permalink to &quot;PayToPubKeyHash&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> OP_DUP OP_HASH160 128004ff2fcaf13b2b91eb654b1dc2b674f7ec61 OP_EQUALVERIFY OP_CHECKSIG</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>判断是否是\bPayToPubKey的代码</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// isPubkeyHash returns true if the script passed is a pay-to-pubkey-hash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// transaction, false otherwise.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isPubkeyHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">parsedOpcode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_DUP </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_HASH160 </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_DATA_20 </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_EQUALVERIFY </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_CHECKSIG</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="paytopubkey" tabindex="-1">\bPayToPubKey <a class="header-anchor" href="#paytopubkey" aria-label="Permalink to &quot;\bPayToPubKey&quot;">​</a></h2><p>\bpubkey是压缩的</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">DATA_33 0x028004ff2fcaf13b2b91eb654b1dc2b674f7ec61128004ff2fcaf13b2b91eb654a  OP_CHECKSIG</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>pubkey是非压缩的</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">DATA_65 0x0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3 CHECKSIG</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// isPubkey returns true if the script passed is a pay-to-pubkey transaction,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// false otherwise.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isPubkey</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">parsedOpcode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Valid pubkeys are either 33 or 65 bytes.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">33</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">65</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_CHECKSIG</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="paytoscripthash" tabindex="-1">PayToScriptHash <a class="header-anchor" href="#paytoscripthash" aria-label="Permalink to &quot;PayToScriptHash&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HASH160 DATA_20 0xb3a84b564602a9d68b4c9f19c2ea61458ff7826c EQUAL</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// isScriptHash returns true if the script passed is a pay-to-script-hash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// transaction, false otherwise.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isScriptHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">parsedOpcode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_HASH160 </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_DATA_20 </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_EQUAL</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="paytowitnesspubkeyhash" tabindex="-1">PayToWitnessPubKeyHash <a class="header-anchor" href="#paytowitnesspubkeyhash" aria-label="Permalink to &quot;PayToWitnessPubKeyHash&quot;">​</a></h2><p>为了区分,强制增加了一个无用的\b\bOP_O,如果按照前面的三种方式去执行,就是这个Tx输出所有人都可以花费,不需要提供任何证明.因此是所谓的软分叉,提供了向下兼容. 其执行过程:</p><ol><li>移除 OP_0,这是版本信息</li><li>将剩下的DATA_20 和0x365ab47888e150ff46f8d51bce36dcd680f1283f 组装成P2PKH <code>OP_DUP OP_HASH160 365ab47888e150ff46f8d51bce36dcd680f1283f OP_EQUALVERIFY OP_CHECKSIG</code></li><li>将Tx中的Witness依次压栈,然后开始执行,验证方式如同P2PKH 代码见txscript/engine.go的verifyWitnessProgram</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">OP_0 DATA_20 0x365ab47888e150ff46f8d51bce36dcd680f1283f</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// isWitnessPubKeyHash returns true if the passed script is a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// pay-to-witness-pubkey-hash, and false otherwise.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isWitnessPubKeyHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">parsedOpcode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_0 </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_DATA_20</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="paytowitnessscripthash" tabindex="-1">PayToWitnessScriptHash <a class="header-anchor" href="#paytowitnessscripthash" aria-label="Permalink to &quot;PayToWitnessScriptHash&quot;">​</a></h2><p>其执行过程如下:</p><ol><li>移除0,作为版本信息</li><li>验证Tx中Witness数组的最后一个的Hash值和0xe112b88a0cd87ba387f449d443ee2596eb353beb1f0351ab2cba8909d875db23是否相等</li><li>验证过以后,将Witness数组的最后一个作为锁定脚本</li><li>将Witness其他0到n-2元素作为解锁脚本依次压栈</li><li>如同P2SH一样执行验证 代码见txscript/engine.go的verifyWitnessProgram</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">0 DATA_32 0xe112b88a0cd87ba387f449d443ee2596eb353beb1f0351ab2cba8909d875db23</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// isWitnessScriptHash returns true if the passed script is a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// pay-to-witness-script-hash transaction, false otherwise.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isWitnessScriptHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">parsedOpcode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pops</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_0 </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">		pops</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">opcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> OP_DATA_32</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,42),o=[e];function t(r,c,i,D,y,A){return a(),n("div",null,o)}const b=s(p,[["render",t]]);export{F as __pageData,b as default};
