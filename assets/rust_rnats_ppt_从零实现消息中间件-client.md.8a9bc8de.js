import{o as s,c as n,f as a,b as p,d as t,e}from"./app.4e97a0ca.js";const o='{"title":"从零实现消息中间件-client","description":"","frontmatter":{"title":"从零实现消息中间件-client","date":"2020-01-31T01:57:03.000Z","draft":false,"tags":["rust"],"categories":["技术相关"]},"headers":[{"level":2,"title":"presentation:\\n  width: 1024\\n  height: 800","slug":"presentation-width-1024height-800"}],"relativePath":"rust/rnats/ppt/从零实现消息中间件-client.md","lastUpdated":1582210418000}',c={},l=p("hr",null,null,-1),u=p("h2",{id:"presentation-width-1024height-800"},[p("a",{class:"header-anchor",href:"#presentation-width-1024height-800","aria-hidden":"true"},"#"),t(" presentation: width: 1024 height: 800")],-1),r=p("h1",{id:"需求"},[p("a",{class:"header-anchor",href:"#需求","aria-hidden":"true"},"#"),t(" 需求")],-1),i=p("ol",null,[p("li",null,"提供pub接口"),p("li",null,"提供sub接口"),p("li",null,"处理sub后收到的消息")],-1),k=e('<h1 id="数据结构定义"><a class="header-anchor" href="#数据结构定义" aria-hidden="true">#</a> 数据结构定义</h1><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">type</span> <span class="token class-name">MessageHandler</span> <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">FnMut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>result<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token operator">+</span> <span class="token class-name">Sync</span> <span class="token operator">+</span> <span class="token class-name">Send</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">//#[derive(Debug)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Client</span> <span class="token punctuation">{</span>\n    addr<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    writer<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">WriteHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> stop<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token namespace">oneshot<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    sid<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n    handler<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MessageHandler</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',2),d=e('<h1 id="接口-connect"><a class="header-anchor" href="#接口-connect" aria-hidden="true">#</a> 接口-connect</h1><ol><li>建立连接</li><li>创建Client</li><li>启动后台Client读取消息任务</li></ol><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Client</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div>',3),m=e('<h1 id="接口-pub-message"><a class="header-anchor" href="#接口-pub-message" aria-hidden="true">#</a> 接口-pub_message</h1><p>向服务器发布一条pub消息</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">pub_message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> \n  subject<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> \n  msg<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \n     <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',3),b=e('<h1 id="接口-sub-message"><a class="header-anchor" href="#接口-sub-message" aria-hidden="true">#</a> 接口-sub_message</h1><p>向服务器发布一条sub消息 然后等待服务器推送相关消息</p><div class="language-rust line-numbers-mode"><pre><code>    <span class="token comment">//sub消息格式为SUB subject {queue} {sid}\\r\\n</span>\n    <span class="token comment">//可能由于rustc的bug,导致如果subject是&amp;str,则会报错E0700,暂时使用String来替代</span>\n    <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sub_message</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>\n        subject<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n        queue<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        handler<span class="token punctuation">:</span> <span class="token class-name">MessageHandler</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',3),_=e('<h1 id="client-task"><a class="header-anchor" href="#client-task" aria-hidden="true">#</a> client-task</h1><ol><li>解析消息</li><li>分派给相应的Subscribe</li></ol><div class="language-rust line-numbers-mode"><pre><code>    <span class="token comment">/*\n    从服务器接收pub消息\n    然后推送给相关的订阅方。\n    */</span>\n    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">receive_task</span><span class="token punctuation">(</span>\n        <span class="token keyword">mut</span> reader<span class="token punctuation">:</span> <span class="token class-name">ReadHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        stop<span class="token punctuation">:</span> <span class="token namespace">oneshot<span class="token punctuation">::</span></span><span class="token class-name">Receiver</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        handler<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MessageHandler</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        writer<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">WriteHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',3),h=e('<h1 id="api的使用-pub"><a class="header-anchor" href="#api的使用-pub" aria-hidden="true">#</a> API的使用-pub</h1><div class="language-rust line-numbers-mode"><pre><code> c<span class="token punctuation">.</span><span class="token function">pub_message</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;hello{}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),g=e('<h1 id="api的使用-sub"><a class="header-anchor" href="#api的使用-sub" aria-hidden="true">#</a> API的使用-sub</h1><div class="language-rust line-numbers-mode"><pre><code>     c<span class="token punctuation">.</span><span class="token function">sub_message</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;test&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">None</span><span class="token punctuation">,</span>\n        <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>msg<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>\n            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;recevied:{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token function">from_utf8_unchecked</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',2);c.render=function(p,t,e,o,c,f){return s(),n("div",null,[l,u,a(" slide "),r,i,a(" slide "),k,a(" slide "),d,a(" slide "),m,a(" slide "),b,a(" slide "),_,a(" slide "),h,a(" slide "),g])};export{o as __pageData,c as default};
