import{o as n,c as s,e as a}from"./app.1f3c315f.js";const p='{"title":"拓扑排序在比特币Tx管理中的使用","description":"","frontmatter":{"title":"拓扑排序在比特币Tx管理中的使用","date":"2019-05-19T10:19:16.778Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"什么是拓扑排序","slug":"什么是拓扑排序"},{"level":3,"title":"一个例子","slug":"一个例子"},{"level":3,"title":"拓扑排序的过程","slug":"拓扑排序的过程"},{"level":2,"title":"使用Golang实现对比特币交易的拓扑排序","slug":"使用golang实现对比特币交易的拓扑排序"},{"level":3,"title":"数据结构","slug":"数据结构"},{"level":3,"title":"创建hashGraph","slug":"创建hashgraph"},{"level":3,"title":"获取当前有多少张图","slug":"获取当前有多少张图"},{"level":3,"title":"拓扑排序","slug":"拓扑排序"}],"relativePath":"blockchain/btcwallet/拓扑排序在比特币Tx管理中的使用.md","lastUpdated":1561507892000}',t={},e=[a('<h1 id="使用拓扑排序管理比特币的tx"><a class="header-anchor" href="#使用拓扑排序管理比特币的tx" aria-hidden="true">#</a> 使用拓扑排序管理比特币的Tx</h1><p>比特币采用的是UTXO模型,对于那些未被打包的交易,需要不断的向临近节点进行广播. 那么广播这些交易的时候就需要有一定的顺序,当然最好的方式就是按照依赖顺序进行排序.</p><h2 id="什么是拓扑排序"><a class="header-anchor" href="#什么是拓扑排序" aria-hidden="true">#</a> 什么是拓扑排序</h2><p>在图论中，拓扑排序（Topological Sorting）是一个有向无环图（DAG, Directed Acyclic Graph）的所有顶点的线性序列。且该序列必须满足下面两个条件：</p><p>每个顶点出现且只出现一次。 若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。 有向无环图（DAG）才有拓扑排序，非DAG图没有拓扑排序一说。</p><h3 id="一个例子"><a class="header-anchor" href="#一个例子" aria-hidden="true">#</a> 一个例子</h3><pre class="mermaid loading">graph LR\nTX1((TX1))\nTX2((TX2))\nTX3((TX3))\nTX4((TX4))\nTX5((TX5))\nTX1 --&gt; TX2\nTX1 --&gt; TX4\nTX2 --&gt; TX4\nTX2 --&gt; TX3\nTX4 --&gt; TX3\nTX4 --&gt; TX5\nTX3 --&gt; TX5</pre><p>这里TxPool中我们有五个Tx, 其中Tx1有两个输出分别被TX2,TX4引用 而TX2有两个不同的输出,分别被TX4和TX3引用 TX4有两个输出,分别被TX3,TX5引用.</p><p>Tx1有两个输出分别被TX2,TX4引用 这句话啥意思呢? 就是TX1有两个outpoint,分别出现在Tx2和Tx4的TxIn中.</p><p>如果这时候要对外广播交易,那么最好的顺序显然应该是TX1,TX2,TX4,TX3,TX5</p><h3 id="拓扑排序的过程"><a class="header-anchor" href="#拓扑排序的过程" aria-hidden="true">#</a> 拓扑排序的过程</h3><ol><li>从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出。</li><li>从图中删除该顶点和所有以它为起点的有向边。</li><li>重复 1 和 2 直到当前的 DAG 图为空或当前图中不存在无前驱的顶点为止。后一种情况说明有向图中必然存在环。</li></ol><h2 id="使用golang实现对比特币交易的拓扑排序"><a class="header-anchor" href="#使用golang实现对比特币交易的拓扑排序" aria-hidden="true">#</a> 使用Golang实现对比特币交易的拓扑排序</h2><p>相关源码位于<a href="https://github.com/btcsuite/btcwallet/blob/master/wtxmgr/kahnsort.go" target="_blank" rel="noopener noreferrer">kahnsort.go</a>,感兴趣的朋友可以查看源码.</p><ol><li>首先将Tx组成图</li><li>分别对各个独立的图进行拓扑排序</li></ol><h3 id="数据结构"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">type</span> graphNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tvalue    <span class="token operator">*</span>wire<span class="token punctuation">.</span>MsgTx\n\toutEdges <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>chainhash<span class="token punctuation">.</span>Hash <span class="token comment">//指向将value作为TxIn的那些Tx</span>\n\tinDegree <span class="token builtin">int</span> <span class="token comment">//value这个Tx依赖多少个Tx</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> hashGraph <span class="token keyword">map</span><span class="token punctuation">[</span>chainhash<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span>graphNod\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>graphNode表示图中的每个节点,其中inDegree保存自己有多少入度,如果入度为0表示没有任何依赖.入度为3则表示该Tx有多个输入,其中有三个都是未上链的交易. outEdges则表示哪些依赖自己的Tx的Hash值. 在区块链中广泛使用Hash值,大家需要习惯.</p><p>针对刚刚的例子,那么TX1这个节点应该是如下</p><div class="language-go line-numbers-mode"><pre><code><span class="token punctuation">{</span>\n    value<span class="token punctuation">:</span>TX1<span class="token punctuation">,</span>\n    outEdges<span class="token punctuation">:</span><span class="token punctuation">{</span>TX2_Hash<span class="token punctuation">,</span>TX4_Hash<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    inDegeree<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>而缓冲池中的所有Tx则用hashGraph来表示,为什么不用传统的Graph来表示呢,是因为考虑到缓冲池中的Tx很多时候没有依赖关系,这时候实际上不是一张图,而是多张图,也就是一个Graph的数组. 因此通过hashGraph这种map的形式表示更灵活.</p><h3 id="创建hashgraph"><a class="header-anchor" href="#创建hashgraph" aria-hidden="true">#</a> 创建hashGraph</h3><p>首先要讲缓冲池中的Tx表达成图 makeGraph的输入就是所有Tx,其中map的key就是Tx的Hash.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">makeGraph</span><span class="token punctuation">(</span>set <span class="token keyword">map</span><span class="token punctuation">[</span>chainhash<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token operator">*</span>wire<span class="token punctuation">.</span>MsgTx<span class="token punctuation">)</span> hashGraph <span class="token punctuation">{</span>\n\tgraph <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>hashGraph<span class="token punctuation">)</span>\n\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> set <span class="token punctuation">{</span>\n        <span class="token comment">//首先遍历所有的交易</span>\n\t\ttxHash <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">TxHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> graph<span class="token punctuation">[</span>txHash<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>\n            <span class="token comment">//如果该交易没有对应的节点,就创建他.</span>\n\t\t\tgraph<span class="token punctuation">[</span>txHash<span class="token punctuation">]</span> <span class="token operator">=</span> graphNode<span class="token punctuation">{</span>value<span class="token punctuation">:</span> tx<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\n\tinputLoop<span class="token punctuation">:</span>\n\t\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> input <span class="token operator">:=</span> <span class="token keyword">range</span> tx<span class="token punctuation">.</span>TxIn <span class="token punctuation">{</span>\n            <span class="token comment">//遍历该Tx的所有输入,找寻依赖</span>\n\t\t\t<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> set<span class="token punctuation">[</span>input<span class="token punctuation">.</span>PreviousOutPoint<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>\n                <span class="token comment">//如果依赖的Tx不在缓冲池中,有两种情况</span>\n                <span class="token comment">//1. 孤儿交易</span>\n                <span class="token comment">//2. 依赖的交易已经上链</span>\n\t\t\t\t<span class="token keyword">continue</span>\n\t\t\t<span class="token punctuation">}</span>\n            <span class="token comment">//当前交易依赖的其中一个交易</span>\n\t\t\tinputNode <span class="token operator">:=</span> graph<span class="token punctuation">[</span>input<span class="token punctuation">.</span>PreviousOutPoint<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span>\n\n\t\t\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> outEdge <span class="token operator">:=</span> <span class="token keyword">range</span> inputNode<span class="token punctuation">.</span>outEdges <span class="token punctuation">{</span>\n                <span class="token comment">//如果已经存在一条边,跳过</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token operator">*</span>outEdge <span class="token operator">==</span> input<span class="token punctuation">.</span>PreviousOutPoint<span class="token punctuation">.</span>Hash <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token keyword">continue</span> inputLoop\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\n            <span class="token comment">/*\n            在Input的outEdges中加入一条边,\n            同时当前节点的入度要加1\n            */</span>\n\t\t\tinputTx <span class="token operator">:=</span> inputNode<span class="token punctuation">.</span>value\n\t\t\t<span class="token keyword">if</span> inputTx <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n                <span class="token comment">//之所以存在inputTx为空的情况,是与交易的遍历顺序有关系</span>\n\t\t\t\tinputTx <span class="token operator">=</span> set<span class="token punctuation">[</span>input<span class="token punctuation">.</span>PreviousOutPoint<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\tgraph<span class="token punctuation">[</span>input<span class="token punctuation">.</span>PreviousOutPoint<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span> <span class="token operator">=</span> graphNode<span class="token punctuation">{</span>\n\t\t\t\tvalue<span class="token punctuation">:</span>    inputTx<span class="token punctuation">,</span>\n\t\t\t\toutEdges<span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span>inputNode<span class="token punctuation">.</span>outEdges<span class="token punctuation">,</span> <span class="token operator">&amp;</span>txHash<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t\tinDegree<span class="token punctuation">:</span> inputNode<span class="token punctuation">.</span>inDegree<span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\tnode <span class="token operator">:=</span> graph<span class="token punctuation">[</span>txHash<span class="token punctuation">]</span>\n\t\t\tgraph<span class="token punctuation">[</span>txHash<span class="token punctuation">]</span> <span class="token operator">=</span> graphNode<span class="token punctuation">{</span>\n\t\t\t\tvalue<span class="token punctuation">:</span>    tx<span class="token punctuation">,</span>\n\t\t\t\toutEdges<span class="token punctuation">:</span> node<span class="token punctuation">.</span>outEdges<span class="token punctuation">,</span>\n\t\t\t\tinDegree<span class="token punctuation">:</span> node<span class="token punctuation">.</span>inDegree <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> graph\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h3 id="获取当前有多少张图"><a class="header-anchor" href="#获取当前有多少张图" aria-hidden="true">#</a> 获取当前有多少张图</h3><p>graphRoots在hashGraph中找出所有入度为0的节点,这些节点分别就是每一个独立的图的入口.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">graphRoots</span><span class="token punctuation">(</span>graph hashGraph<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>wire<span class="token punctuation">.</span>MsgTx <span class="token punctuation">{</span>\n\troots <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>wire<span class="token punctuation">.</span>MsgTx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> node <span class="token operator">:=</span> <span class="token keyword">range</span> graph <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> node<span class="token punctuation">.</span>inDegree <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\troots <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>roots<span class="token punctuation">,</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> roots\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="拓扑排序"><a class="header-anchor" href="#拓扑排序" aria-hidden="true">#</a> 拓扑排序</h3><p>有了这些组件,再来看拓扑排序就会很简单,我在重复一下开始的思路:</p><ol><li>从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出。</li><li>从图中删除该顶点和所有以它为起点的有向边。</li><li>重复 1 和 2 直到当前的 DAG 图为空或当前图中不存在无前驱的顶点为止。后一种情况说明有向图中必然存在环。</li></ol><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">DependencySort</span><span class="token punctuation">(</span>txs <span class="token keyword">map</span><span class="token punctuation">[</span>chainhash<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token operator">*</span>wire<span class="token punctuation">.</span>MsgTx<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>wire<span class="token punctuation">.</span>MsgTx <span class="token punctuation">{</span>\n\tgraph <span class="token operator">:=</span> <span class="token function">makeGraph</span><span class="token punctuation">(</span>txs<span class="token punctuation">)</span>\n\ts <span class="token operator">:=</span> <span class="token function">graphRoots</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span>\n\n    <span class="token comment">//一种特殊情况,就是所有的交易都是独立的,互相不依赖.</span>\n\t<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>txs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> s\n\t<span class="token punctuation">}</span>\n    <span class="token comment">/*\n    s中保存的全都是入度为0的节点,\n    sorted中的是已经按照依赖排过序的Tx\n    */</span>\n\tsorted <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>wire<span class="token punctuation">.</span>MsgTx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>txs<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n        <span class="token comment">//步骤1,取一个入度为0的节点</span>\n\t\ttx <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n        s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n\t\tsorted <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sorted<span class="token punctuation">,</span> tx<span class="token punctuation">)</span>\n\n        n <span class="token operator">:=</span> graph<span class="token punctuation">[</span>tx<span class="token punctuation">.</span><span class="token function">TxHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n        <span class="token comment">//步骤2: 从图中删除该顶点和所有以它为起点的有向边。</span>\n\t\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> mHash <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>outEdges <span class="token punctuation">{</span>\n\t\t\tm <span class="token operator">:=</span> graph<span class="token punctuation">[</span><span class="token operator">*</span>mHash<span class="token punctuation">]</span>\n\t\t\t<span class="token keyword">if</span> m<span class="token punctuation">.</span>inDegree <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\t\tm<span class="token punctuation">.</span>inDegree<span class="token operator">--</span>\n                graph<span class="token punctuation">[</span><span class="token operator">*</span>mHash<span class="token punctuation">]</span> <span class="token operator">=</span> m\n                <span class="token comment">//入度为0的,加入s</span>\n\t\t\t\t<span class="token keyword">if</span> m<span class="token punctuation">.</span>inDegree <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\t\t\ts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> m<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 结束的时候所有的Tx已经按照依赖排好序了</span>\n\t<span class="token keyword">return</span> sorted\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>',31)];t.render=function(a,p,t,o,c,l){return n(),s("div",null,e)};export{p as __pageData,t as default};
