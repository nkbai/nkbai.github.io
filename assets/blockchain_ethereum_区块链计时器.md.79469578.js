import{o as a,c as n,e}from"./app.735ab1d2.js";const s='{"title":"区块链计时器","description":"","frontmatter":{"title":"区块链计时器","date":"2018-08-27T02:48:47.000Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"基础数据","slug":"基础数据"},{"level":2,"title":"1.创建","slug":"_1-创建"},{"level":2,"title":"2.注册回调函数","slug":"_2-注册回调函数"},{"level":2,"title":"3. 启动","slug":"_3-启动"},{"level":2,"title":"4.停止","slug":"_4-停止"}],"relativePath":"blockchain/ethereum/区块链计时器.md","lastUpdated":1561553438000}',l={},r=[e('<p>块计时器服务 位于&quot;<a href="http://github.com/SmartMeshFoundation/SmartRaiden/blockchain" target="_blank" rel="noopener noreferrer">github.com/SmartMeshFoundation/SmartRaiden/blockchain</a>&quot;</p><p>区块链上应用程序的计时器实际就是每一块,也就是每一个滴答就是一块. AlarmTask提供计时服务,每当有新块到来的时候都会通过AlarmCallback进行通知.</p><h2 id="基础数据"><a class="header-anchor" href="#基础数据" aria-hidden="true">#</a> 基础数据</h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">//AlarmCallback stop this call back when return non nil error</span>\n<span class="token keyword">type</span> AlarmCallback <span class="token keyword">func</span><span class="token punctuation">(</span>blockNumber <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_1-创建"><a class="header-anchor" href="#_1-创建" aria-hidden="true">#</a> 1.创建</h2><div class="language-go line-numbers-mode"><pre><code><span class="token function">NewAlarmTask</span><span class="token punctuation">(</span>client <span class="token operator">*</span>helper<span class="token punctuation">.</span>SafeEthClient<span class="token punctuation">)</span> <span class="token operator">*</span>AlarmTask \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="_2-注册回调函数"><a class="header-anchor" href="#_2-注册回调函数" aria-hidden="true">#</a> 2.注册回调函数</h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">//回调函数不能阻塞,应该立即返回,如需其他处理,可以通过 Channel.</span>\n<span class="token function">RegisterCallback</span><span class="token punctuation">(</span>callback AlarmCallback<span class="token punctuation">)</span> \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_3-启动"><a class="header-anchor" href="#_3-启动" aria-hidden="true">#</a> 3. 启动</h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">//直接调用 Start 即可</span>\n<span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_4-停止"><a class="header-anchor" href="#_4-停止" aria-hidden="true">#</a> 4.停止</h2><p>//直接调用 Stop 即可.</p>',12)];l.render=function(e,s,l,t,p,c){return a(),n("div",null,r)};export{s as __pageData,l as default};
