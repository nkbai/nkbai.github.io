import{o as e,c as a,e as t}from"./app.e869f547.js";const r='{"title":"异常退出各种情况","description":"","frontmatter":{"title":"异常退出各种情况","date":"2018-08-27T02:48:47.000Z","draft":false,"markup":"mmark"},"relativePath":"blockchain/ethereum/异常退出各种情况.md","lastUpdated":1641604782000}',n={},c=[t('<h1 id="发送消息崩溃"><a class="header-anchor" href="#发送消息崩溃" aria-hidden="true">#</a> 发送消息崩溃</h1><p>收到消息处理完毕,消息可能发送也可能没法送出去，不建议使用。 EventSendMediatedTransferAfter 作为中间节点,只处理了这一种情况. EventSendRevealSecretAfter EventSendBalanceProofAfter EventSendSecretRequestAfter EventSendRefundTransferAfter EventSendRemoveExpiredHashlockTransferAfter 当移除超时 lock 时发送此消息</p><h1 id="收到消息崩溃"><a class="header-anchor" href="#收到消息崩溃" aria-hidden="true">#</a> 收到消息崩溃</h1><p>ActionInitTargetStateChange 收到mtr,它是接收方 ReceiveSecretRequestStateChange ReceiveTransferRefundStateChange ReceiveBalanceProofStateChange ActionInitMediatorStateChange 收到mtr,它是中间节点 //ActionInitInitiatorStateChange 收到用户发起的交易请求崩溃,没成功 它是发起方 //ReceiveSecretRevealStateChange 收到 secret披露后崩溃 BeforeSendRevealSecret 发送secret之前</p><h1 id="收到-ack-崩溃"><a class="header-anchor" href="#收到-ack-崩溃" aria-hidden="true">#</a> 收到 ack 崩溃</h1><p>SecretRequestRecevieAck SecretRecevieAck #balanceproof MediatedTransferRecevieAck RefundTransferRecevieAck RevealSecretRecevieAck</p>',6)];n.render=function(t,r,n,i,d,f){return e(),a("div",null,c)};export{r as __pageData,n as default};
