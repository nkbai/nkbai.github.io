import{_ as a,c as s,o as e,N as l}from"./chunks/framework.3a9190c5.js";const m=JSON.parse('{"title":"小程序通用越权漏洞分析","description":"","frontmatter":{"title":"小程序通用越权漏洞分析","date":"2022-08-21T13:57:03.000Z","hide":false,"tags":["security","app","android"],"categories":["技术相关"]},"headers":[],"relativePath":"app_security/Identity_Confusion_in_WebView-based_Mobile_App-in-app_Ecosystems.md"}'),n={name:"app_security/Identity_Confusion_in_WebView-based_Mobile_App-in-app_Ecosystems.md"},o=l(`<p>文章来自:<a href="https://www.usenix.org/system/files/sec22-zhang-lei.pdf" target="_blank" rel="noreferrer">https://www.usenix.org/system/files/sec22-zhang-lei.pdf</a></p><p>这篇文章分析的对象是各种小程序平台,比如微信,tiktok,头条等,这些app上面可以运行各种小程序,但是因为实现方式存在各种各样的问题,导致了越权漏洞.</p><p>文章应该说是从微信的一个漏洞推广出去,作为因子,分析了众多的知名小程序平台,发现都存在各种各样的问题.</p><h2 id="微信小程序的漏洞描述" tabindex="-1">微信小程序的漏洞描述 <a class="header-anchor" href="#微信小程序的漏洞描述" aria-label="Permalink to &quot;微信小程序的漏洞描述&quot;">​</a></h2><p><img alt="image-20220822100411525" data-src="img/weixin_pinduoduo.png" loading="lazy" class="lazy"></p><p>主要是存在三个问题:</p><ul><li><ol><li>微信小程序平台域名校验有问题,导致误报其他域名的网页当做拼多多的小程序</li></ol></li><li><ol start="2"><li>拼多多小程序后端server没有对签名api这么重要的api做鉴权保护</li></ol></li><li><ol start="3"><li>微信小程序平台私有api,保护不到位,可以被小程序调用(下载,按照app的. 估计其他平台多半也有这样的功能)</li></ol><h2 id="tiktok的漏洞" tabindex="-1">tiktok的漏洞 <a class="header-anchor" href="#tiktok的漏洞" aria-label="Permalink to &quot;tiktok的漏洞&quot;">​</a></h2><p>“window.location.href = htttp://maliciousbenign.com”. Since “htttp” is not a supported scheme, this URL will trigger the race condition of onPageStarted.</p><h2 id="alipay的漏洞" tabindex="-1">alipay的漏洞 <a class="header-anchor" href="#alipay的漏洞" aria-label="Permalink to &quot;alipay的漏洞&quot;">​</a></h2><p>alipay的问题在于hidden api(一个rpc api) 不应该被小程序调用,但是没有做保护,导致任意小程序都可以操作rpc api.</p><h2 id="小程序-身份标识" tabindex="-1">小程序 身份标识 <a class="header-anchor" href="#小程序-身份标识" aria-label="Permalink to &quot;小程序 身份标识&quot;">​</a></h2><p>平台识别小程序主要有两个:</p><ul><li>域名 限制加载的范围</li><li>appid 限制api的访问范围</li><li>Capability 精细化授权,小程序可以访问那些api. 只有微信以及UnionPay有,其他都没采用.</li></ul></li></ul><h2 id="几种越权场景" tabindex="-1">几种越权场景 <a class="header-anchor" href="#几种越权场景" aria-label="Permalink to &quot;几种越权场景&quot;">​</a></h2><h3 id="基于域名认证的" tabindex="-1">基于域名认证的 <a class="header-anchor" href="#基于域名认证的" aria-label="Permalink to &quot;基于域名认证的&quot;">​</a></h3><p>Domain Name Confusion</p><p><img alt="image-20220822101838607" data-src="img/webview_geturl.png" loading="lazy" class="lazy"></p><h4 id="常见的域名校验问题" tabindex="-1">常见的域名校验问题 <a class="header-anchor" href="#常见的域名校验问题" aria-label="Permalink to &quot;常见的域名校验问题&quot;">​</a></h4><h5 id="白名单机制" tabindex="-1">白名单机制 <a class="header-anchor" href="#白名单机制" aria-label="Permalink to &quot;白名单机制&quot;">​</a></h5><p>白名单校验机制在小程序平台,但是白名单的提供方在小程序,两种对于校验规则的理解不一致,导致出问题. 比如 小程序平台以endsWith来校验小程序提供的名单,但是小程序提供了bengin.com,导致maliciousbenign.com可以通过校验</p><h4 id="url-parsing有问题" tabindex="-1">url parsing有问题 <a class="header-anchor" href="#url-parsing有问题" aria-label="Permalink to &quot;url parsing有问题&quot;">​</a></h4><p><a href="https://benign.com" target="_blank" rel="noreferrer">https://benign.com</a>:x@ malicious.com 正确的域名应该是malicious.com,但是却识别为bengin.com, 多半见于正则表达式识别.</p><h5 id="javascript-没有正确识别" tabindex="-1">javascript:// 没有正确识别 <a class="header-anchor" href="#javascript-没有正确识别" aria-label="Permalink to &quot;javascript:// 没有正确识别&quot;">​</a></h5><p>目前应该比较少才对,<code>loadUrl(&quot;javascript://alert(3)&quot;)</code></p><h5 id="嵌套iframe问题" tabindex="-1">嵌套iframe问题 <a class="header-anchor" href="#嵌套iframe问题" aria-label="Permalink to &quot;嵌套iframe问题&quot;">​</a></h5><p>evil 故意嵌套一个合法的域名,或者反过来,合法的域名有漏洞,可以将一个evil.com嵌套在它的iframe中</p><h5 id="域名越权的poc" tabindex="-1">域名越权的poc <a class="header-anchor" href="#域名越权的poc" aria-label="Permalink to &quot;域名越权的poc&quot;">​</a></h5><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">//JavaScript</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nativeInterface</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">framelessPostMessage</span><span style="color:#F07178;">(’</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">func</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">authentication.getAuthToken</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> args</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">privileged.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]]</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">’)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//res can be leaked to malicious server</span></span>
<span class="line"><span style="color:#89DDFF;">...</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">1500</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">href </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://privileged.com/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="通过frame来越权" tabindex="-1">通过frame来越权 <a class="header-anchor" href="#通过frame来越权" aria-label="Permalink to &quot;通过frame来越权&quot;">​</a></h3><p>malicious.com 作为 privileged.com的一个iframe出现</p><p>因为小程序是比较广泛的,难免有某个小程序实现不严谨,存在这样的问题.</p><h3 id="appid越权" tabindex="-1">appid越权 <a class="header-anchor" href="#appid越权" aria-label="Permalink to &quot;appid越权&quot;">​</a></h3><p>冒充其他小程序,举的例子都是根据域名来做小程序身份判断的.</p><h3 id="capability-越权" tabindex="-1">Capability 越权 <a class="header-anchor" href="#capability-越权" aria-label="Permalink to &quot;Capability 越权&quot;">​</a></h3><ul><li><ol><li>小程序平台的私有api没有保护好</li></ol></li><li><ol start="2"><li>小程序的特权api,比如签名api,没有保护好.</li></ol></li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="从一个漏洞推广开来的方法论" tabindex="-1">从一个漏洞推广开来的方法论 <a class="header-anchor" href="#从一个漏洞推广开来的方法论" aria-label="Permalink to &quot;从一个漏洞推广开来的方法论&quot;">​</a></h3><p>从微信的一个漏洞,推广到所有平台,如果只是微信的一个漏洞,是形不成高质量的论文的. 小程序本身是一个比较小的领域,但是近年来顶级app基本都支持了这个特性,导致其影响范围其实不小.</p><h3 id="分析过程值得学习" tabindex="-1">分析过程值得学习 <a class="header-anchor" href="#分析过程值得学习" aria-label="Permalink to &quot;分析过程值得学习&quot;">​</a></h3><p>比如<code>Capability confusion analysis</code> :</p><ol><li>静态分析,提前相邻的api</li><li>看看动态调用的结果</li><li>如果某个api总是在privileged API之前被调用,那么他就是一个secret api.</li></ol><h3 id="文章提到的一个修复建议" tabindex="-1">文章提到的一个修复建议 <a class="header-anchor" href="#文章提到的一个修复建议" aria-label="Permalink to &quot;文章提到的一个修复建议&quot;">​</a></h3><p><a href="https://seclab.illinois.edu/wp-content/uploads/2016/10/draco-ccs-2016.pdf" target="_blank" rel="noreferrer">A system for uniform and fine-grained access control for web code on android</a></p>`,37),p=[o];function i(t,r,c,d,h,u){return e(),s("div",null,p)}const b=a(n,[["render",i]]);export{m as __pageData,b as default};
