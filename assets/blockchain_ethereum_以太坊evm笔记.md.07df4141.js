import{_ as s,c as n,o as a,N as l}from"./chunks/framework.3a9190c5.js";const i=JSON.parse('{"title":"以太坊evm笔记","description":"","frontmatter":{"title":"以太坊evm笔记","date":"2019-04-26T06:58:56.834Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/ethereum/以太坊evm笔记.md"}'),p={name:"blockchain/ethereum/以太坊evm笔记.md"},o=l(`<h1 id="阅读以太坊evm的一些笔记" tabindex="-1">阅读以太坊EVM的一些笔记 <a class="header-anchor" href="#阅读以太坊evm的一些笔记" aria-label="Permalink to &quot;阅读以太坊EVM的一些笔记&quot;">​</a></h1><h2 id="evm的指令" tabindex="-1">EVM的指令 <a class="header-anchor" href="#evm的指令" aria-label="Permalink to &quot;EVM的指令&quot;">​</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">operation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// op is the operation function</span></span>
<span class="line"><span style="color:#A6ACCD;">	execute executionFunc</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// gasCost is the gas function and returns the gas required for execution</span></span>
<span class="line"><span style="color:#A6ACCD;">	gasCost gasFunc</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// validateStack validates the stack (size) for the operation</span></span>
<span class="line"><span style="color:#A6ACCD;">	validateStack stackValidationFunc</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// memorySize returns the memory size required for the operation</span></span>
<span class="line"><span style="color:#A6ACCD;">	memorySize memorySizeFunc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	halts   </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// indicates whether the operation should halt further execution</span></span>
<span class="line"><span style="color:#A6ACCD;">	jumps   </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// indicates whether the program counter should not increment</span></span>
<span class="line"><span style="color:#A6ACCD;">	writes  </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// determines whether this a state modifying operation</span></span>
<span class="line"><span style="color:#A6ACCD;">	valid   </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// indication whether the retrieved operation is valid and known</span></span>
<span class="line"><span style="color:#A6ACCD;">	reverts </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// determines whether the operation reverts state (implicitly halts)</span></span>
<span class="line"><span style="color:#A6ACCD;">	returns </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// determines whether the operations sets the return data content</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//目前可以返回数据的指令有opCreate,opCall,opDelegateCall,opStaticCall,opCallCode</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//另外一个就是opRevert,这个应该是为了方便调试,revert(&quot;debug info&quot;)/ 知道在哪里出问题了.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>所有的指令都封装成这个operation结构体, 比如</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// NewFrontierInstructionSet returns the frontier instructions</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// that can be executed during the frontier phase.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewFrontierInstructionSet</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">256</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">operation </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">256</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">operation</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        STOP</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			execute</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">       opStop</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">			gasCost</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">constGasFunc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">			validateStack</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">makeStackFunc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">			halts</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">			valid</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">		ADD</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			execute</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">       opAdd</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">			gasCost</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">constGasFunc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GasFastestStep</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">			validateStack</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">makeStackFunc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">			valid</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>执行指令的是execute,计算gas花费的是gasCost, 计算指令内存使用的是memorySize, 在执行指令之前校验stack的是validateStack 其中execute,gasCost和validateStack 必有.</p><h3 id="指令的分叉" tabindex="-1">指令的分叉 <a class="header-anchor" href="#指令的分叉" aria-label="Permalink to &quot;指令的分叉&quot;">​</a></h3><p>在jump_table.go 中,可以通过使用不同的table,让不同的分叉可以使用有些细微差异的指令集.</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	frontierInstructionSet  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewFrontierInstructionSet</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	homesteadInstructionSet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewHomesteadInstructionSet</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	byzantiumInstructionSet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewByzantiumInstructionSet</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="指令相关文件" tabindex="-1">指令相关文件 <a class="header-anchor" href="#指令相关文件" aria-label="Permalink to &quot;指令相关文件&quot;">​</a></h3><p>instructions.go中给出所有指令的execute gas_table.go 给出所有指令计算gas的方法 memory_table.go给出所有需要计算memory占用的指令,以及计算方法.</p><h2 id="evm的创建以及合约函数执行" tabindex="-1">EVM的创建以及合约函数执行 <a class="header-anchor" href="#evm的创建以及合约函数执行" aria-label="Permalink to &quot;EVM的创建以及合约函数执行&quot;">​</a></h2><p>位于evm.go中,此部分是EVM的核心,包含了如何创建evm实例,以及几个合约的调用方式: call,staticcall,delegatecall,callcode</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">caller:合约中的msg.sender</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">如果是外部合约调用,则是TX中的From,否则则是调用其他合约的合约地址</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">addr: 被调用合约的地址</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EVM</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Call</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">caller ContractRef</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> addr common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> leftOverGas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">2. CallCode主要是服务于library,假设如下调用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">账户A调用ContractA的FA,然后FA调用Library B的FB,这时候在FB中看到的msg.sender是ContractA,value是由调用FB的时候指定的.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EVM</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CallCode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">caller ContractRef</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> addr common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> leftOverGas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">3. DelegateCall 是CallCode的升级,也是服务于Library,假设调用如下:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">账户A调用ContractA的FA,然后FA调用Library B的FB,这时候在FB中看到的msg.sender是A,value是由A调用FA的时候指定的</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EVM</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DelegateCall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">caller ContractRef</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> addr common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> leftOverGas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">4. StaticCall 用于查询合约.保证该调用执行过程中合约状态不被修改.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">用户直接发起的查询或者在合约调用中(比如刚刚的FA),读取查询合约的状态.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">目前solidity并没有生成该指令,就算是对于只读的合约访问,也是生成call指令而不是staticcall</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">在拜占庭分叉以后才会支持staticcall指令.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EVM</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StaticCall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">caller ContractRef</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> addr common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> leftOverGas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="内置合约" tabindex="-1">内置合约 <a class="header-anchor" href="#内置合约" aria-label="Permalink to &quot;内置合约&quot;">​</a></h3><p>对于一些常用的操作,比如ecrecover,并没有专用的指令集,他实际上是通过一些内置的合约来进行支持的. 下面是目前内置的几个合约ecrecover,sha256hash,ripemd160hash和dataCopy 其中dataCopy没有实际实现,应该是留作后用. 注意的是这些内置合约solidity是知道的,并且也是支持的.</p><p>另外这些合约收取的gas费并不按照标准的call收取.</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// PrecompiledContract is the basic interface for native Go contracts. The implementation</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// requires a deterministic gas count based on the input size of the Run method of the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// contract.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrecompiledContract</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">RequiredGas</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">input </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// RequiredPrice calculates the contract gas use</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">input </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Run runs the precompiled contract</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//这些是平时说的内置合约,他们不以指令的形式出现,但是通过内置合约进行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// PrecompiledContractsHomestead contains the default set of pre-compiled Ethereum</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// contracts used in the Frontier and Homestead releases.</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> PrecompiledContractsHomestead </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map[</span><span style="color:#A6ACCD;">common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Address</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">PrecompiledContract</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">ecrecover</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">sha256hash</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">ripemd160hash</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">dataCopy</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// PrecompiledContractsByzantium contains the default set of pre-compiled Ethereum</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// contracts used in the Byzantium release.</span></span>
<span class="line"><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> PrecompiledContractsByzantium </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">map[</span><span style="color:#A6ACCD;">common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Address</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">PrecompiledContract</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">ecrecover</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">sha256hash</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">ripemd160hash</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">dataCopy</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">bigModExp</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">bn256Add</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">bn256ScalarMul</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">	common</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BytesToAddress</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">}):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">bn256Pairing</span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="int-pool" tabindex="-1">int pool <a class="header-anchor" href="#int-pool" aria-label="Permalink to &quot;int pool&quot;">​</a></h3><p>EVM基本单元是256位的虚拟机,所以里面操作的都是都是big.Int. 因此需要int pool来进行cache管理,避免内存分配.</p><p>思路也很简单,看看很容易理解.</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> poolLimit </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">256</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// intPool is a pool of big integers that</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// can be reused for all big.Int operations.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">intPool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	pool </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Stack</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newIntPool</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">intPool </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">intPool</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">pool</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newstack</span><span style="color:#89DDFF;">()}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">intPool</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">intPool</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">is </span><span style="color:#89DDFF;">...*</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pool</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> poolLimit </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> is </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// verifyPool is a build flag. Pool verification makes sure the integrity</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// of the integer pool by comparing values to a default value.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> verifyPool </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">checkVal</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="stack管理" tabindex="-1">stack管理 <a class="header-anchor" href="#stack管理" aria-label="Permalink to &quot;stack管理&quot;">​</a></h3><p>EVM是一个非常简单的栈虚拟机,需要有一个管理栈数据的数据结构,看着也很简单.</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// stack is an object for basic stack operations. Items popped to the stack are</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// expected to be changed and modified. stack does not take care of adding newly</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// initialised objects.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Stack</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	data </span><span style="color:#89DDFF;">[]*</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">push</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">pop之类的指令</span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="指令执行-提纲挈领" tabindex="-1">指令执行 提纲挈领 <a class="header-anchor" href="#指令执行-提纲挈领" aria-label="Permalink to &quot;指令执行 提纲挈领&quot;">​</a></h2><h3 id="evm指令执行的入口" tabindex="-1">EVM指令执行的入口 <a class="header-anchor" href="#evm指令执行的入口" aria-label="Permalink to &quot;EVM指令执行的入口&quot;">​</a></h3><p>这里可以看出如何进行调用.</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">caller:合约中的msg.sender</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">如果是外部合约调用,则是TX中的From,否则则是调用其他合约的合约地址</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">addr: 被调用合约的地址</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Call executes the contract associated with the addr with the given input as</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// parameters. It also handles any necessary value transfer required and takes</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// the necessary steps to create accounts and reverses the state in case of an</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// execution error or failed value transfer.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EVM</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Call</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">caller ContractRef</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> addr common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> leftOverGas </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vmConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NoRecursion </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> gas</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Fail if we&#39;re trying to execute above the call depth limit</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">params</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CallCreateDepth</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> gas</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ErrDepth</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Fail if we&#39;re trying to transfer more than the available balance</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CanTransfer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StateDB</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> caller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Address</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!(</span><span style="color:#A6ACCD;">params</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsSIP004Block</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BlockNumber</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> params</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsChiefAddress</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> gas</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ErrInsufficientBalance</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">		to       </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AccountRef</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		snapshot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StateDB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Snapshot</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StateDB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Exist</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		precompiles </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> PrecompiledContractsHomestead</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ChainConfig</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">IsByzantium</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BlockNumber</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			precompiles </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> PrecompiledContractsByzantium</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> precompiles</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ChainConfig</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">IsEIP158</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BlockNumber</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sign</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> gas</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StateDB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateAccount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	evm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Transfer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StateDB</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> caller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Address</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> to</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Address</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Initialise a new contract and set the code that is to be used by the EVM.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// The contract is a scoped environment for this execution context only.</span></span>
<span class="line"><span style="color:#A6ACCD;">	contract </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewContract</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">caller</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gas</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//TODO cache chief [address -&gt; code]</span></span>
<span class="line"><span style="color:#A6ACCD;">	contract</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SetCallCode</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StateDB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetCodeHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StateDB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetCode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">addr</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	start </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Now</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Capture the tracer start/end events in debug mode</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vmConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Debug </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vmConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Tracer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CaptureStart</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">caller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Address</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gas</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Lazy evaluation of the parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">			evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vmConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Tracer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CaptureEnd</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gas</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Gas</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Since</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">start</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	ret</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// When an error was returned by the EVM or when setting the creation code</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// above we revert to the snapshot and consume any gas remaining. Additionally</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// when we&#39;re in homestead this also counts for code storage gas errors.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StateDB</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RevertToSnapshot</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">snapshot</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> errExecutionReverted </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			contract</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UseGas</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Gas</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> ret</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Gas</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div><h3 id="interpreter" tabindex="-1">Interpreter <a class="header-anchor" href="#interpreter" aria-label="Permalink to &quot;Interpreter&quot;">​</a></h3><p>控制着虚拟机指令的执行,最核心的就是Run函数</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Interpreter is used to run Ethereum based contracts and will utilise the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// passed evmironment to query external sources for state information.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// The Interpreter will run the byte code VM or JIT VM based on the passed</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// configuration.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Interpreter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	evm      </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EVM</span></span>
<span class="line"><span style="color:#A6ACCD;">	cfg      Config</span></span>
<span class="line"><span style="color:#A6ACCD;">	gasTable params</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">GasTable</span></span>
<span class="line"><span style="color:#A6ACCD;">	intPool  </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">intPool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	readOnly   </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// Whether to throw on stateful modifications</span></span>
<span class="line"><span style="color:#A6ACCD;">	returnData </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Last CALL&#39;s return data for subsequent reuse</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//这里是虚拟机执行的核心,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//取指令</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//validateStack</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//enforceRestrictions</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//memorySize</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//execute  执行指令</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Run loops and evaluates the contract&#39;s code with the given input data and returns</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// the return byte-slice and an error if one occurred.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// It&#39;s important to note that any errors returned by the interpreter should be</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// considered a revert-and-consume-all-gas operation except for</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// errExecutionReverted which means revert-and-keep-gas-left.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Interpreter</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">contract </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Contract</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Increment the call depth which is restricted to 1024</span></span>
<span class="line"><span style="color:#A6ACCD;">	in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Reset the previous call&#39;s return data. It&#39;s unimportant to preserve the old buffer</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// as every returning call will return new data anyway.</span></span>
<span class="line"><span style="color:#A6ACCD;">	in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">returnData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Don&#39;t bother with the execution if there&#39;s no code.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Code</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	codehash </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CodeHash </span><span style="color:#676E95;font-style:italic;">// codehash is used when doing jump dest caching</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> codehash </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">common</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Hash</span><span style="color:#89DDFF;">{})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		codehash </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> crypto</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Keccak256Hash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Code</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">		op    OpCode        </span><span style="color:#676E95;font-style:italic;">// current opcode</span></span>
<span class="line"><span style="color:#A6ACCD;">		mem   </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewMemory</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// bound memory</span></span>
<span class="line"><span style="color:#A6ACCD;">		stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newstack</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// local stack</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// For optimisation reason we&#39;re using uint64 as the program counter.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// It&#39;s theoretically possible to go above 2^64. The YP defines the PC</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// to be uint256. Practically much less so feasible.</span></span>
<span class="line"><span style="color:#A6ACCD;">		pc   </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">uint64</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// program counter</span></span>
<span class="line"><span style="color:#A6ACCD;">		cost </span><span style="color:#C792EA;">uint64</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// copies used by tracer</span></span>
<span class="line"><span style="color:#A6ACCD;">		pcCopy  </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// needed for the deferred Tracer</span></span>
<span class="line"><span style="color:#A6ACCD;">		gasCopy </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// for Tracer to log gas remaining before execution</span></span>
<span class="line"><span style="color:#A6ACCD;">		logged  </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// deferred Tracer should ignore already logged steps</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Input </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> input</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Debug </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">logged </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">					in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Tracer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CaptureState</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pcCopy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> op</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gasCopy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cost</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">					in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Tracer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CaptureFault</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pcCopy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> op</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gasCopy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cost</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// The Interpreter main run loop (contextual). This loop runs until either an</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// explicit STOP, RETURN or SELFDESTRUCT is executed, an error occurred during</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// the execution of one of the operations or until the done flag is set by the</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// parent context.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> atomic</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">LoadInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">abort</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Debug </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// Capture pre-execution values for tracing.</span></span>
<span class="line"><span style="color:#A6ACCD;">			logged</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pcCopy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gasCopy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#A6ACCD;"> pc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Gas</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Get the operation from the jump table and validate the stack to ensure there are</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// enough stack items available to perform the operation.</span></span>
<span class="line"><span style="color:#A6ACCD;">		op </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetOp</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pc</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		operation </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">JumpTable</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">op</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">operation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">valid </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Errorf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">invalid opcode 0x%x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">op</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> operation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">validateStack</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// If the operation is valid, enforce and write restrictions</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enforceRestrictions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">op</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> operation</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> memorySize </span><span style="color:#C792EA;">uint64</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// calculate the new memory size and expand the memory to fit</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// the operation</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> operation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memorySize </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			memSize</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> overflow </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bigUint64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">operation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">memorySize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> overflow </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> errGasUintOverflow</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// memory is expanded in words of 32 bytes. Gas</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// is also calculated in words.</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> memorySize</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> overflow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SafeMul</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">toWordSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">memSize</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> overflow </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> errGasUintOverflow</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DisableGasMetering </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// consume the gas and return an error if not enough gas is available.</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// cost is explicitly set so that the capture state defer method cas get the proper cost</span></span>
<span class="line"><span style="color:#A6ACCD;">			cost</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> operation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gasCost</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">gasTable</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> memorySize</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">contract</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UseGas</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cost</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> ErrOutOfGas</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> memorySize </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			mem</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Resize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">memorySize</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Debug </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Tracer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CaptureState</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> op</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gasCopy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cost</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			logged </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// execute the operation</span></span>
<span class="line"><span style="color:#A6ACCD;">		res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> operation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">pc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">evm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// verifyPool is a build flag. Pool verification makes sure the integrity</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// of the integer pool by comparing values to a default value.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> verifyPool </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#82AAFF;">verifyIntegerPool</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">intPool</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// if the operation clears the return data (e.g. it has returning data)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// set the last return to the result of the operation.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> operation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">returns </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			in</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">returnData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> res</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil:</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> operation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reverts</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> errExecutionReverted</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> operation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">halts</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">operation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">jumps</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">			pc</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br></div></div><p>相比与比特币的虚拟机,EVM特点是比较规范,从Interpreter.go中可以看出其执行流程非常简洁统一.</p>`,34),e=[o];function t(r,c,D,y,F,A){return a(),n("div",null,e)}const b=s(p,[["render",t]]);export{i as __pageData,b as default};
