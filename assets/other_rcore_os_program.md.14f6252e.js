import{_ as s,c as a,o as n,N as l}from"./chunks/framework.3a9190c5.js";const d=JSON.parse('{"title":"rcore实验记录","description":"","frontmatter":{"title":"rcore实验记录","date":"2022-07-31T03:06:23.000Z","draft":false},"headers":[],"relativePath":"other/rcore_os_program.md"}'),e={name:"other/rcore_os_program.md"},p=l(`<h1 id="rcore实验记录" tabindex="-1">rCore实验记录 <a class="header-anchor" href="#rcore实验记录" aria-label="Permalink to &quot;rCore实验记录&quot;">​</a></h1><h2 id="rust语言学习" tabindex="-1">rust语言学习 <a class="header-anchor" href="#rust语言学习" aria-label="Permalink to &quot;rust语言学习&quot;">​</a></h2><p>rust语言已经接触比较久了,所以rustlings只是简单做了一小部分. rustlings作为一个工具考试工具还是不错的. 以后可以在此基础上做一些小工具.</p><h2 id="实验记录" tabindex="-1">实验记录 <a class="header-anchor" href="#实验记录" aria-label="Permalink to &quot;实验记录&quot;">​</a></h2><p>下面说一下做实验的过程, 操作系统已经学了很多年了,一直也没有上手的机会.现在有了qemu这样的工具, 可以完全脱离硬件来学习os. 当年学校minix的时候,都要用vmware这样的工具才行. 相比之下,qemu依赖要少得多.我看不少同学都做了可视化的调试工具. 基于qemu,我知道可以用gdb调试内核. 刷ctf题的时候调试过, 现在有了vscode这样的超级定制款ide,确实把os开发的门槛降低了很多.</p><p>我主要做了四个实验,分别是os3,os4,os5,os6. 由于时间关系,os8就没做了,来不及了.</p><h3 id="实验os3" tabindex="-1">实验os3 <a class="header-anchor" href="#实验os3" aria-label="Permalink to &quot;实验os3&quot;">​</a></h3><p>这个实验是练手熟悉系统用的,实现两个简单的syscall,分别是get_time和sys_task_info. 尤其是像get_time这种高频的系统调用,目前都已经不在通过系统调用来实现了,都是通过vdso. 实验中可以看到每次系统调用进出,要保存很多东西,退出还要复原很多东西. 这还是在os3这种没有分页支持,如果加入了分页,系统调用的成本就更高了.</p><p>下面给一个目前ubuntu上 vdso的一个样例:</p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vagrant@ubuntu-bionic:~$ cat /proc/self/maps</span></span>
<span class="line"><span style="color:#A6ACCD;">563beb95e000-563beb966000 r-xp 00000000 08:01 13                         /bin/cat</span></span>
<span class="line"><span style="color:#A6ACCD;">563bebb65000-563bebb66000 r--p 00007000 08:01 13                         /bin/cat</span></span>
<span class="line"><span style="color:#A6ACCD;">563bebb66000-563bebb67000 rw-p 00008000 08:01 13                         /bin/cat</span></span>
<span class="line"><span style="color:#A6ACCD;">563bed3d5000-563bed3f6000 rw-p 00000000 00:00 0                          [heap]</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c6c63000-7fb1c6c85000 rw-p 00000000 00:00 0</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c6c85000-7fb1c6df8000 r--p 00000000 08:01 7839                       /usr/lib/locale/C.UTF-8/LC_COLLATE</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c6df8000-7fb1c6fdf000 r-xp 00000000 08:01 2243                       /lib/x86_64-linux-gnu/libc-2.27.so</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c6fdf000-7fb1c71df000 ---p 001e7000 08:01 2243                       /lib/x86_64-linux-gnu/libc-2.27.so</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c71df000-7fb1c71e3000 r--p 001e7000 08:01 2243                       /lib/x86_64-linux-gnu/libc-2.27.so</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c71e3000-7fb1c71e5000 rw-p 001eb000 08:01 2243                       /lib/x86_64-linux-gnu/libc-2.27.so</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c71e5000-7fb1c71e9000 rw-p 00000000 00:00 0</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c71e9000-7fb1c7212000 r-xp 00000000 08:01 2238                       /lib/x86_64-linux-gnu/ld-2.27.so</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7233000-7fb1c7264000 r--p 00000000 08:01 7840                       /usr/lib/locale/C.UTF-8/LC_CTYPE</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7264000-7fb1c7265000 r--p 00000000 08:01 7845                       /usr/lib/locale/C.UTF-8/LC_NUMERIC</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7265000-7fb1c7266000 r--p 00000000 08:01 7848                       /usr/lib/locale/C.UTF-8/LC_TIME</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7266000-7fb1c7267000 r--p 00000000 08:01 7843                       /usr/lib/locale/C.UTF-8/LC_MONETARY</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7267000-7fb1c7268000 r--p 00000000 08:01 7837                       /usr/lib/locale/C.UTF-8/LC_MESSAGES/SYS_LC_MESSAGES</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7268000-7fb1c7269000 r--p 00000000 08:01 7846                       /usr/lib/locale/C.UTF-8/LC_PAPER</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7269000-7fb1c726a000 r--p 00000000 08:01 7844                       /usr/lib/locale/C.UTF-8/LC_NAME</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c726a000-7fb1c726b000 r--p 00000000 08:01 7838                       /usr/lib/locale/C.UTF-8/LC_ADDRESS</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c726b000-7fb1c7406000 r--p 00000000 08:01 7834                       /usr/lib/locale/locale-archive</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7406000-7fb1c7408000 rw-p 00000000 00:00 0</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7408000-7fb1c7409000 r--p 00000000 08:01 7847                       /usr/lib/locale/C.UTF-8/LC_TELEPHONE</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7409000-7fb1c740a000 r--p 00000000 08:01 7842                       /usr/lib/locale/C.UTF-8/LC_MEASUREMENT</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c740a000-7fb1c7411000 r--s 00000000 08:01 5046                       /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7411000-7fb1c7412000 r--p 00000000 08:01 7841                       /usr/lib/locale/C.UTF-8/LC_IDENTIFICATION</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7412000-7fb1c7413000 r--p 00029000 08:01 2238                       /lib/x86_64-linux-gnu/ld-2.27.so</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7413000-7fb1c7414000 rw-p 0002a000 08:01 2238                       /lib/x86_64-linux-gnu/ld-2.27.so</span></span>
<span class="line"><span style="color:#A6ACCD;">7fb1c7414000-7fb1c7415000 rw-p 00000000 00:00 0</span></span>
<span class="line"><span style="color:#A6ACCD;">7ffc16f28000-7ffc16f49000 rw-p 00000000 00:00 0                          [stack]</span></span>
<span class="line"><span style="color:#A6ACCD;">7ffc16f93000-7ffc16f96000 r--p 00000000 00:00 0                          [vvar]</span></span>
<span class="line"><span style="color:#A6ACCD;">7ffc16f96000-7ffc16f98000 r-xp 00000000 00:00 0                          [vdso]</span></span>
<span class="line"><span style="color:#A6ACCD;">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p><a href="https://en.wikipedia.org/wiki/VDSO" target="_blank" rel="noreferrer">vdso</a> 作为一种灵活的,系统提供给用户层的代码,像get_time这种高频调用,成本就低多了.</p><p>这个实验碰到的比较坑的一个问题是,get_time因为模拟器的原因,并不准. 最后采用了一个很扯淡的方式,直接加了50来应付单元测试. 其实应该深入看看为啥模拟器的时间会飘.</p><h3 id="os4" tabindex="-1">os4 <a class="header-anchor" href="#os4" aria-label="Permalink to &quot;os4&quot;">​</a></h3><p>这个实验目的是让人理解基于页的内存管理的实现. 首先第一点,就是因为引入了虚拟内存管理,进程之间可以使用完全相同的地址空间,不像os3中还需要精心布局. 不过话说,在资源受限的嵌入式系统中,os3这种任务管理方式未必不是一件好的方式. 分页以后,复杂度一下子复杂了不少.</p><p>其次, sys_mmap的实现,这个相对比较简单,因为已经有参考实现了,insert_framed_area已经是现成的了. 只是自己实现一下<code>is_mapped</code>即可. 关键就是理解<code>MemorySet</code>的结构.</p><p>有了<code>is_mapped</code>,相对来说,<code>remove_framed_area</code>的实现,也就不复杂了.</p><h3 id="os5" tabindex="-1">os5 <a class="header-anchor" href="#os5" aria-label="Permalink to &quot;os5&quot;">​</a></h3><p>相比之下,os5要比os4简单许多,因为进程调度:</p><ol><li>进程调度算法本身比较简单</li><li>这是每一门操作系统课程会反复强调,甚至会让学生计算的一章.</li><li>环境都已经准备好了,fork,exec的实现都已经提供了剩下的,只是照抄,组合一下即可.</li><li>stride调度算法,本身实现起来很简单,只要找对地方,在进程发生切换的地方记录一下pass即可.</li></ol><h3 id="os6" tabindex="-1">os6 <a class="header-anchor" href="#os6" aria-label="Permalink to &quot;os6&quot;">​</a></h3><p>文件系统本身比较复杂,不过还好,拿到手的已经有了最核心的基于block设备的inode管理与分配. 比如Bitmap这样的数据结构.</p><p>总的来说,依葫芦画瓢本身不难,很快就有了,主要碰到的问题,有两个,一个是easy_fs println的支持,二是发现clear偶尔失败的问题.</p><h4 id="easy-fs-支持println" tabindex="-1">easy_fs 支持println <a class="header-anchor" href="#easy-fs-支持println" aria-label="Permalink to &quot;easy_fs 支持println&quot;">​</a></h4><p>easy_fs这个模块比较特殊,它既要在内核层工作,也要为easy_fs_fuse服务. 所以它本身没有任何log,为了让它支持log,这里用了一个很偷懒的办法,就是函数指针. 让用户层提供用户层的函数指针,内核层提供内核的函数指针,从而都可以println!. 指导书中建议引入log,我对此没有研究,后续有时间可以再看看. 这里还有一个题外话,就是因为忘记在memory中映射MMIO,还以为是函数指针设置的问题,反复测试,浪费了不少时间,主要是方向错了.</p><h4 id="clear偶尔失败的问题" tabindex="-1">clear偶尔失败的问题 <a class="header-anchor" href="#clear偶尔失败的问题" aria-label="Permalink to &quot;clear偶尔失败的问题&quot;">​</a></h4><p>这个问题很扯淡,跟踪调试了很久,也不断的看代码,觉得不应该有问题. 最后再读写block的地方打印日志找到了问题,原来是写进去以后读出来就不对了.</p><p>这下算是卡住了,在吴一凡同学的提示下,说是跨页问题. 就爬了爬rCore的issue,直接找到了答案. 用Vec来代替数组,因为Vec分配的时候是对齐的,避免了数据的跨页问题.</p><h3 id="os8" tabindex="-1">os8 <a class="header-anchor" href="#os8" aria-label="Permalink to &quot;os8&quot;">​</a></h3><p>经典的死锁解决算法, 平时基本上也用不到,加上确实时间来不及了,就战略放弃吧.</p>`,29),r=[p];function c(o,i,b,t,f,u){return n(),a("div",null,r)}const m=s(e,[["render",c]]);export{d as __pageData,m as default};
