import{_ as s,c as n,o as a,a as p}from"./app.8e8e8923.js";const m='{"title":"[9491455]\u6BD4\u7279\u5E01\u7684\u5730\u5740\u7C7B\u578B","description":"","frontmatter":{"title":"[9491455]\u6BD4\u7279\u5E01\u7684\u5730\u5740\u7C7B\u578B","date":"2019-05-22T23:47:24.337Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"AddressPubKey","slug":"addresspubkey"},{"level":2,"title":"AddressPubKeyHash","slug":"addresspubkeyhash"},{"level":2,"title":"AddressScriptHash","slug":"addressscripthash"},{"level":2,"title":"AddressWitnessPubKeyHash","slug":"addresswitnesspubkeyhash"},{"level":2,"title":"AddressWitnessScriptHash","slug":"addresswitnessscripthash"},{"level":2,"title":"PayToPubKeyHash","slug":"paytopubkeyhash"},{"level":2,"title":"\\bPayToPubKey","slug":"paytopubkey"},{"level":2,"title":"PayToScriptHash","slug":"paytoscripthash"},{"level":2,"title":"PayToWitnessPubKeyHash","slug":"paytowitnesspubkeyhash"},{"level":2,"title":"PayToWitnessScriptHash","slug":"paytowitnessscripthash"}],"relativePath":"blockchain/btcd/\u6BD4\u7279\u5E01\u7684\u5730\u5740\u7C7B\u578B.md"}',e={},t=p(`<h1 id="\u6BD4\u7279\u5E01\u7684\u5730\u5740\u7C7B\u578B" tabindex="-1">\u6BD4\u7279\u5E01\u7684\u5730\u5740\u7C7B\u578B <a class="header-anchor" href="#\u6BD4\u7279\u5E01\u7684\u5730\u5740\u7C7B\u578B" aria-hidden="true">#</a></h1><p>\u8FD9\u90E8\u5206\u5185\u5BB9\u4E3B\u8981\u6765\u81EA\u4E8Ebtcutil/address.go</p><p>\u4E00\u76F4\u56F0\u60D1\u6BD4\u7279\u5E01\u662F\u5982\u4F55\u9A8C\u8BC1\u4EA4\u6613\u7684,\u770B\u4E86\u8FD9\u4E2A\u5730\u8D28\u7C7B\u578B\u7B97\u662F\u6709\u70B9\u8C41\u7136\u5F00\u6717,\u5B9E\u9645\u4E0A\u6BD4\u7279\u5E01\u7684\u4EA4\u6613\u9A8C\u8BC1\u89C4\u5219\u8FD8\u662F\u6709\u70B9\u590D\u6742\u7684,\u5B83\u5E76\u4E0D\u50CF\u4EE5\u592A\u574A\u90A3\u4E48\u7B80\u5355\u660E\u786E.</p><p>\u4E2A\u4EBA\u7406\u89E3,\u6BD4\u7279\u5E01\u5BF9\u4E8E\u4EA4\u6613\u7684\u5904\u7406,\u9996\u5148\u662F\u6839\u636E pubkey script \u5224\u65AD\u662F\u4EC0\u4E48\u5730\u5740\u7C7B\u578B,\u7136\u540E\u8FDB\u884C\u4E0D\u540C\u7684\u9A8C\u8BC1\u65B9\u6CD5. \u6BD4\u5982\u5982\u679C\u5730\u8D28\u7C7B\u578B\u662FAddressWitnessPubKeyHash,\u90A3\u4E48\u9A8C\u8BC1\u89C4\u5219\u5C31\u660E\u663E\u548C P2PKH \u4E0D\u4E00\u6837.</p><p>\u4EE5\u4E0B\u662Faddress.go \u4E2D\u5982\u4F55\u89E3\u6790\u51FA\u5730\u5740:</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// DecodeAddress decodes the string encoding of an address and returns</span>
<span class="token comment">// the Address if addr is a valid encoding for a known address type.</span>
<span class="token comment">//</span>
<span class="token comment">// The bitcoin network the address is associated with is extracted if possible.</span>
<span class="token comment">// When the address does not encode the network, such as in the case of a raw</span>
<span class="token comment">// public key, the address will be associated with the passed defaultNet.</span>
<span class="token keyword">func</span> <span class="token function">DecodeAddress</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">,</span> defaultNet <span class="token operator">*</span>chaincfg<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">(</span>Address<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Bech32 encoded segwit addresses start with a human-readable part</span>
	<span class="token comment">// (hrp) followed by &#39;1&#39;. For Bitcoin mainnet the hrp is &quot;bc&quot;, and for</span>
	<span class="token comment">// testnet it is &quot;tb&quot;. If the address string has a prefix that matches</span>
	<span class="token comment">// one of the prefixes for the known networks, we try to decode it as</span>
	<span class="token comment">// a segwit address.</span>
	oneIndex <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">LastIndexByte</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> oneIndex <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token comment">// The HRP is everything before the found &#39;1&#39;.</span>
		hrp <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token punctuation">:</span>oneIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> hrp <span class="token operator">==</span> defaultNet<span class="token punctuation">.</span>Bech32HRPSegwit <span class="token punctuation">{</span>
			witnessVer<span class="token punctuation">,</span> witnessProg<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">decodeSegWitAddress</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>

			<span class="token comment">// We currently only support P2WPKH and P2WSH, which is</span>
			<span class="token comment">// witness version 0.</span>
			<span class="token keyword">if</span> witnessVer <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">UnsupportedWitnessVerError</span><span class="token punctuation">(</span>witnessVer<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">switch</span> <span class="token function">len</span><span class="token punctuation">(</span>witnessProg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token number">20</span><span class="token punctuation">:</span>
				<span class="token keyword">return</span> <span class="token function">newAddressWitnessPubKeyHash</span><span class="token punctuation">(</span>hrp<span class="token punctuation">,</span> witnessProg<span class="token punctuation">)</span>
			<span class="token keyword">case</span> <span class="token number">32</span><span class="token punctuation">:</span>
				<span class="token keyword">return</span> <span class="token function">newAddressWitnessScriptHash</span><span class="token punctuation">(</span>hrp<span class="token punctuation">,</span> witnessProg<span class="token punctuation">)</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">UnsupportedWitnessProgLenError</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>witnessProg<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Serialized public keys are either 65 bytes (130 hex chars) if</span>
	<span class="token comment">// uncompressed/hybrid or 33 bytes (66 hex chars) if compressed.</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">130</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">66</span> <span class="token punctuation">{</span>
		serializedPubKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token function">NewAddressPubKey</span><span class="token punctuation">(</span>serializedPubKey<span class="token punctuation">,</span> defaultNet<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Switch on decoded length to determine the type.</span>
	decoded<span class="token punctuation">,</span> netID<span class="token punctuation">,</span> err <span class="token operator">:=</span> base58<span class="token punctuation">.</span><span class="token function">CheckDecode</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> base58<span class="token punctuation">.</span>ErrChecksum <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrChecksumMismatch
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;decoded address is of unknown format&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">switch</span> <span class="token function">len</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> ripemd160<span class="token punctuation">.</span>Size<span class="token punctuation">:</span> <span class="token comment">// P2PKH or P2SH</span>
		isP2PKH <span class="token operator">:=</span> netID <span class="token operator">==</span> defaultNet<span class="token punctuation">.</span>PubKeyHashAddrID
		isP2SH <span class="token operator">:=</span> netID <span class="token operator">==</span> defaultNet<span class="token punctuation">.</span>ScriptHashAddrID
		<span class="token keyword">switch</span> hash160 <span class="token operator">:=</span> decoded<span class="token punctuation">;</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> isP2PKH <span class="token operator">&amp;&amp;</span> isP2SH<span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrAddressCollision
		<span class="token keyword">case</span> isP2PKH<span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token function">newAddressPubKeyHash</span><span class="token punctuation">(</span>hash160<span class="token punctuation">,</span> netID<span class="token punctuation">)</span>
		<span class="token keyword">case</span> isP2SH<span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token function">newAddressScriptHashFromHash</span><span class="token punctuation">(</span>hash160<span class="token punctuation">,</span> netID<span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrUnknownAddressType
		<span class="token punctuation">}</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;decoded address is of unknown size&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><p>\u603B\u5171\u6709\u56DB\u4E2D\u5730\u8D28\u7C7B\u578B:</p><h2 id="addresspubkey" tabindex="-1">AddressPubKey <a class="header-anchor" href="#addresspubkey" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressPubKey is an Address for a pay-to-pubkey transaction.</span>
<span class="token keyword">type</span> AddressPubKey <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pubKeyFormat PubKeyFormat
	pubKey       <span class="token operator">*</span>btcec<span class="token punctuation">.</span>PublicKey
	pubKeyHashID <span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="addresspubkeyhash" tabindex="-1">AddressPubKeyHash <a class="header-anchor" href="#addresspubkeyhash" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressPubKeyHash is an Address for a pay-to-pubkey-hash (P2PKH)</span>
<span class="token comment">// transaction.</span>
<span class="token keyword">type</span> AddressPubKeyHash <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	hash  <span class="token punctuation">[</span>ripemd160<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span>
	netID <span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="addressscripthash" tabindex="-1">AddressScriptHash <a class="header-anchor" href="#addressscripthash" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressScriptHash is an Address for a pay-to-script-hash (P2SH)</span>
<span class="token comment">// transaction.</span>
<span class="token keyword">type</span> AddressScriptHash <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	hash  <span class="token punctuation">[</span>ripemd160<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span>
	netID <span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="addresswitnesspubkeyhash" tabindex="-1">AddressWitnessPubKeyHash <a class="header-anchor" href="#addresswitnesspubkeyhash" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressWitnessPubKeyHash is an Address for a pay-to-witness-pubkey-hash</span>
<span class="token comment">// (P2WPKH) output. See BIP 173 for further details regarding native segregated</span>
<span class="token comment">// witness address encoding:</span>
<span class="token comment">// https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki</span>
<span class="token keyword">type</span> AddressWitnessPubKeyHash <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	hrp            <span class="token builtin">string</span>
	witnessVersion <span class="token builtin">byte</span>
	witnessProgram <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="addresswitnessscripthash" tabindex="-1">AddressWitnessScriptHash <a class="header-anchor" href="#addresswitnessscripthash" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// AddressWitnessScriptHash is an Address for a pay-to-witness-script-hash</span>
<span class="token comment">// (P2WSH) output. See BIP 173 for further details regarding native segregated</span>
<span class="token comment">// witness address encoding:</span>
<span class="token comment">// https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki</span>
<span class="token keyword">type</span> AddressWitnessScriptHash <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	hrp            <span class="token builtin">string</span>
	witnessVersion <span class="token builtin">byte</span>
	witnessProgram <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h1 id="\u5730\u5740\u7C7B\u578B\u5BF9\u5E94\u7684\u5B9E\u9645\u4E0A\u5C31\u662F\u9501\u5B9A\u811A\u672C\u7684\u7C7B\u578B" tabindex="-1">\u5730\u5740\u7C7B\u578B\u5BF9\u5E94\u7684\u5B9E\u9645\u4E0A\u5C31\u662F\u9501\u5B9A\u811A\u672C\u7684\u7C7B\u578B <a class="header-anchor" href="#\u5730\u5740\u7C7B\u578B\u5BF9\u5E94\u7684\u5B9E\u9645\u4E0A\u5C31\u662F\u9501\u5B9A\u811A\u672C\u7684\u7C7B\u578B" aria-hidden="true">#</a></h1><p>\u6BD4\u7279\u5E01\u79CD\u7684\u811A\u672C\u6267\u884C\u6D41\u7A0B\u6BD4\u8F83\u590D\u6742,\u5FC5\u987B\u6839\u636E\u811A\u672C\u7684\u5185\u5BB9\u6765\u51B3\u5B9A\u5982\u4F55\u6267\u884C. \u8FD9\u4E0E\u4EE5\u592A\u574A\u662F\u5B8C\u5168\u4E0D\u4E00\u6837\u7684,\u4EE5\u592A\u574A\u4E2D\u662F\u628A\u8F93\u5165\u73AF\u5883\u6784\u9020\u5B8C\u6BD5,\u4E0D\u5173\u5FC3\u6267\u884C\u7684code\u662F\u4EC0\u4E48.</p><h2 id="paytopubkeyhash" tabindex="-1">PayToPubKeyHash <a class="header-anchor" href="#paytopubkeyhash" aria-hidden="true">#</a></h2><div class="language-"><pre><code> OP_DUP OP_HASH160 128004ff2fcaf13b2b91eb654b1dc2b674f7ec61 OP_EQUALVERIFY OP_CHECKSIG
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>\u5224\u65AD\u662F\u5426\u662F\bPayToPubKey\u7684\u4EE3\u7801</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isPubkeyHash returns true if the script passed is a pay-to-pubkey-hash</span>
<span class="token comment">// transaction, false otherwise.</span>
<span class="token keyword">func</span> <span class="token function">isPubkeyHash</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DUP <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_HASH160 <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DATA_20 <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_EQUALVERIFY <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_CHECKSIG

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="paytopubkey" tabindex="-1">\bPayToPubKey <a class="header-anchor" href="#paytopubkey" aria-hidden="true">#</a></h2><p>\bpubkey\u662F\u538B\u7F29\u7684</p><div class="language-"><pre><code>DATA_33 0x028004ff2fcaf13b2b91eb654b1dc2b674f7ec61128004ff2fcaf13b2b91eb654a  OP_CHECKSIG
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>pubkey\u662F\u975E\u538B\u7F29\u7684</p><div class="language-"><pre><code>DATA_65 0x0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3 CHECKSIG
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isPubkey returns true if the script passed is a pay-to-pubkey transaction,</span>
<span class="token comment">// false otherwise.</span>
<span class="token keyword">func</span> <span class="token function">isPubkey</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token comment">// Valid pubkeys are either 33 or 65 bytes.</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>
		<span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">33</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_CHECKSIG
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="paytoscripthash" tabindex="-1">PayToScriptHash <a class="header-anchor" href="#paytoscripthash" aria-hidden="true">#</a></h2><div class="language-"><pre><code>HASH160 DATA_20 0xb3a84b564602a9d68b4c9f19c2ea61458ff7826c EQUAL
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isScriptHash returns true if the script passed is a pay-to-script-hash</span>
<span class="token comment">// transaction, false otherwise.</span>
<span class="token keyword">func</span> <span class="token function">isScriptHash</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_HASH160 <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DATA_20 <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_EQUAL
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="paytowitnesspubkeyhash" tabindex="-1">PayToWitnessPubKeyHash <a class="header-anchor" href="#paytowitnesspubkeyhash" aria-hidden="true">#</a></h2><p>\u4E3A\u4E86\u533A\u5206,\u5F3A\u5236\u589E\u52A0\u4E86\u4E00\u4E2A\u65E0\u7528\u7684\b\bOP_O,\u5982\u679C\u6309\u7167\u524D\u9762\u7684\u4E09\u79CD\u65B9\u5F0F\u53BB\u6267\u884C,\u5C31\u662F\u8FD9\u4E2ATx\u8F93\u51FA\u6240\u6709\u4EBA\u90FD\u53EF\u4EE5\u82B1\u8D39,\u4E0D\u9700\u8981\u63D0\u4F9B\u4EFB\u4F55\u8BC1\u660E.\u56E0\u6B64\u662F\u6240\u8C13\u7684\u8F6F\u5206\u53C9,\u63D0\u4F9B\u4E86\u5411\u4E0B\u517C\u5BB9. \u5176\u6267\u884C\u8FC7\u7A0B:</p><ol><li>\u79FB\u9664 OP_0,\u8FD9\u662F\u7248\u672C\u4FE1\u606F</li><li>\u5C06\u5269\u4E0B\u7684DATA_20 \u548C0x365ab47888e150ff46f8d51bce36dcd680f1283f \u7EC4\u88C5\u6210P2PKH <code>OP_DUP OP_HASH160 365ab47888e150ff46f8d51bce36dcd680f1283f OP_EQUALVERIFY OP_CHECKSIG</code></li><li>\u5C06Tx\u4E2D\u7684Witness\u4F9D\u6B21\u538B\u6808,\u7136\u540E\u5F00\u59CB\u6267\u884C,\u9A8C\u8BC1\u65B9\u5F0F\u5982\u540CP2PKH \u4EE3\u7801\u89C1txscript/engine.go\u7684verifyWitnessProgram</li></ol><div class="language-"><pre><code>OP_0 DATA_20 0x365ab47888e150ff46f8d51bce36dcd680f1283f
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isWitnessPubKeyHash returns true if the passed script is a</span>
<span class="token comment">// pay-to-witness-pubkey-hash, and false otherwise.</span>
<span class="token keyword">func</span> <span class="token function">isWitnessPubKeyHash</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_0 <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DATA_20
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="paytowitnessscripthash" tabindex="-1">PayToWitnessScriptHash <a class="header-anchor" href="#paytowitnessscripthash" aria-hidden="true">#</a></h2><p>\u5176\u6267\u884C\u8FC7\u7A0B\u5982\u4E0B:</p><ol><li>\u79FB\u96640,\u4F5C\u4E3A\u7248\u672C\u4FE1\u606F</li><li>\u9A8C\u8BC1Tx\u4E2DWitness\u6570\u7EC4\u7684\u6700\u540E\u4E00\u4E2A\u7684Hash\u503C\u548C0xe112b88a0cd87ba387f449d443ee2596eb353beb1f0351ab2cba8909d875db23\u662F\u5426\u76F8\u7B49</li><li>\u9A8C\u8BC1\u8FC7\u4EE5\u540E,\u5C06Witness\u6570\u7EC4\u7684\u6700\u540E\u4E00\u4E2A\u4F5C\u4E3A\u9501\u5B9A\u811A\u672C</li><li>\u5C06Witness\u5176\u4ED60\u5230n-2\u5143\u7D20\u4F5C\u4E3A\u89E3\u9501\u811A\u672C\u4F9D\u6B21\u538B\u6808</li><li>\u5982\u540CP2SH\u4E00\u6837\u6267\u884C\u9A8C\u8BC1 \u4EE3\u7801\u89C1txscript/engine.go\u7684verifyWitnessProgram</li></ol><div class="language-"><pre><code>0 DATA_32 0xe112b88a0cd87ba387f449d443ee2596eb353beb1f0351ab2cba8909d875db23
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// isWitnessScriptHash returns true if the passed script is a</span>
<span class="token comment">// pay-to-witness-script-hash transaction, false otherwise.</span>
<span class="token keyword">func</span> <span class="token function">isWitnessScriptHash</span><span class="token punctuation">(</span>pops <span class="token punctuation">[</span><span class="token punctuation">]</span>parsedOpcode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>pops<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_0 <span class="token operator">&amp;&amp;</span>
		pops<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>opcode<span class="token punctuation">.</span>value <span class="token operator">==</span> OP_DATA_32
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,42),o=[t];function c(l,r,u,i,k,b){return a(),n("div",null,o)}var h=s(e,[["render",c]]);export{m as __pageData,h as default};
