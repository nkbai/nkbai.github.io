import{_ as p,c as t,o as e,a,d as s,e as n}from"./app.dbcd9662.js";const g='{"title":"29. \u4E24\u6570\u76F8\u9664","description":"","frontmatter":{"title":"29. \u4E24\u6570\u76F8\u9664","date":"2019-08-22T19:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["\u6280\u672F\u76F8\u5173"]},"headers":[{"level":2,"title":"\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-08-23)","slug":"\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-08-23"},{"level":2,"title":"\u9898\u76EE\u63CF\u8FF0","slug":"\u9898\u76EE\u63CF\u8FF0"},{"level":2,"title":"\u89E3\u9898\u601D\u8DEF","slug":"\u89E3\u9898\u601D\u8DEF"},{"level":2,"title":"\u89E3\u9898\u8FC7\u7A0B","slug":"\u89E3\u9898\u8FC7\u7A0B"},{"level":2,"title":"\u4E00\u70B9\u611F\u609F","slug":"\u4E00\u70B9\u611F\u609F"},{"level":2,"title":"\u5176\u4ED6","slug":"\u5176\u4ED6"}],"relativePath":"rust-leetcode/2019-08-23.md"}',o={},l=a('<h2 id="\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-08-23" tabindex="-1">\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-08-23) <a class="header-anchor" href="#\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-08-23" aria-hidden="true">#</a></h2><p>\u575A\u6301\u6BCF\u5929\u4E00\u9053\u9898,\u5237\u9898\u5B66\u4E60Rust.</p><h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1">\u9898\u76EE\u63CF\u8FF0 <a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a></h2><p>\u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570\uFF0C\u88AB\u9664\u6570\xA0dividend\xA0\u548C\u9664\u6570\xA0divisor\u3002\u5C06\u4E24\u6570\u76F8\u9664\uFF0C\u8981\u6C42\u4E0D\u4F7F\u7528\u4E58\u6CD5\u3001\u9664\u6CD5\u548C mod \u8FD0\u7B97\u7B26\u3002</p><p>\u8FD4\u56DE\u88AB\u9664\u6570\xA0dividend\xA0\u9664\u4EE5\u9664\u6570\xA0divisor\xA0\u5F97\u5230\u7684\u5546\u3002</p><p>\u793A\u4F8B\xA01:</p><p>\u8F93\u5165: dividend = 10, divisor = 3 \u8F93\u51FA: 3 \u793A\u4F8B\xA02:</p><p>\u8F93\u5165: dividend = 7, divisor = -3 \u8F93\u51FA: -2 \u8BF4\u660E:</p><p>\u88AB\u9664\u6570\u548C\u9664\u6570\u5747\u4E3A 32 \u4F4D\u6709\u7B26\u53F7\u6574\u6570\u3002 \u9664\u6570\u4E0D\u4E3A\xA00\u3002 \u5047\u8BBE\u6211\u4EEC\u7684\u73AF\u5883\u53EA\u80FD\u5B58\u50A8 32 \u4F4D\u6709\u7B26\u53F7\u6574\u6570\uFF0C\u5176\u6570\u503C\u8303\u56F4\u662F [\u2212231,\xA0 231\xA0\u2212 1]\u3002\u672C\u9898\u4E2D\uFF0C\u5982\u679C\u9664\u6CD5\u7ED3\u679C\u6EA2\u51FA\uFF0C\u5219\u8FD4\u56DE 231\xA0\u2212 1\u3002</p><p>\u6765\u6E90\uFF1A\u529B\u6263\uFF08LeetCode\uFF09 \u94FE\u63A5\uFF1A<a href="https://leetcode-cn.com/problems/divide-two-integers" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/divide-two-integers</a> \u8457\u4F5C\u6743\u5F52\u9886\u6263\u7F51\u7EDC\u6240\u6709\u3002\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u8054\u7CFB\u5B98\u65B9\u6388\u6743\uFF0C\u975E\u5546\u4E1A\u8F6C\u8F7D\u8BF7\u6CE8\u660E\u51FA\u5904\u3002</p><h2 id="\u89E3\u9898\u601D\u8DEF" tabindex="-1">\u89E3\u9898\u601D\u8DEF <a class="header-anchor" href="#\u89E3\u9898\u601D\u8DEF" aria-hidden="true">#</a></h2><p>\u601D\u8DEF:</p>',12),c=s("ol",null,[s("li",null,"\u9996\u5148\u4E24\u4E2A\u6570\u90FD\u53D6\u7EDD\u5BF9\u503C,\u6BD4\u5982\u88AB\u9664\u6570\u4E3A23,\u9664\u6570\u4E3A3"),s("li",null,[n("\u9996\u5148\u4E0D\u65AD\u5BF9\u9664\u6570\u5DE6\u79FB1\u4F4D,\u76F4\u5230\u8D85\u8FC7\u88AB\u9664\u6570,\u7136\u540E\u8BB0\u4E0B\u6765\u4E34\u754C\u503C \u6BD4\u5982\u5DE6\u79FB3\u6B21\u8D85\u8FC7,\u90A3\u4E48\u5C31\u8BF4\u660E\u88AB\u9664\u6570\u5728"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"3"),s("mo",null,"\u2217"),s("msup",null,[s("mn",null,"2"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"3*2^2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),s("span",{class:"mbin"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141079999999999em","vertical-align":"0em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141079999999999em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),n("~"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"3"),s("mo",null,"\u2217"),s("msup",null,[s("mn",null,"2"),s("mn",null,"3")])]),s("annotation",{encoding:"application/x-tex"},"3*2^3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),s("span",{class:"mbin"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141079999999999em","vertical-align":"0em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141079999999999em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])])])])])])])])]),n("\u4E4B\u95F4")]),s("li",null,[n("\u7136\u540E\u51CF\u53BB"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"3"),s("mo",null,"\u2217"),s("msup",null,[s("mn",null,"2"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"3*2^2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),s("span",{class:"mbin"},"\u2217"),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141079999999999em","vertical-align":"0em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141079999999999em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),n(",\u7EE7\u7EED\u5904\u7406,\u77E5\u9053\u88AB\u9664\u6570\u5C0F\u4E8E\u9664\u6570\u4E3A\u6B62")])],-1),i=a(`<h2 id="\u89E3\u9898\u8FC7\u7A0B" tabindex="-1">\u89E3\u9898\u8FC7\u7A0B <a class="header-anchor" href="#\u89E3\u9898\u8FC7\u7A0B" aria-hidden="true">#</a></h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Solution</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span>dividend<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> divisor<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> isNeg <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> dividend <span class="token operator">^</span> divisor <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            isNeg <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//\u7B26\u53F7\u76F8\u53CD</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> dividend <span class="token operator">=</span> <span class="token keyword">if</span> dividend <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token number">0</span> <span class="token operator">-</span> dividend <span class="token keyword">as</span> <span class="token keyword">i64</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dividend <span class="token keyword">as</span> <span class="token keyword">i64</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> divisor <span class="token operator">=</span> <span class="token keyword">if</span> divisor <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token number">0</span> <span class="token operator">-</span> divisor <span class="token keyword">as</span> <span class="token keyword">i64</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            divisor <span class="token keyword">as</span> <span class="token keyword">i64</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token keyword">if</span> divisor <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            dividend <span class="token keyword">as</span> <span class="token keyword">i64</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide_internal</span><span class="token punctuation">(</span>dividend <span class="token keyword">as</span> <span class="token keyword">i64</span><span class="token punctuation">,</span> divisor <span class="token keyword">as</span> <span class="token keyword">i64</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> cnt <span class="token operator">&gt;=</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span> <span class="token keyword">as</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> isNeg <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MIN</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> isNeg <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">-</span> cnt<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> cnt <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">divide_internal</span><span class="token punctuation">(</span>dividend<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">,</span> divisor<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
        <span class="token comment">//\u5C0F\u4E8E\u88AB\u9664\u6570,\u5C31\u8FD4\u56DE</span>
        <span class="token keyword">if</span> dividend <span class="token operator">&lt;</span> divisor <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> c <span class="token operator">=</span> divisor<span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">loop</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> c <span class="token operator">&gt;=</span> dividend <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            last <span class="token operator">=</span> c<span class="token punctuation">;</span>
            c <span class="token operator">=</span> c <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//\u6BCF\u6B21\u5DE6\u79FB1</span>
            cnt <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// \u5DE6\u79FB\u4E00\u6B21\u5C31\u662F\u4E24\u500D</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//c--dividend--last</span>
        <span class="token keyword">let</span> left <span class="token operator">=</span> c <span class="token operator">-</span> dividend<span class="token punctuation">;</span>
        <span class="token keyword">let</span> right <span class="token operator">=</span> dividend <span class="token operator">-</span> last<span class="token punctuation">;</span>
        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token comment">//\u4E0D\u53EF\u80FD\u7B49\u4E8E\u53F3\u8FB9\u7684</span>
            <span class="token keyword">return</span> cnt<span class="token punctuation">;</span> <span class="token comment">//\u521A\u597D\u7B49\u4E8E\u5DE6\u8FB9,</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> div <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide_internal</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cnt <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> div<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">test_divide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2147483647</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">1021989372</span><span class="token punctuation">,</span> <span class="token number">82778243</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">302462516</span><span class="token punctuation">,</span> <span class="token number">82778243</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><h2 id="\u4E00\u70B9\u611F\u609F" tabindex="-1">\u4E00\u70B9\u611F\u609F <a class="header-anchor" href="#\u4E00\u70B9\u611F\u609F" aria-hidden="true">#</a></h2><p>\u8D8A\u7B80\u5355\u8D8A\u597D, \u4E00\u5F00\u59CB\u8003\u8651\u9664\u6570\u5DE6\u79FB\u8D85\u8FC7\u88AB\u9664\u6570\u4EE5\u540E,\u5DE6\u53F3\u4E24\u8FB9\u9009\u4E00\u4E2A\u5C0F\u7684\u6765\u5904\u7406,\u53D1\u73B0\u4EBA\u4E3A\u5236\u9020\u9EBB\u70E6.</p><h2 id="\u5176\u4ED6" tabindex="-1">\u5176\u4ED6 <a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a></h2><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u7684<a href="https://github.com/nkbai" target="_blank" rel="noopener noreferrer">github</a>,\u672C\u9879\u76EE\u6587\u7AE0\u6240\u6709\u4EE3\u7801\u90FD\u53EF\u4EE5\u627E\u5230.</p>`,6),r=[l,c,i];function u(k,m,d,b,h,y){return e(),t("div",null,r)}var v=p(o,[["render",u]]);export{g as __pageData,v as default};
