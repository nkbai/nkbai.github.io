import{_ as e,c as s,o as a,N as c}from"./chunks/framework.3a9190c5.js";const b=JSON.parse('{"title":"sql注入之GBK编码","description":"","frontmatter":{"title":"sql注入之GBK编码","date":"2022-01-05T01:57:03.000Z","draft":false,"tags":["security","web"],"categories":["技术相关"]},"headers":[],"relativePath":"web-security/sql_inject_chinese_gbk.md"}'),t={name:"web-security/sql_inject_chinese_gbk.md"},n=c(`<h1 id="sql注入之gbk编码" tabindex="-1">sql注入之GBK编码 <a class="header-anchor" href="#sql注入之gbk编码" aria-label="Permalink to &quot;sql注入之GBK编码&quot;">​</a></h1><p>今天说一种绕过sql注入的手段就是gbk编码绕过。 比如下面的sql语句。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">select * from users where username=&#39;$user_input&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其中$user_input来自用户输入,这里显然存在sql注入问题,只要输入<code>a &#39; or 1=&#39;1</code>. 就可以绕过,所以要对用户输入进行编码. 一般你来说就是一个escape函数,将<code>&#39;</code>替换为<code>\\&#39;</code>.</p><p>我们知道&#39;会被替换为&#39;,那么就可以针对性的绕过. 具体来说就是GBK编码.</p><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>\\对应的ascii码是0x5c,那么我们可以利用上述替换机制,将一个无效的字符和0x5c组成一个有效的GBK汉字即可. 比如最后的<code>1=&#39;1</code>替换为<code>1=\\xC4&#39;1</code>, 这样替换后就成了<code>1=\\xC4\\X5C&#39;1</code> 而<code>\\xC4\\X5C</code>会被mysql识别为汉字<code>腬</code>,从而达到绕过的目的.</p><p>按照这个思路,找寻响应的汉字,就可以形成一个有效,并且闭合&#39;的sql语句.</p>`,8),o=[n];function l(r,i,d,p,_,u){return a(),s("div",null,o)}const m=e(t,[["render",l]]);export{b as __pageData,m as default};
