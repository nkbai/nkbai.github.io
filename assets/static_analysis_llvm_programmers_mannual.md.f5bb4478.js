import{_ as n,c as s,o as a,a as p}from"./app.3dd4ae37.js";const d='{"title":"llvm \u4E8C\u6B21\u5F00\u53D1\u57FA\u7840\u77E5\u8BC6","description":"","frontmatter":{"title":"llvm \u4E8C\u6B21\u5F00\u53D1\u57FA\u7840\u77E5\u8BC6","date":"2023-03-23T03:57:03.000Z","draft":false,"tags":["\u9759\u6001\u5206\u6790\\"","llvm"],"series":["\u9759\u6001\u5206\u6790"],"categories":["\u6280\u672F\u76F8\u5173"]},"headers":[{"level":2,"title":"\u6838\u5FC3api","slug":"\u6838\u5FC3api"},{"level":3,"title":"isa,cast,dyn_cast","slug":"isa-cast-dyn-cast"},{"level":3,"title":"\u5B57\u7B26\u4E32\u5904\u7406","slug":"\u5B57\u7B26\u4E32\u5904\u7406"},{"level":3,"title":"\u7ED3\u6784\u4F53\u7684\u683C\u5F0F\u5316","slug":"\u7ED3\u6784\u4F53\u7684\u683C\u5F0F\u5316"},{"level":2,"title":"\u9519\u8BEF\u5904\u7406","slug":"\u9519\u8BEF\u5904\u7406"},{"level":2,"title":"\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570","slug":"\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570"},{"level":2,"title":"LLVM_DEBUG \u4F7F\u7528","slug":"llvm-debug-\u4F7F\u7528"},{"level":3,"title":"\u51FD\u6570\u7684\u56FE\u5F62\u5316\u5C55\u793A","slug":"\u51FD\u6570\u7684\u56FE\u5F62\u5316\u5C55\u793A"},{"level":2,"title":"\u6838\u5FC3\u6570\u636E\u7C7B\u578B","slug":"\u6838\u5FC3\u6570\u636E\u7C7B\u578B"},{"level":3,"title":"Set\u7C7B","slug":"set\u7C7B"},{"level":3,"title":"Map\u7C7B","slug":"map\u7C7B"},{"level":3,"title":"Bit \u7C7B","slug":"bit-\u7C7B"},{"level":2,"title":"\u8C03\u8BD5\u6280\u672F","slug":"\u8C03\u8BD5\u6280\u672F"},{"level":2,"title":"LLVM\u4E2D\u5E38\u7528\u7684\u64CD\u4F5C","slug":"llvm\u4E2D\u5E38\u7528\u7684\u64CD\u4F5C"},{"level":3,"title":"\u904D\u5386\u51FD\u6570","slug":"\u904D\u5386\u51FD\u6570"}],"relativePath":"static_analysis/llvm_programmers_mannual.md"}',t={},e=p(`<p>\u5982\u679C\u8981\u5BF9llvm\u8FDB\u884C\u4E8C\u6B21\u5F00\u53D1,\u9700\u8981\u719F\u6089\u4ED6\u57FA\u672C\u7684\u6570\u636E\u7ED3\u6784, \u5185\u5BB9\u4E3B\u8981\u6765\u81EA<a href="https://llvm.org/docs/ProgrammersManual.html" target="_blank" rel="noopener noreferrer">LLVM Programmer\u2019s Manual \u2014 LLVM 17.0.0git documentation</a>.</p><h2 id="\u6838\u5FC3api" tabindex="-1">\u6838\u5FC3api <a class="header-anchor" href="#\u6838\u5FC3api" aria-hidden="true">#</a></h2><h3 id="isa-cast-dyn-cast" tabindex="-1">isa,cast,dyn_cast <a class="header-anchor" href="#isa-cast-dyn-cast" aria-hidden="true">#</a></h3><p>cpp\u7F16\u7A0B\u4E2D\u7684\u5E38\u89C1\u64CD\u4F5C,\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\u5E38\u89C1\u7684\u6982\u5FF5.</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">isLoopInvariant</span><span class="token punctuation">(</span><span class="token keyword">const</span> Value <span class="token operator">*</span>V<span class="token punctuation">,</span> <span class="token keyword">const</span> Loop <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">isa</span><span class="token generic class-name"><span class="token operator">&lt;</span>Constant<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token generic-function"><span class="token function">isa</span><span class="token generic class-name"><span class="token operator">&lt;</span>Argument<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token generic-function"><span class="token function">isa</span><span class="token generic class-name"><span class="token operator">&lt;</span>GlobalValue<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token comment">// Otherwise, it must be an instruction...</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>L<span class="token operator">-&gt;</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Instruction<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">*</span>AI <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dyn_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AllocationInst<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>isa_and_nonnull \u548Cisa\u4E00\u6837,\u4E0D\u8FC7\u4F20\u5165null\u7684\u65F6\u5019,\u8FD4\u56DEfalse</li><li>cast_or_null \u548Ccast\u4E00\u6837,\u53EF\u4EE5\u5904\u7406null</li><li>dyn_cast_or_null \u548Cdyn_cast\u4E00\u6837,\u53EF\u4EE5\u5904\u7406null</li></ul><h3 id="\u5B57\u7B26\u4E32\u5904\u7406" tabindex="-1">\u5B57\u7B26\u4E32\u5904\u7406 <a class="header-anchor" href="#\u5B57\u7B26\u4E32\u5904\u7406" aria-hidden="true">#</a></h3><p>\u5F53\u9700\u8981\u5904\u7406\u542B\u6709null\u7684\u5B57\u7B26\u4E32\u65F6,\u9700\u8981\u7528\u5230StringRef\u6216Twine, \u4E0D\u80FD\u7528const char*\u662F\u56E0\u4E3Anull,\u4E0D\u80FD\u7528<code>std::string&amp;</code>\u662F\u56E0\u4E3A\u9700\u8981\u5206\u914D\u5185\u5B58.</p><ul><li>StringRef \u8868\u793A\u5BF9\u4E00\u4E2A\u5B57\u7B26\u4E32<strong>\u7684\u53EA\u8BFB\u5F15\u7528</strong>,\u5E76\u4E14\u63D0\u4F9B\u4E86\u5E38\u89C1\u7684std::string\u4E0A\u9762\u7684\u64CD\u4F5C.</li><li>Twine \u4E13\u95E8\u4E3A\u4E86\u5904\u7406\u5B57\u7B26\u4E32\u62FC\u63A5\u800C\u5B58\u5728, \u5EF6\u8FDF\u62FC\u63A5\u4EE5\u907F\u514D\u5185\u5B58\u5206\u914D.</li></ul><h3 id="\u7ED3\u6784\u4F53\u7684\u683C\u5F0F\u5316" tabindex="-1">\u7ED3\u6784\u4F53\u7684\u683C\u5F0F\u5316 <a class="header-anchor" href="#\u7ED3\u6784\u4F53\u7684\u683C\u5F0F\u5316" aria-hidden="true">#</a></h3><p>formatv \u4E13\u7528\u4E8E\u5B57\u7B26\u4E32\u683C\u5F0F\u5316\u7684, printf\u7684\u66FF\u4EE3,\u65B9\u4FBF\u6613\u7528,\u501F\u9274\u4E86python,c#\u7684\u683C\u5F0F\u5316\u5B57\u7B26\u4E32.</p><p>\u6837\u5F0F:<code>{N[[,align]:style]}</code></p><h4 id="\u81EA\u5B9A\u4E49\u683C\u5F0F\u5316" tabindex="-1">\u81EA\u5B9A\u4E49\u683C\u5F0F\u5316 <a class="header-anchor" href="#\u81EA\u5B9A\u4E49\u683C\u5F0F\u5316" aria-hidden="true">#</a></h4><ol><li><p>\u63D0\u4F9Bformat_provider\u7684\u7279\u4F8B</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">namespace</span> llvm <span class="token punctuation">{</span>
  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span>
  <span class="token keyword">struct</span> <span class="token class-name">format_provider</span><span class="token operator">&lt;</span>MyFooBar<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyFooBar <span class="token operator">&amp;</span>V<span class="token punctuation">,</span> raw_ostream <span class="token operator">&amp;</span>Stream<span class="token punctuation">,</span> StringRef Style<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Do whatever is necessary to format \`V\` into \`Stream\`</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MyFooBar X<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>\u7EE7\u627F<code>llvm:FormatAdapter</code>, formatv\u68C0\u6D4B\u5230T\u7EE7\u627F\u81EAllvm:FormatAdapter\u65F6,\u4F1A\u8C03\u7528\u5B83\u7684format\u8FDB\u884C\u5904\u7406.</p></li></ol><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">namespace</span> anything <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">format_int_custom</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> llvm<span class="token double-colon punctuation">::</span><span class="token class-name">FormatAdapter</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">explicit</span> <span class="token function">format_int_custom</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token operator">:</span> llvm<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">FormatAdapter</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">format</span><span class="token punctuation">(</span>llvm<span class="token double-colon punctuation">::</span>raw_ostream <span class="token operator">&amp;</span>Stream<span class="token punctuation">,</span> StringRef Style<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
      <span class="token comment">// Do whatever is necessary to format \`\`this-&gt;Item\`\` into \`\`Stream\`\`</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">namespace</span> llvm <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> anything<span class="token double-colon punctuation">::</span><span class="token function">format_int_custom</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-cpp line-numbers-mode"><pre><code>std<span class="token double-colon punctuation">::</span>string S<span class="token punctuation">;</span>
<span class="token comment">// Simple formatting of basic types and implicit string conversion.</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0} ({1:P})&quot;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0.35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// S == &quot;7 (35.00%)&quot;</span>

<span class="token comment">// Out-of-order referencing and multi-referencing</span>
<span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0} {2} {1} {0}&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints &quot;1 3 test 1&quot;</span>

<span class="token comment">// Left, right, and center alignment</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0,7}&quot;</span><span class="token punctuation">,</span>  <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// S == &quot;      a&quot;;</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0,-7}&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// S == &quot;a      &quot;;</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0,=7}&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// S == &quot;   a   &quot;;</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0,+7}&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// S == &quot;      a&quot;;</span>

<span class="token comment">// Custom styles</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0:N} - {0:x} - {1:E}&quot;</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">,</span> <span class="token number">123908342</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// S == &quot;12,345 - 0x3039 - 1.24E8&quot;</span>

<span class="token comment">// Adapters</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> <span class="token function">fmt_align</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> AlignStyle<span class="token double-colon punctuation">::</span>Center<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// S == &quot;  42   &quot;</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> <span class="token function">fmt_repeat</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// S == &quot;hihihi&quot;</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> <span class="token function">fmt_pad</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// S == &quot;  hi      &quot;</span>

<span class="token comment">// Ranges</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> V <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0}&quot;</span><span class="token punctuation">,</span> <span class="token function">make_range</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// S == &quot;8, 9, 10&quot;</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0:$[+]}&quot;</span><span class="token punctuation">,</span> <span class="token function">make_range</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// S == &quot;8+9+10&quot;</span>
S <span class="token operator">=</span> <span class="token function">formatv</span><span class="token punctuation">(</span><span class="token string">&quot;{0:$[ + ]@[x]}&quot;</span><span class="token punctuation">,</span> <span class="token function">make_range</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// S == &quot;0x8 + 0x9 + 0xA&quot;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="\u9519\u8BEF\u5904\u7406" tabindex="-1">\u9519\u8BEF\u5904\u7406 <a class="header-anchor" href="#\u9519\u8BEF\u5904\u7406" aria-hidden="true">#</a></h2><div class="language-cpp line-numbers-mode"><pre><code><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isPhysReg</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;All virt regs should have been allocated already.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">llvm_unreachable</span><span class="token punctuation">(</span><span class="token string">&quot;X should be Foo or Bar here&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Error \u7C7B\u578B
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-cpp line-numbers-mode"><pre><code><span class="token comment">//\u81EA\u5B9A\u4E49\u7684\u9519\u8BEF\u7C7B\u578B</span>
<span class="token keyword">class</span> <span class="token class-name">BadFileFormat</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ErrorInfo</span><span class="token operator">&lt;</span><span class="token class-name">BadFileFormat</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">static</span> <span class="token keyword">char</span> ID<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string Path<span class="token punctuation">;</span>

  <span class="token function">BadFileFormat</span><span class="token punctuation">(</span>StringRef Path<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Path</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>raw_ostream <span class="token operator">&amp;</span>OS<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    OS <span class="token operator">&lt;&lt;</span> Path <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; is malformed&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  std<span class="token double-colon punctuation">::</span>error_code <span class="token function">convertToErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">make_error_code</span><span class="token punctuation">(</span>object_error<span class="token double-colon punctuation">::</span>parse_failed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> BadFileFormat<span class="token double-colon punctuation">::</span>ID<span class="token punctuation">;</span> <span class="token comment">// This should be declared in the C++ file.</span>

Error <span class="token function">printFormattedFile</span><span class="token punctuation">(</span>StringRef Path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>check <span class="token keyword">for</span> valid format<span class="token operator">&gt;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">make_error</span><span class="token generic class-name"><span class="token operator">&lt;</span>BadFileFormat<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u8FD4\u56DE\u7279\u5B9A\u7684\u9519\u8BEF\u7C7B\u578B,\u8FD9\u91CC\u7684BadFileFormat\u5FC5\u987B\u7EE7\u627FErrorInfo</span>
  <span class="token comment">// print file contents.</span>
  <span class="token keyword">return</span> <span class="token class-name">Error</span><span class="token double-colon punctuation">::</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u5982\u4F55\u4F7F\u7528<code>Error. Expected&lt;T&gt; </code>\u53EF\u4EE5\u9690\u5F62\u7684\u8F6C\u6362\u4E3Abool</p><div class="language-cpp line-numbers-mode"><pre><code>Expected<span class="token operator">&lt;</span>FormattedFile<span class="token operator">&gt;</span> <span class="token function">openFormattedFile</span><span class="token punctuation">(</span>StringRef Path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// If badly formatted, return an error.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> Err <span class="token operator">=</span> <span class="token function">checkFormat</span><span class="token punctuation">(</span>Path<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>Err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Otherwise return a FormattedFile instance.</span>
  <span class="token keyword">return</span> <span class="token function">FormattedFile</span><span class="token punctuation">(</span>Path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Error <span class="token function">processFormattedFile</span><span class="token punctuation">(</span>StringRef Path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Try to open a formatted file</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> FileOrErr <span class="token operator">=</span> <span class="token function">openFormattedFile</span><span class="token punctuation">(</span>Path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//error \u5E94\u8BE5\u662F\u91CD\u8F7D\u4E86bool\u5224\u65AD\u64CD\u4F5C\u7B26,c++\u5751\u771F\u591A.</span>
    <span class="token comment">// On success, grab a reference to the file and continue.</span>
    <span class="token keyword">auto</span> <span class="token operator">&amp;</span>File <span class="token operator">=</span> <span class="token operator">*</span>FileOrErr<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span>
    <span class="token comment">// On error, extract the Error value and return it.</span>
    <span class="token keyword">return</span> FileOrErr<span class="token punctuation">.</span><span class="token function">takeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>\u7B80\u5355\u7684\u9519\u8BEF:</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token comment">// These two lines of code are equivalent:</span>
<span class="token generic-function"><span class="token function">make_error</span><span class="token generic class-name"><span class="token operator">&lt;</span>StringError<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Bad executable&quot;</span><span class="token punctuation">,</span> errc<span class="token double-colon punctuation">::</span>executable_format_error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">createStringError</span><span class="token punctuation">(</span>errc<span class="token double-colon punctuation">::</span>executable_format_error<span class="token punctuation">,</span> <span class="token string">&quot;Bad executable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u53EF\u4EE5\u52A8\u6001\u5224\u65ADerror\u7C7B\u578B</p><div class="language-cpp line-numbers-mode"><pre><code>   
<span class="token keyword">auto</span> ChildOrErr <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">getMember</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> Err <span class="token operator">=</span> ChildOrErr<span class="token punctuation">.</span><span class="token function">takeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Err<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">isA</span><span class="token generic class-name"><span class="token operator">&lt;</span>BadFileFormat<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">consumeError</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>Err<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u62FC\u63A5error:<code>DeferredErrs = joinErrors(std::move(DeferredErrs), std::move(Err));</code></p><h2 id="\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570" tabindex="-1">\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570 <a class="header-anchor" href="#\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570" aria-hidden="true">#</a></h2><ol><li>\u539F\u59CB\u7684:</li></ol><p><code>void takeCallback(bool (*Callback)(Function *, void *), void *Cookie);</code></p><ol start="2"><li>\u51FD\u6570\u6A21\u677F</li></ol><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Callable</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">takeCallback</span><span class="token punctuation">(</span>Callable Callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Callback</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>function_ref <code>function_ref&lt;Ret(Param1, Param2, ...)&gt;</code> \u6709\u4E00\u4E2A\u5BF9Callable\u7684\u9690\u5F0F\u8F6C\u6362, c++\u4E3A\u4E86\u652F\u6301\u65B0\u7279\u6027,\u8FD8\u517C\u5BB9\u8001\u8BED\u6CD5,\u6240\u4EE5\u8D8A\u6765\u8D8A\u590D\u6742,\u5C31\u50CFx86\u6307\u4EE4\u96C6</li></ol><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">void</span> <span class="token function">visitBasicBlocks</span><span class="token punctuation">(</span>Function <span class="token operator">*</span>F<span class="token punctuation">,</span> function_ref<span class="token operator">&lt;</span><span class="token keyword">bool</span> <span class="token punctuation">(</span>BasicBlock<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> Callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>BasicBlock <span class="token operator">&amp;</span>BB <span class="token operator">:</span> <span class="token operator">*</span>F<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Callback</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>BB<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="llvm-debug-\u4F7F\u7528" tabindex="-1">LLVM_DEBUG \u4F7F\u7528 <a class="header-anchor" href="#llvm-debug-\u4F7F\u7528" aria-hidden="true">#</a></h2><p>\u914D\u5408-debug\u9009\u9879,<code>llvm/Support/Debug.h</code></p><div class="language-"><pre><code>LLVM_DEBUG(dbgs() &lt;&lt; &quot;I am here!\\n&quot;);
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-"><pre><code>$ opt &lt; a.bc &gt; /dev/null -mypass
&lt;no output&gt;
$ opt &lt; a.bc &gt; /dev/null -mypass -debug
I am here!
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u8FD8\u652F\u6301\u66F4\u7EC6\u8282\u7684<code>DEBUG_TYPE</code></p><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEBUG_TYPE</span> <span class="token string">&quot;foo&quot;</span> <span class="token comment">//\u6CE8\u610F\u6838\u5FC3\u662F\u8FD9\u91CC\u7684\u5B8F\u7684\u5B9A\u4E49,\u800C\u4E0D\u662F\u4E0B\u9762\u7684foo\u5B57\u7B26\u4E32</span></span>
<span class="token function">LLVM_DEBUG</span><span class="token punctuation">(</span><span class="token function">dbgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39;foo&#39; debug type\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span>  <span class="token expression">DEBUG_TYPE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEBUG_TYPE</span> <span class="token string">&quot;bar&quot;</span></span>
<span class="token function">LLVM_DEBUG</span><span class="token punctuation">(</span><span class="token function">dbgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39;bar&#39; debug type\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span>  <span class="token expression">DEBUG_TYPE</span></span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-"><pre><code>$ opt &lt; a.bc &gt; /dev/null -mypass
&lt;no output&gt;
$ opt &lt; a.bc &gt; /dev/null -mypass -debug
&#39;foo&#39; debug type
&#39;bar&#39; debug type
$ opt &lt; a.bc &gt; /dev/null -mypass -debug-only=foo
&#39;foo&#39; debug type
$ opt &lt; a.bc &gt; /dev/null -mypass -debug-only=bar
&#39;bar&#39; debug type
$ opt &lt; a.bc &gt; /dev/null -mypass -debug-only=foo,bar
&#39;foo&#39; debug type
&#39;bar&#39; debug type
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="\u51FD\u6570\u7684\u56FE\u5F62\u5316\u5C55\u793A" tabindex="-1">\u51FD\u6570\u7684\u56FE\u5F62\u5316\u5C55\u793A <a class="header-anchor" href="#\u51FD\u6570\u7684\u56FE\u5F62\u5316\u5C55\u793A" aria-hidden="true">#</a></h3><p><code>Function::viewCFG()</code></p><h2 id="\u6838\u5FC3\u6570\u636E\u7C7B\u578B" tabindex="-1">\u6838\u5FC3\u6570\u636E\u7C7B\u578B <a class="header-anchor" href="#\u6838\u5FC3\u6570\u636E\u7C7B\u578B" aria-hidden="true">#</a></h2><p>\u4F4D\u4E8E<code>llvm/ADT/</code>\u4E0B,\u4E00\u822C\u7528STL\u5373\u53EF,</p><ol><li><p>llvm::ArrayRef</p></li><li><p><code>TinyPtrVector&lt;Type&gt;</code> \u4E3A\u53EA\u6709\u4E00\u4E2A\u6216\u80050\u4E2A\u5143\u7D20\u7684vector\u7684\u4F18\u5316\u7248\u672C</p></li><li><p><code>SmallVector&lt;Type, N&gt;</code> \u6709\u56FA\u5B9A\u5927\u5C0F\u7684vector,\u5728\u6808\u4E0A\u5206\u914D,\u65E0\u9700malloc,\u662Falloca\u7684\u6709\u6548\u66FF\u4EE3\u7248\u672C</p><p>\u4E00\u4E9B\u793A\u4F8B</p></li></ol><div class="language-cpp line-numbers-mode"><pre><code><span class="token comment">// DISCOURAGED: Clients cannot pass e.g. raw arrays.</span>
<span class="token function">hardcodedContiguousStorage</span><span class="token punctuation">(</span><span class="token keyword">const</span> SmallVectorImpl<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>In<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ENCOURAGED: Clients can pass any contiguous storage of Foo.</span>
<span class="token function">allowsAnyContiguousStorage</span><span class="token punctuation">(</span>ArrayRef<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> In<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">someFunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Foo Vec<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">hardcodedContiguousStorage</span><span class="token punctuation">(</span>Vec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error.</span>
  <span class="token function">allowsAnyContiguousStorage</span><span class="token punctuation">(</span>Vec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works.</span>
<span class="token punctuation">}</span>

<span class="token comment">// DISCOURAGED: Clients cannot pass e.g. SmallVector&lt;Foo, 8&gt;.</span>
<span class="token function">hardcodedSmallSize</span><span class="token punctuation">(</span>SmallVector<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>Out<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ENCOURAGED: Clients can pass any SmallVector&lt;Foo, N&gt;.</span>
<span class="token function">allowsAnySmallSize</span><span class="token punctuation">(</span>SmallVectorImpl<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>Out<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">someFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  SmallVector<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">&gt;</span> Vec<span class="token punctuation">;</span>
  <span class="token function">hardcodedSmallSize</span><span class="token punctuation">(</span>Vec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error.</span>
  <span class="token function">allowsAnySmallSize</span><span class="token punctuation">(</span>Vec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Works.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="set\u7C7B" tabindex="-1">Set\u7C7B <a class="header-anchor" href="#set\u7C7B" aria-hidden="true">#</a></h3><p>\u672C\u8D28\u662F\u4E00\u4E2A\u6709\u5E8F\u7684vector</p><ul><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#a-sorted-vector" target="_blank" rel="noopener noreferrer">A sorted \u2018vector\u2019</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallset-h" target="_blank" rel="noopener noreferrer">llvm/ADT/SmallSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallptrset-h" target="_blank" rel="noopener noreferrer">llvm/ADT/SmallPtrSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-stringset-h" target="_blank" rel="noopener noreferrer">llvm/ADT/StringSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-denseset-h" target="_blank" rel="noopener noreferrer">llvm/ADT/DenseSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-sparseset-h" target="_blank" rel="noopener noreferrer">llvm/ADT/SparseSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-sparsemultiset-h" target="_blank" rel="noopener noreferrer">llvm/ADT/SparseMultiSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-foldingset-h" target="_blank" rel="noopener noreferrer">llvm/ADT/FoldingSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#set" target="_blank" rel="noopener noreferrer"></a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-setvector-h" target="_blank" rel="noopener noreferrer">llvm/ADT/SetVector.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-uniquevector-h" target="_blank" rel="noopener noreferrer">llvm/ADT/UniqueVector.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-immutableset-h" target="_blank" rel="noopener noreferrer">llvm/ADT/ImmutableSet.h</a></p></li><li><p><a href="https://llvm.org/docs/ProgrammersManual.html#other-set-like-container-options" target="_blank" rel="noopener noreferrer">Other Set-Like Container Options</a></p></li><li></li></ul><h3 id="map\u7C7B" tabindex="-1">Map\u7C7B <a class="header-anchor" href="#map\u7C7B" aria-hidden="true">#</a></h3><ul><li><a href="https://llvm.org/docs/ProgrammersManual.html#dss-sortedvectormap" target="_blank" rel="noopener noreferrer">A sorted \u2018vector\u2019</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-stringmap-h" target="_blank" rel="noopener noreferrer">llvm/ADT/StringMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-indexedmap-h" target="_blank" rel="noopener noreferrer">llvm/ADT/IndexedMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-densemap-h" target="_blank" rel="noopener noreferrer">llvm/ADT/DenseMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-ir-valuemap-h" target="_blank" rel="noopener noreferrer">llvm/IR/ValueMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-intervalmap-h" target="_blank" rel="noopener noreferrer">llvm/ADT/IntervalMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-intervaltree-h" target="_blank" rel="noopener noreferrer">llvm/ADT/IntervalTree.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#map" target="_blank" rel="noopener noreferrer"><strong>Map</strong></a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-mapvector-h" target="_blank" rel="noopener noreferrer">llvm/ADT/MapVector.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-inteqclasses-h" target="_blank" rel="noopener noreferrer">llvm/ADT/IntEqClasses.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#llvm-adt-immutablemap-h" target="_blank" rel="noopener noreferrer">llvm/ADT/ImmutableMap.h</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#other-map-like-container-options" target="_blank" rel="noopener noreferrer">Other Map-Like Container Options</a></li></ul><h3 id="bit-\u7C7B" tabindex="-1">Bit \u7C7B <a class="header-anchor" href="#bit-\u7C7B" aria-hidden="true">#</a></h3><ul><li><a href="https://llvm.org/docs/ProgrammersManual.html#bitvector" target="_blank" rel="noopener noreferrer">BitVector</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#smallbitvector" target="_blank" rel="noopener noreferrer">SmallBitVector</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#sparsebitvector" target="_blank" rel="noopener noreferrer">SparseBitVector</a></li><li><a href="https://llvm.org/docs/ProgrammersManual.html#coalescingbitvector" target="_blank" rel="noopener noreferrer">CoalescingBitVector</a></li></ul><h2 id="\u8C03\u8BD5\u6280\u672F" tabindex="-1">\u8C03\u8BD5\u6280\u672F <a class="header-anchor" href="#\u8C03\u8BD5\u6280\u672F" aria-hidden="true">#</a></h2><div class="language-"><pre><code>source /path/to/llvm/src/utils/gdb-scripts/prettyprinters.py
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>\u8BA9print\u66F4\u53CB\u597D</p><h2 id="llvm\u4E2D\u5E38\u7528\u7684\u64CD\u4F5C" tabindex="-1">LLVM\u4E2D\u5E38\u7528\u7684\u64CD\u4F5C <a class="header-anchor" href="#llvm\u4E2D\u5E38\u7528\u7684\u64CD\u4F5C" aria-hidden="true">#</a></h2><h3 id="\u904D\u5386\u51FD\u6570" tabindex="-1">\u904D\u5386\u51FD\u6570 <a class="header-anchor" href="#\u904D\u5386\u51FD\u6570" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><pre><code>Function <span class="token operator">&amp;</span>Func <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>BasicBlock <span class="token operator">&amp;</span>BB <span class="token operator">:</span> Func<span class="token punctuation">)</span>
  <span class="token comment">// Print out the name of the basic block if it has one, and then the</span>
  <span class="token comment">// number of instructions that it contains</span>
  <span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Basic block (name=&quot;</span> <span class="token operator">&lt;&lt;</span> BB<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;) has &quot;</span>
             <span class="token operator">&lt;&lt;</span> BB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; instructions.\\n&quot;</span><span class="token punctuation">;</span>

BasicBlock<span class="token operator">&amp;</span> BB <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>Instruction <span class="token operator">&amp;</span>I <span class="token operator">:</span> BB<span class="token punctuation">)</span>
   <span class="token comment">// The next statement works since operator&lt;&lt;(ostream&amp;,...)</span>
   <span class="token comment">// is overloaded for Instruction&amp;</span>
   <span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> I <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u4E5F\u53EF\u4EE5\u662F\u5916\u90E8\u7684iterator:</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/IR/InstIterator.h&quot;</span></span>

<span class="token comment">// F is a pointer to a Function instance</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>inst_iterator I <span class="token operator">=</span> <span class="token function">inst_begin</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">,</span> E <span class="token operator">=</span> <span class="token function">inst_end</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">;</span> I <span class="token operator">!=</span> E<span class="token punctuation">;</span> <span class="token operator">++</span>I<span class="token punctuation">)</span>
  <span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>I <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u53E6\u4E00\u4E2A\u7EDF\u8BA1function\u8C03\u7528\u7684\u4F8B\u5B50:</p><div class="language-cpp line-numbers-mode"><pre><code>Function<span class="token operator">*</span> targetFunc <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">OurFunctionPass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FunctionPass</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">OurFunctionPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">callCounter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">virtual</span> <span class="token function">runOnFunction</span><span class="token punctuation">(</span>Function<span class="token operator">&amp;</span> F<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>BasicBlock <span class="token operator">&amp;</span>B <span class="token operator">:</span> F<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Instruction <span class="token operator">&amp;</span>I<span class="token operator">:</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">*</span>CB <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dyn_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>CallBase<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>I<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// We know we&#39;ve encountered some kind of call instruction (call,</span>
            <span class="token comment">// invoke, or callbr), so we need to determine if it&#39;s a call to</span>
            <span class="token comment">// the function pointed to by m_func or not.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>CB<span class="token operator">-&gt;</span><span class="token function">getCalledFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> targetFunc<span class="token punctuation">)</span>
              <span class="token operator">++</span>callCounter<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

  <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">unsigned</span> callCounter<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,63),o=[e];function l(c,r,u,i,k,m){return a(),s("div",null,o)}var g=n(t,[["render",l]]);export{d as __pageData,g as default};
