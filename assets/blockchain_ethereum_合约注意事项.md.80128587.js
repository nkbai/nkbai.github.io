import{_ as n,c as a,o as s,a as e}from"./app.4bbc222c.js";const h='{"title":"\u5408\u7EA6\u6CE8\u610F\u4E8B\u9879","description":"","frontmatter":{"title":"\u5408\u7EA6\u6CE8\u610F\u4E8B\u9879","date":"2019-04-25T09:39:46.982Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"1. \u6808\u6DF1\u5EA6","slug":"_1-\u6808\u6DF1\u5EA6"},{"level":2,"title":"2. solidity \u5C40\u90E8\u53D8\u91CF\u4E2A\u6570\u4E0D\u80FD\u8D85\u8FC716","slug":"_2-solidity-\u5C40\u90E8\u53D8\u91CF\u4E2A\u6570\u4E0D\u80FD\u8D85\u8FC716"},{"level":2,"title":"3.\u5185\u5B58\u8D39\u7528","slug":"_3-\u5185\u5B58\u8D39\u7528"},{"level":2,"title":"4.delete \u5173\u952E\u5B57","slug":"_4-delete-\u5173\u952E\u5B57"},{"level":2,"title":"4.abi.encodePacked \u6709\u4EC0\u4E48\u4EF7\u503C?","slug":"_4-abi-encodepacked-\u6709\u4EC0\u4E48\u4EF7\u503C"},{"level":2,"title":"5. sha256,ripemd160,ecrecover","slug":"_5-sha256-ripemd160-ecrecover"},{"level":2,"title":"6. \u5408\u7EA6\u4E2D\u4F7F\u7528 call","slug":"_6-\u5408\u7EA6\u4E2D\u4F7F\u7528-call"},{"level":2,"title":"7.call,delegatecall,callcode \u6CE8\u610F\u4E8B\u9879","slug":"_7-call-delegatecall-callcode-\u6CE8\u610F\u4E8B\u9879"},{"level":2,"title":"8.require \u548C assert \u7684\u533A\u522B","slug":"_8-require-\u548C-assert-\u7684\u533A\u522B"},{"level":2,"title":"11. pure \u5173\u952E\u5B57","slug":"_11-pure-\u5173\u952E\u5B57"},{"level":2,"title":"12. library\u7528\u6CD5","slug":"_12-library\u7528\u6CD5"},{"level":2,"title":"\u5408\u7EA6\u4F18\u5316123","slug":"\u5408\u7EA6\u4F18\u5316123"},{"level":3,"title":"\u5B58\u50A8\u4F18\u5316","slug":"\u5B58\u50A8\u4F18\u5316"},{"level":2,"title":"EVM\u6307\u4EE4\u96C6\u6D88\u8017 gas \u7EDF\u8BA1","slug":"evm\u6307\u4EE4\u96C6\u6D88\u8017-gas-\u7EDF\u8BA1"},{"level":2,"title":"7.1.3 The Ethereum Virtual Machine","slug":"_7-1-3-the-ethereum-virtual-machine"},{"level":3,"title":"Overview","slug":"overview"},{"level":3,"title":"Accounts","slug":"accounts"},{"level":3,"title":"Transactions","slug":"transactions"},{"level":3,"title":"Gas","slug":"gas"},{"level":3,"title":"Storage, Memory and the Stack","slug":"storage-memory-and-the-stack"},{"level":3,"title":"Instruction Set","slug":"instruction-set"},{"level":3,"title":"Message Calls","slug":"message-calls"},{"level":3,"title":"Delegatecall / Callcode and Libraries","slug":"delegatecall-callcode-and-libraries"},{"level":3,"title":"Logs","slug":"logs"},{"level":3,"title":"Create","slug":"create"},{"level":3,"title":"Self-destruct","slug":"self-destruct"},{"level":3,"title":"call,delegateCall,callCode\u548CstaticCall\u7684\u533A\u522B","slug":"call-delegatecall-callcode\u548Cstaticcall\u7684\u533A\u522B"}],"relativePath":"blockchain/ethereum/\u5408\u7EA6\u6CE8\u610F\u4E8B\u9879.md"}',t={},p=e(`<h1 id="solidity-\u5408\u7EA6\u6CE8\u610F\u4E8B\u9879" tabindex="-1">solidity \u5408\u7EA6\u6CE8\u610F\u4E8B\u9879 <a class="header-anchor" href="#solidity-\u5408\u7EA6\u6CE8\u610F\u4E8B\u9879" aria-hidden="true">#</a></h1><h2 id="_1-\u6808\u6DF1\u5EA6" tabindex="-1">1. \u6808\u6DF1\u5EA6 <a class="header-anchor" href="#_1-\u6808\u6DF1\u5EA6" aria-hidden="true">#</a></h2><p>EVM \u6808\u6DF1\u5EA61024\u5B57(1024*256\u5B57\u8282)</p><h2 id="_2-solidity-\u5C40\u90E8\u53D8\u91CF\u4E2A\u6570\u4E0D\u80FD\u8D85\u8FC716" tabindex="-1">2. solidity \u5C40\u90E8\u53D8\u91CF\u4E2A\u6570\u4E0D\u80FD\u8D85\u8FC716 <a class="header-anchor" href="#_2-solidity-\u5C40\u90E8\u53D8\u91CF\u4E2A\u6570\u4E0D\u80FD\u8D85\u8FC716" aria-hidden="true">#</a></h2><p>\u56E0\u4E3A\u63D0\u4F9B\u7684\u6307\u4EE4\u96C6\u5BF9\u4E8E\u6808\u6DF1\u5EA6\u7684\u8BBF\u95EE\u4E0D\u80FD\u8D85\u8FC716,\u4E5F\u5C31\u662F\u8BF4\u6700\u591A\u628A\u7B2C16\u4E2A\u5B57\u6362\u5230\u6808\u9876\u8FDB\u884C\u64CD\u4F5C.</p><h2 id="_3-\u5185\u5B58\u8D39\u7528" tabindex="-1">3.\u5185\u5B58\u8D39\u7528 <a class="header-anchor" href="#_3-\u5185\u5B58\u8D39\u7528" aria-hidden="true">#</a></h2><p>\u5360\u7528 EVM \u7684\u5185\u5B58\u8D8A\u5927,\u6536\u8D39\u8D8A\u9AD8,\u6536\u8D39\u662F\u5185\u5B58\u5927\u5C0F\u7684\u5E73\u65B9,\u5177\u4F53\u8BA1\u7B97\u65B9\u5F0F\u672A\u77E5.</p><h2 id="_4-delete-\u5173\u952E\u5B57" tabindex="-1">4.delete \u5173\u952E\u5B57 <a class="header-anchor" href="#_4-delete-\u5173\u952E\u5B57" aria-hidden="true">#</a></h2><p>delete \u4F5C\u7528\u76F8\u5F53\u4E8E\u5C06\u53D8\u91CF\u7684\u503C\u8BBE\u7F6E\u4E3A\u9ED8\u8BA4\u503C,\u4F46\u662F\u4F1A\u964D\u4F4E gas \u7684\u8D39\u7528.</p><h2 id="_4-abi-encodepacked-\u6709\u4EC0\u4E48\u4EF7\u503C" tabindex="-1">4.abi.encodePacked \u6709\u4EC0\u4E48\u4EF7\u503C? <a class="header-anchor" href="#_4-abi-encodepacked-\u6709\u4EC0\u4E48\u4EF7\u503C" aria-hidden="true">#</a></h2><p>\u4EE5\u4E0B\u9762\u7684registerSecret\u4E3A\u4F8B,\u5982\u679C\u53C2\u6570\u4E2A\u6570\u4E3A1\u4E2A,\u90A3\u4E48\u6709abi.encodePacked,\u5C06\u4F1A\u591A\u6D6A\u8D39350\u7684 gas, \u5982\u679C\u4E24\u4E2A\u53C2\u6570\u591A\u6D6A\u8D39458\u7684 gas, \u5982\u679C\u662F\u4E94\u4E2A\u53C2\u6570,\u5C06\u4F1A\u591A\u6D6A\u8D39749\u7684 gas. \u4F46\u662F\u6709\u6CA1\u6709 abi.encodePacked, \u5F97\u5230\u7684 secrethash \u90FD\u662F\u4E00\u6837\u7684.\u4E5F\u5C31\u662F\u7ED3\u679C\u5B8C\u5168\u4E00\u6837. \u4E0D\u660E\u767D\u4E3A\u4EC0\u4E48\u8981\u591A\u6D6A\u8D39\u8FD9\u4E9B gas.</p><div class="language-solidity line-numbers-mode"><pre><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.23</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">SecretRegistry</span> <span class="token punctuation">{</span>

    <span class="token comment">/*
     *  Data structures
     */</span>

    <span class="token builtin">string</span> <span class="token keyword">constant</span> <span class="token keyword">public</span> contract_version <span class="token operator">=</span> <span class="token string">&quot;0.3._&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// secrethash =&gt; block number at which the secret was revealed</span>
    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> secrethash_to_block<span class="token punctuation">;</span>

    <span class="token comment">/*
     *  Events
     */</span>

    <span class="token keyword">event</span> <span class="token function">SecretRevealed</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> <span class="token keyword">indexed</span> secrethash<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">function</span> <span class="token function">registerSecret</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> u1<span class="token punctuation">,</span><span class="token builtin">uint256</span> u2<span class="token punctuation">,</span><span class="token builtin">uint256</span> u3<span class="token punctuation">,</span><span class="token builtin">uint256</span> u4<span class="token punctuation">,</span><span class="token builtin">uint256</span> u5<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">bytes32</span> secrethash <span class="token operator">=</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span>u2<span class="token punctuation">,</span>u3<span class="token punctuation">,</span>u4<span class="token punctuation">,</span>u5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>u1 <span class="token operator">==</span> <span class="token number">0x0</span> <span class="token operator">||</span> secrethash_to_block<span class="token punctuation">[</span>secrethash<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        secrethash_to_block<span class="token punctuation">[</span>secrethash<span class="token punctuation">]</span> <span class="token operator">=</span> block<span class="token punctuation">.</span>number<span class="token punctuation">;</span>
        <span class="token keyword">emit</span> <span class="token function">SecretRevealed</span><span class="token punctuation">(</span>secrethash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getSecretRevealBlockHeight</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> secrethash<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> secrethash_to_block<span class="token punctuation">[</span>secrethash<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="_5-sha256-ripemd160-ecrecover" tabindex="-1">5. sha256,ripemd160,ecrecover <a class="header-anchor" href="#_5-sha256-ripemd160-ecrecover" aria-hidden="true">#</a></h2><p>\u8FD9\u4E9B\u529F\u80FD\u5E76\u6CA1\u6709\u4E13\u95E8\u7684\u6307\u4EE4\u96C6,\u800C\u662F\u6709\u4E00\u4E2A\u5185\u7F6E\u7684\u5408\u7EA6\u6765\u5B9E\u73B0\u4E0A\u8FF0\u529F\u80FD.(\u6307\u4EE4\u96C6\u660E\u660E\u6709sha256,\u96BE\u9053\u73B0\u5728\u79FB\u9664\u4E86?) \u53C2\u8003 solidity0.4.24\u6587\u6863 It might be that you run into Out-of-Gas for sha256, ripemd160 or ecrecover on a private blockchain. The reason for this is that those are implemented as so-called precompiled contracts and these contracts only really exist after they received the first message (although their contract code is hardcoded). Messages to non-existing contracts are more expensive and thus the execution runs into an Out-of-Gas error. A workaround for this problem is to first send e.g. 1 Wei to each of the contracts before you use them in your actual contracts. This is not an issue on the official or test net.</p><h2 id="_6-\u5408\u7EA6\u4E2D\u4F7F\u7528-call" tabindex="-1">6. \u5408\u7EA6\u4E2D\u4F7F\u7528 call <a class="header-anchor" href="#_6-\u5408\u7EA6\u4E2D\u4F7F\u7528-call" aria-hidden="true">#</a></h2><p>\u4E0B\u9762\u63D0\u4F9B\u4E86\u4E24\u4E2A\u4F8B\u5B50, approve and call, \u4E3B\u8981\u662F\u5C3D\u91CF\u51CF\u5C11 transactions. \u6BD4\u5982\u96F7\u7535\u7F51\u7EDC\u5728 openchannel \u7684\u65F6\u5019,\u5982\u679C\u5BF9\u5E94\u7684 ERC20token \u652F\u6301approve and call,\u90A3\u4E48 deposit \u884C\u4E3A\u5C31\u6CA1\u5FC5\u8981\u662F\u4E24\u4E2A transaction, \u53EA\u9700\u4E00\u4E2A\u5373\u53EF.</p><div class="language-sol line-numbers-mode"><pre><code><span class="token comment">/* Approves and then calls the receiving contract */</span>
<span class="token keyword">function</span> <span class="token function">approveAndCall</span><span class="token punctuation">(</span><span class="token builtin">address</span> _spender<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _value<span class="token punctuation">,</span> <span class="token builtin">bytes</span> _extraData<span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    allowed<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">[</span>_spender<span class="token punctuation">]</span> <span class="token operator">=</span> _value<span class="token punctuation">;</span>
    <span class="token function">Approval</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _spender<span class="token punctuation">,</span> _value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.</span>
    <span class="token comment">//receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)</span>
    <span class="token comment">//it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>_spender<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span><span class="token punctuation">(</span><span class="token function">sha3</span><span class="token punctuation">(</span><span class="token string">&quot;receiveApproval(address,uint256,address,bytes)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _value<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> _extraData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Approves and then calls the contract code*/</span>
<span class="token keyword">function</span> <span class="token function">approveAndCallcode</span><span class="token punctuation">(</span><span class="token builtin">address</span> _spender<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _value<span class="token punctuation">,</span> <span class="token builtin">bytes</span> _extraData<span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    allowed<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">[</span>_spender<span class="token punctuation">]</span> <span class="token operator">=</span> _value<span class="token punctuation">;</span>
    <span class="token function">Approval</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _spender<span class="token punctuation">,</span> _value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Call the contract code</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>_spender<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>_extraData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="_7-call-delegatecall-callcode-\u6CE8\u610F\u4E8B\u9879" tabindex="-1">7.call,delegatecall,callcode \u6CE8\u610F\u4E8B\u9879 <a class="header-anchor" href="#_7-call-delegatecall-callcode-\u6CE8\u610F\u4E8B\u9879" aria-hidden="true">#</a></h2><p>\u5982\u679C\u88AB\u8C03\u5408\u7EA6\u5730\u5740\u4E0D\u5B58\u5728,\u4E5F\u4F1A\u8FD4\u56DE\u6210\u529F. The low-level call, delegatecall and callcode will return success if the called account is non-existent, as part of the design of EVM. Existence must be checked prior to calling if desired.</p><h2 id="_8-require-\u548C-assert-\u7684\u533A\u522B" tabindex="-1">8.require \u548C assert \u7684\u533A\u522B <a class="header-anchor" href="#_8-require-\u548C-assert-\u7684\u533A\u522B" aria-hidden="true">#</a></h2><p>require(\u5BF9\u5E94\u6307\u4EE40xfd) \u7528\u4E8E\u9A8C\u8BC1\u7528\u6237\u8F93\u5165\u662F\u5426\u6709\u6548, assert(\u5BF9\u5E94\u6307\u4EE40xfe) \u7528\u4E8E\u672A\u60F3\u5230\u7684\u5185\u90E8\u9519\u8BEF. Internally, Solidity performs a revert operation (instruction 0xfd) for a require-style exception and executes an invalid operation (instruction 0xfe) to throw an assert-style exception.</p><p>#9. \u51FD\u6570external,internal,public\u548C private \u7684\u533A\u522B external \u53EA\u80FD\u901A\u8FC7message call \u7684\u5F62\u5F0F\u8C03\u7528,\u5C31\u662F\u672C\u5408\u7EA6\u5185\u90E8\u8C03\u7528\u4E5F\u8981\u901A\u8FC7 this.f()\u8FD9\u79CD\u5F62\u5F0F,\u65E0\u6CD5\u76F4\u63A5 f() internal \u53EA\u80FD\u5728\u5408\u7EA6\u5185\u4EE5\u53CA\u7EE7\u627F\u5408\u7EA6\u5185\u8C03\u7528 Public \u65E2\u53EF\u4EE5\u5728\u5408\u7EA6\u5185\u8C03\u7528\u4E5F\u53EF\u4EE5\u5728\u5408\u7EA6\u5916\u8C03\u7528,\u5408\u7EA6\u5185\u8C03\u7528\u662F\u76F4\u63A5 jump, \u5408\u7EA6\u5916\u8C03\u7528\u662F message call private \u53EA\u80FD\u88AB\u5408\u7EA6\u81EA\u5DF1\u8C03\u7528,\u5305\u62EC\u96C6\u6210\u5408\u7EA6\u90FD\u4E0D\u53EF\u4EE5</p><h1 id="_10-\u51FD\u6570\u7684\u5176\u4ED6\u63CF\u8FF0\u5173\u952E\u5B57-view" tabindex="-1">10.\u51FD\u6570\u7684\u5176\u4ED6\u63CF\u8FF0\u5173\u952E\u5B57 view <a class="header-anchor" href="#_10-\u51FD\u6570\u7684\u5176\u4ED6\u63CF\u8FF0\u5173\u952E\u5B57-view" aria-hidden="true">#</a></h1><p>view \u4FDD\u8BC1\u4E0D\u4FEE\u6539\u5408\u7EA6\u72B6\u6001.\u4EE5\u4E0B\u5747\u8BA4\u4E3A\u4F1A\u6539\u53D8\u5408\u7EA6\u72B6\u6001</p><ul><li>Writing to state variables.</li><li>Emitting events.</li><li>Creating other contracts.</li><li>Using selfdestruct.</li><li>Sending Ether via calls.</li><li>Calling any function not marked view or pure.</li><li>Using low-level calls.</li><li>Using inline assembly that contains certain opcodes.</li></ul><h2 id="_11-pure-\u5173\u952E\u5B57" tabindex="-1">11. pure \u5173\u952E\u5B57 <a class="header-anchor" href="#_11-pure-\u5173\u952E\u5B57" aria-hidden="true">#</a></h2><p>pure \u6807\u6CE8\u4EE5\u540E\u4E0D\u4EC5\u4E0D\u4FEE\u6539\u5408\u7EA6\u72B6\u6001,\u751A\u81F3\u4E0D\u4F1A\u8BFB\u5408\u7EA6\u72B6\u6001, \u8BFB\u5408\u7EA6\u72B6\u6001\u5305\u62EC\u4EE5\u4E0B\u884C\u4E3A</p><div class="language-"><pre><code>Reading from state variables.
Accessing this.balance or &lt;address&gt;.balance.
Accessing any of the members of block, tx, msg (with the exception of msg.sig and msg.data).
Calling any function not marked pure.
Using inline assembly that contains certain opcodes.
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_12-library\u7528\u6CD5" tabindex="-1">12. library\u7528\u6CD5 <a class="header-anchor" href="#_12-library\u7528\u6CD5" aria-hidden="true">#</a></h2><p>\u4E0B\u9762\u8FD9\u4E2A Set \u7684insert,remove,contains \u90FD\u662F delegatecall \u8C03\u7528, \u4F46\u662F contains \u662F\u901A\u8FC7\u6765jump \u8C03\u7528. delegatecall \u4E5F\u662F\u4E00\u79CD messagecall \u4F46\u662F\u5C06\u4F7F\u7528\u5F53\u524D\u5408\u7EA6\u7684\u4E0A\u4E0B\u6587\u73AF\u5883.\u4E5F\u5C31\u662Fmsg.sender,msg.value,this \u90FD\u4E0D\u53D8</p><div class="language-solidity line-numbers-mode"><pre><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.22</span><span class="token punctuation">;</span>

<span class="token keyword">library</span> <span class="token class-name">Set</span> <span class="token punctuation">{</span>
  <span class="token comment">// We define a new struct datatype that will be used to</span>
  <span class="token comment">// hold its data in the calling contract.</span>
  <span class="token keyword">struct</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span> <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">uint</span> <span class="token operator">=&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> flags<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Note that the first parameter is of type &quot;storage</span>
  <span class="token comment">// reference&quot; and thus only its storage address and not</span>
  <span class="token comment">// its contents is passed as part of the call.  This is a</span>
  <span class="token comment">// special feature of library functions.  It is idiomatic</span>
  <span class="token comment">// to call the first parameter \`self\`, if the function can</span>
  <span class="token comment">// be seen as a method of that object.</span>
  <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>Data <span class="token keyword">storage</span> self<span class="token punctuation">,</span> <span class="token builtin">uint</span> value<span class="token punctuation">)</span>
      <span class="token keyword">public</span>
      <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>flags<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// already there</span>
      self<span class="token punctuation">.</span>flags<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>Data <span class="token keyword">storage</span> self<span class="token punctuation">,</span> <span class="token builtin">uint</span> value<span class="token punctuation">)</span>
      <span class="token keyword">public</span>
      <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">.</span>flags<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// not there</span>
      self<span class="token punctuation">.</span>flags<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">contains</span><span class="token punctuation">(</span>Data <span class="token keyword">storage</span> self<span class="token punctuation">,</span> <span class="token builtin">uint</span> value<span class="token punctuation">)</span>
      <span class="token keyword">public</span>
      <span class="token keyword">view</span>
      <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      <span class="token keyword">return</span> self<span class="token punctuation">.</span>flags<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    Set<span class="token punctuation">.</span>Data knownValues<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token builtin">uint</span> value<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// The library functions can be called without a</span>
        <span class="token comment">// specific instance of the library, since the</span>
        <span class="token comment">// &quot;instance&quot; will be the current contract.</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>Set<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>knownValues<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// In this contract, we can also directly access knownValues.flags, if we want.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h2 id="\u5408\u7EA6\u4F18\u5316123" tabindex="-1">\u5408\u7EA6\u4F18\u5316123 <a class="header-anchor" href="#\u5408\u7EA6\u4F18\u5316123" aria-hidden="true">#</a></h2><h3 id="\u5B58\u50A8\u4F18\u5316" tabindex="-1">\u5B58\u50A8\u4F18\u5316 <a class="header-anchor" href="#\u5B58\u50A8\u4F18\u5316" aria-hidden="true">#</a></h3><p>\u5B9A\u4E49\u7684 struct \u5C31\u50CF c \u8BED\u8A00\u6709 align \u95EE\u9898\u4E00\u6837,\u5426\u5219\u4F1A\u5E26\u6765\u7A7A\u95F4\u6D6A\u8D39. \u9664\u975E\u662F\u5B9A\u4E49\u5728 storage \u533A\u57DF\u7684 state \u53D8\u91CF,\u5426\u5219\u6CA1\u5FC5\u8981\u4F7F\u7528\u5C0F\u4E8E\u4E00\u4E2A\u5B57\u7684\u7C7B\u578B,\u56E0\u4E3A\u90A3\u6837\u66F4\u6D6A\u8D39\u6307\u4EE4,\u5E76\u4E14\u4E0D\u8282\u7701\u7A7A\u95F4. When using elements that are smaller than 32 bytes, your contract\u2019s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.</p><p>It is only beneficial to use reduced-size arguments if you are dealing with storage values because the compiler will pack multiple elements into one storage slot, and thus, combine multiple reads or writes into a single operation. When dealing with function arguments or memory values, there is no inherent benefit because the compiler does not pack these values.</p><p>Finally, in order to allow the EVM to optimize for this, ensure that you try to order your storage variables and struct members such that they can be packed tightly. For example, declaring your storage variables in the order of uint128, uint128, uint256 instead of uint128, uint256, uint128, as the former will only take up two slots of storage whereas the latter will take up three.</p><h2 id="evm\u6307\u4EE4\u96C6\u6D88\u8017-gas-\u7EDF\u8BA1" tabindex="-1">EVM\u6307\u4EE4\u96C6\u6D88\u8017 gas \u7EDF\u8BA1 <a class="header-anchor" href="#evm\u6307\u4EE4\u96C6\u6D88\u8017-gas-\u7EDF\u8BA1" aria-hidden="true">#</a></h2><p>\u5173\u952E\u662F\u770B gas \u6D88\u8017\u6700\u5927\u7684\u4E00\u4E9B\u9879\u76EE</p><ol><li>create contract 32000</li><li>\u5728 storage \u533A\u57DF\u5199\u6570\u636E,\u7B2C\u4E00\u6B21\u519920000,\u4EE5\u540E\u51995000</li><li>EXTCODESIZE 700,\u4E5F\u5C31\u662F\u5224\u65AD\u4E00\u4E0B\u67D0\u4E2A\u5730\u5740\u662F\u5426\u6709\u5408\u7EA6\u4EE3\u7801,\u9700\u8981 gas700</li><li>BALANCE \u83B7\u53D6\u8D26\u6237 ether \u4F59\u989D 400</li><li>\u51E0\u4E2A log \u6307\u4EE4,375\u8D77\u6B65</li><li>SLOAD \u8BFB\u53D6 storage \u533A\u57DF,200 \u50CF SHA3\u8FD9\u4E9B\u6307\u4EE4\u53CD\u800C\u5F88\u4FBF\u5B9C,\u4E0D\u77E5\u9053 ecrecover \u6709\u591A\u8D35,ecrecover \u662F\u4E00\u79CD\u5408\u7EA6\u8C03\u7528\u6307\u4EE4,\u6BD4\u8F83\u590D\u6742</li><li>\u5206\u914D storage \u7A7A\u95F4\u5E76\u4E0D\u82B1\u8D39 gas, \u53EA\u6709\u5199\u5185\u5BB9\u624D\u82B1\u8D39 gas</li><li>\u5C06 storage \u5185\u5BB9\u75310\u8BBE\u7F6E\u4E3A\u975E0,\u8865\u507F15000,\u76F8\u5F53\u4E8E\u76F4\u63A5\u8865\u8D3410000(\u8FD8\u8981\u51CF\u53BB\u6307\u4EE4\u672C\u8EAB\u76845000??\u9A8C\u8BC1\u4E00\u4E0B)</li><li>\u9500\u6BC1\u4E00\u4E2A\u5408\u7EA6\u8D26\u6237\u8865\u507F24000,\u8FD8\u67095000\u9500\u6BC1\u672C\u8EAB\u7684\u8D39\u7528,\u76F8\u5F53\u4E8E\u83B7\u53D6\u6536\u76CA19000 <img alt="" data-src="https://images2018.cnblogs.com/blog/124391/201807/124391-20180701001124211-217950936.png" loading="lazy" class="lazy"></li></ol><h2 id="_7-1-3-the-ethereum-virtual-machine" tabindex="-1">7.1.3 The Ethereum Virtual Machine <a class="header-anchor" href="#_7-1-3-the-ethereum-virtual-machine" aria-hidden="true">#</a></h2><h3 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h3><p>The Ethereum Virtual Machine or EVM is the runtime environment for smart contracts in Ethereum. It is not only sandboxed but actually completely isolated, which means that code running inside the EVM has no access to network, \uFB01lesystem or other processes. Smart contracts even have limited access to other smart contracts.</p><h3 id="accounts" tabindex="-1">Accounts <a class="header-anchor" href="#accounts" aria-hidden="true">#</a></h3><p>There are two kinds of accounts in Ethereum which share the same address space: External accounts that are controlled by public-private key pairs (i.e. humans) and contract accounts which are controlled by the code stored together with the account.</p><p>The address of an external account is determined from the public key while the address of a contract is determined at the time the contract is created (it is derived from the creator address and the number of transactions sent from that address, the so-called \u201Cnonce\u201D).</p><p>Regardless of whether or not the account stores code, the two types are treated equally by the EVM.</p><p>Every account has a persistent key-value store mapping 256-bit words to 256-bit words called storage.</p><p>Furthermore, every account has a balance in Ether (in \u201CWei\u201D to be exact) which can be modi\uFB01ed by sending transactions that include Ether.</p><h3 id="transactions" tabindex="-1">Transactions <a class="header-anchor" href="#transactions" aria-hidden="true">#</a></h3><p>A transaction is a message that is sent from one account to another account (which might be the same or the special zero-account, see below). It can include binary data (its payload) and Ether.</p><p>If the target account contains code, that code is executed and the payload is provided as input data.</p><p>If the target account is the zero-account (the account with the address 0), the transaction creates a new contract. As already mentioned, the address of that contract is not the zero address but an address derived from the sender and its number of transactions sent (the \u201Cnonce\u201D). The payload of such a contract creation transaction is taken to be EVM bytecode and executed. The output of this execution is permanently stored as the code of the contract. This means that in order to create a contract, you do not send the actual code of the contract, but in fact code that returns that code when executed.</p><p>Note: While a contract is being created, its code is still empty. Because of that, you should not call back into the contract under construction until its constructor has \uFB01nished executing.</p><h3 id="gas" tabindex="-1">Gas <a class="header-anchor" href="#gas" aria-hidden="true">#</a></h3><p>Upon creation, each transaction is charged with a certain amount of gas, whose purpose is to limit the amount of work that is needed to execute the transaction and to pay for this execution. While the EVM executes the transaction, the gas is gradually depleted according to speci\uFB01c rules.</p><p>The gas price is a value set by the creator of the transaction, who has to pay gas_price * gas up front from the sending account. If some gas is left after the execution, it is refunded in the same way.</p><p>If the gas is used up at any point (i.e. it is negative), an out-of-gas exception is triggered, which reverts all modi\uFB01cations made to the state in the current call frame.</p><h3 id="storage-memory-and-the-stack" tabindex="-1">Storage, Memory and the Stack <a class="header-anchor" href="#storage-memory-and-the-stack" aria-hidden="true">#</a></h3><p>Each account has a persistent memory area which is called storage. Storage is a key-value store that maps 256-bit words to 256-bit words. It is not possible to enumerate storage from within a contract and it is comparatively costly to read and even more so, to modify storage. A contract can neither read nor write to any storage apart from its own.</p><p>The second memory area is called memory, of which a contract obtains a freshly cleared instance for each message call. Memory is linear and can be addressed at byte level, but reads are limited to a width of 256 bits, while writes can be either 8 bits or 256 bits wide. Memory is expanded by a word (256-bit), when accessing (either reading or writing) a previously untouched memory word (ie. any offset within a word). At the time of expansion, the cost in gas must be paid. Memory is more costly the larger it grows (it scales quadratically).</p><p>The EVM is not a register machine but a stack machine, so all computations are performed on an area called the stack. It has a maximum size of 1024 elements and contains words of 256 bits. Access to the stack is limited to the top end in the following way: It is possible to copy one of the topmost 16 elements to the top of the stack or swap the topmost element with one of the 16 elements below it. All other operations take the topmost two (or one, or more, depending on the operation) elements from the stack and push the result onto the stack. Of course it is possible to move stack elements to storage or memory, but it is not possible to just access arbitrary elements deeper in the stack without \uFB01rst removing the top of the stack.</p><h3 id="instruction-set" tabindex="-1">Instruction Set <a class="header-anchor" href="#instruction-set" aria-hidden="true">#</a></h3><p>The instruction set of the EVM is kept minimal in order to avoid incorrect implementations which could cause consensus problems. All instructions operate on the basic data type, 256-bit words. The usual arithmetic, bit, logical and comparison operations are present. Conditional and unconditional jumps are possible. Furthermore, contracts can access relevant properties of the current block like its number and timestamp.</p><h3 id="message-calls" tabindex="-1">Message Calls <a class="header-anchor" href="#message-calls" aria-hidden="true">#</a></h3><p>Contracts can call other contracts or send Ether to non-contract accounts by the means of message calls. Message calls are similar to transactions, in that they have a source, a target, data payload, Ether, gas and return data. In fact, every transaction consists of a top-level message call which in turn can create further message calls.</p><p>A contract can decide how much of its remaining gas should be sent with the inner message call and how much it wants to retain. If an out-of-gas exception happens in the inner call (or any other exception), this will be signalled by an error value put onto the stack. In this case, only the gas sent together with the call is used up. In Solidity, the calling contract causes a manual exception by default in such situations, so that exceptions \u201Cbubble up\u201D the call stack.</p><p>As already said, the called contract (which can be the same as the caller) will receive a freshly cleared instance of memory and has access to the call payload - which will be provided in a separate area called the calldata. After it has \uFB01nished execution, it can return data which will be stored at a location in the caller\u2019s memory preallocated by the caller.</p><p>Calls are limited to a depth of 1024, which means that for more complex operations, loops should be preferred over recursive calls.</p><h3 id="delegatecall-callcode-and-libraries" tabindex="-1">Delegatecall / Callcode and Libraries <a class="header-anchor" href="#delegatecall-callcode-and-libraries" aria-hidden="true">#</a></h3><p>There exists a special variant of a message call, named delegatecall which is identical to a message call apart from the fact that the code at the target address is executed in the context of the calling contract and msg.sender and msg.value do not change their values.</p><p>This means that a contract can dynamically load code from a different address at runtime. Storage, current address and balance still refer to the calling contract, only the code is taken from the called address.</p><p>This makes it possible to implement the \u201Clibrary\u201D feature in Solidity: Reusable library code that can be applied to a contract\u2019s storage, e.g. in order to implement a complex data structure.</p><h3 id="logs" tabindex="-1">Logs <a class="header-anchor" href="#logs" aria-hidden="true">#</a></h3><p>It is possible to store data in a specially indexed data structure that maps all the way up to the block level. This feature called logs is used by Solidity in order to implement events. Contracts cannot access log data after it has been created, but they can be ef\uFB01ciently accessed from outside the blockchain. Since some part of the log data is stored in bloom \uFB01lters, it is possible to search for this data in an ef\uFB01cient and cryptographically secure way, so network peers that do not download the whole blockchain (\u201Clight clients\u201D) can still \uFB01nd these logs.</p><h3 id="create" tabindex="-1">Create <a class="header-anchor" href="#create" aria-hidden="true">#</a></h3><p>Contracts can even create other contracts using a special opcode (i.e. they do not simply call the zero address). The only difference between these create calls and normal message calls is that the payload data is executed and the result stored as code and the caller / creator receives the address of the new contract on the stack.</p><h3 id="self-destruct" tabindex="-1">Self-destruct <a class="header-anchor" href="#self-destruct" aria-hidden="true">#</a></h3><p>The only possibility that code is removed from the blockchain is when a contract at that address performs the selfdestruct operation. The remaining Ether stored at that address is sent to a designated target and then the storage and code is removed from the state.</p><p>Warning: Even if a contract\u2019s code does not contain a call to selfdestruct, it can still perform that operation using delegatecall or callcode.</p><p>Note: The pruning of old contracts may or may not be implemented by Ethereum clients. Additionally, archive nodes could choose to keep the contract storage and code inde\uFB01nitely.</p><p>Note: Currently external accounts cannot be removed from the state</p><h3 id="call-delegatecall-callcode\u548Cstaticcall\u7684\u533A\u522B" tabindex="-1">call,delegateCall,callCode\u548CstaticCall\u7684\u533A\u522B <a class="header-anchor" href="#call-delegatecall-callcode\u548Cstaticcall\u7684\u533A\u522B" aria-hidden="true">#</a></h3><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">,</span> value <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">CallCode</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">,</span> value <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">DelegateCall</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">StaticCall</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol><li><p>call \u662F\u901A\u8FC7Tx\u53D1\u8D77\u7684\u5408\u7EA6\u8C03\u7528,\u8D70\u7684\u90FD\u662F\u8FD9\u4E2A\u8C03\u7528.\u5408\u7EA6\u5185\u8C03\u7528\u5176\u4ED6\u5408\u7EA6\u4E5F\u662F\u8D70\u7684\u8FD9\u4E2A\u51FD\u6570</p></li><li><p>CallCode\u4E3B\u8981\u662F\u670D\u52A1\u4E8Elibrary,\u5047\u8BBE\u5982\u4E0B\u8C03\u7528 \u8D26\u6237A\u8C03\u7528ContractA\u7684FA,\u7136\u540EFA\u8C03\u7528Library B\u7684FB,\u8FD9\u65F6\u5019\u5728FB\u4E2D\u770B\u5230\u7684msg.sender\u662FContractA,value\u662F\u7531\u8C03\u7528FB\u7684\u65F6\u5019\u6307\u5B9A\u7684. \u76EE\u524Dsolidity\u751F\u6210\u7684\u4EE3\u7801\u4E2D\u5DF2\u7ECF\u4E0D\u5305\u542B\u8BE5\u6307\u4EE4.</p></li><li><p>DelegateCall \u662FCallCode\u7684\u5347\u7EA7,\u4E5F\u662F\u670D\u52A1\u4E8ELibrary,\u5047\u8BBE\u8C03\u7528\u5982\u4E0B: \u8D26\u6237A\u8C03\u7528ContractA\u7684FA,\u7136\u540EFA\u8C03\u7528Library B\u7684FB,\u8FD9\u65F6\u5019\u5728FB\u4E2D\u770B\u5230\u7684msg.sender\u662FA,value\u662F\u7531A\u8C03\u7528FA\u7684\u65F6\u5019\u6307\u5B9A\u7684 \u5728\u5982\u4E0B\u793A\u4F8B\u4E2D\u53EF\u4EE5\u89C2\u5BDF\u5230DelegateCall,\u5982\u679CLibrary\u6CA1\u6709\u6570\u636E,\u5219\u4E0D\u4F1A\u89C2\u5BDF\u5230DelegateCall</p></li></ol><div class="language-sol line-numbers-mode"><pre><code><span class="token comment">// Code for StringToUintMap.sol</span>

<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.24</span><span class="token punctuation">;</span>

<span class="token keyword">library</span> <span class="token class-name">StringToUintMap</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>
        <span class="token keyword">mapping</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint8</span><span class="token punctuation">)</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>
        Data <span class="token keyword">storage</span> self<span class="token punctuation">,</span>
        <span class="token builtin">string</span> key<span class="token punctuation">,</span>
        <span class="token builtin">uint8</span> value<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span> updated<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        updated <span class="token operator">=</span> self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span>Data <span class="token keyword">storage</span> self<span class="token punctuation">,</span> <span class="token builtin">string</span> key<span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="language-solidty line-numbers-mode"><pre><code>pragma solidity ^0.4.24;

import { StringToUintMap } from &quot;lib1.sol&quot;;

contract PersonsAge {

    StringToUintMap.Data private _stringToUintMapData;

    event PersonAdded(string name, uint8 age);
    event GetPersonAgeResponse(string name, uint8 age);

    function addPersonAge(string name, uint8 age) public {
        StringToUintMap.insert(_stringToUintMapData, name, age);

        emit PersonAdded(name, age);
    }

    function getPersonAge(string name) public  returns (uint8) {
        uint8 age = StringToUintMap.get(_stringToUintMapData, name);

        emit GetPersonAgeResponse(name, age);

        return age;
    }
}
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol start="4"><li>StaticCall \u7528\u4E8E\u67E5\u8BE2\u5408\u7EA6.\u4FDD\u8BC1\u8BE5\u8C03\u7528\u6267\u884C\u8FC7\u7A0B\u4E2D\u5408\u7EA6\u72B6\u6001\u4E0D\u88AB\u4FEE\u6539. \u7528\u6237\u76F4\u63A5\u53D1\u8D77\u7684\u67E5\u8BE2\u6216\u8005\u5728\u5408\u7EA6\u8C03\u7528\u4E2D(\u6BD4\u5982\u521A\u521A\u7684FA),\u8BFB\u53D6\u67E5\u8BE2\u5408\u7EA6\u7684\u72B6\u6001. <strong>\u5B9E\u9645\u53D1\u73B0\u5E76\u6CA1\u6709\u5982\u6B64\u4F7F\u7528</strong></li></ol><div class="language-sol line-numbers-mode"><pre><code>     <span class="token keyword">require</span><span class="token punctuation">(</span>token_contract<span class="token punctuation">.</span><span class="token function">totalSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>\u8FD9\u53E5\u8C03\u7528\u751F\u6210\u7684asm,\u4F7F\u7528\u7684\u4ECD\u7136\u662Fcall\u6307\u4EE4,\u800C\u4E0D\u662FStaticCall\u6307\u4EE4</p><p>STATICCALL The Byzantium network upgrade scheduled for October 9 will add a STATICCALL opcode that enforces read-only calls at runtime. Solidity only implements the STATICCALL opcode in its assembly language. Adding pureand view specifiers does not change the opcode that will be used to call the function, so they only affect compiler errors, not any behavior on chain. In the future, calls to pure or view functions could be compiled as STATICCALL, ensuring that the developer\u2019s expectations of immutability are never violated.</p>`,90),o=[p];function c(l,i,r,u,d,k){return s(),a("div",null,o)}var m=n(t,[["render",c]]);export{h as __pageData,m as default};
