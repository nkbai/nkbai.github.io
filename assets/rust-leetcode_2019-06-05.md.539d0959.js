import{_ as n,c as s,o as a,a as p}from"./app.3ef0f76b.js";const d='{"title":"5. \u6700\u957F\u56DE\u6587\u5B50\u4E32-\u53E6\u4E00\u79CD\u89E3\u6CD5","description":"","frontmatter":{"title":"5. \u6700\u957F\u56DE\u6587\u5B50\u4E32-\u53E6\u4E00\u79CD\u89E3\u6CD5","date":"2019-06-05T03:57:03.000Z","draft":false,"tags":["rust","leetcode"],"series":["leetcode"],"categories":["\u6280\u672F\u76F8\u5173"]},"headers":[{"level":2,"title":"\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-06-05) \u6700\u957F\u56DE\u6587\u5B50\u4E32","slug":"\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-06-05-\u6700\u957F\u56DE\u6587\u5B50\u4E32"},{"level":2,"title":"\u9898\u76EE\u63CF\u8FF0","slug":"\u9898\u76EE\u63CF\u8FF0"},{"level":2,"title":"\u89E3\u9898\u8FC7\u7A0B","slug":"\u89E3\u9898\u8FC7\u7A0B"},{"level":2,"title":"\u4E00\u70B9\u611F\u609F","slug":"\u4E00\u70B9\u611F\u609F"},{"level":2,"title":"\u5176\u4ED6","slug":"\u5176\u4ED6"}],"relativePath":"rust-leetcode/2019-06-05.md"}',t={},e=p(`<h2 id="\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-06-05-\u6700\u957F\u56DE\u6587\u5B50\u4E32" tabindex="-1">\u6BCF\u5929\u4E00\u9053Rust-LeetCode(2019-06-05) \u6700\u957F\u56DE\u6587\u5B50\u4E32 <a class="header-anchor" href="#\u6BCF\u5929\u4E00\u9053rust-leetcode-2019-06-05-\u6700\u957F\u56DE\u6587\u5B50\u4E32" aria-hidden="true">#</a></h2><p>\u575A\u6301\u6BCF\u5929\u4E00\u9053\u9898,\u5237\u9898\u5B66\u4E60Rust. \u63A5\u7EED\u6628\u5929,\u6700\u957F\u4F1A\u95EE\u5B57\u7B26\u4E32\u7684\u53E6\u4E00\u79CD\u89E3\u6CD5</p><h2 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1">\u9898\u76EE\u63CF\u8FF0 <a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/longest-palindromic-substring/</a> \u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32 s\uFF0C\u627E\u5230 s \u4E2D\u6700\u957F\u7684\u56DE\u6587\u5B50\u4E32\u3002\u4F60\u53EF\u4EE5\u5047\u8BBE s \u7684\u6700\u5927\u957F\u5EA6\u4E3A 1000\u3002</p><div class="language-"><pre><code>\u793A\u4F8B 1\uFF1A

\u8F93\u5165: &quot;babad&quot;
\u8F93\u51FA: &quot;bab&quot;
\u6CE8\u610F: &quot;aba&quot; \u4E5F\u662F\u4E00\u4E2A\u6709\u6548\u7B54\u6848\u3002
\u793A\u4F8B 2\uFF1A

\u8F93\u5165: &quot;cbbd&quot;
\u8F93\u51FA: &quot;bb&quot;
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="\u89E3\u9898\u8FC7\u7A0B" tabindex="-1">\u89E3\u9898\u8FC7\u7A0B <a class="header-anchor" href="#\u89E3\u9898\u8FC7\u7A0B" aria-hidden="true">#</a></h2><p>\u601D\u8DEF: \u600E\u4E48\u628A\u89C4\u6A21\u5927\u7684\u95EE\u9898\u5316\u6210\u89C4\u6A21\u5C0F\u7684\u95EE\u9898\u8FDB\u884C\u89E3\u51B3 \u5047\u8BBE\u7528m[i][j]\u8868\u793A\u4ECEi\u5230j\u662F\u56DE\u6587\u7684\u957F\u5EA6 \u90A3\u4E48\u53EA\u6709\u4E24\u79CD\u60C5\u51B5\u53EF\u4EE5\u6269\u5C55\u51FA\u56DE\u6587 m[i][j]\u662F\u56DE\u6587,\u5F53\u4E14\u4EC5\u5F53:</p><ol><li>m[i][j-1]\u662F\u56DE\u6587,\u5E76\u4E14m[i][j-1]\u957F\u5EA6\u662F1,\u5E76\u4E14m[j-1]==m[j]</li><li>m[i+1][j-1]\u662F\u56DE\u6587,\u5E76\u4E14m[i]==m[j] \u904D\u5386\u7684\u8FC7\u7A0B\u4E2D\u8BB0\u4E00\u4E2A\u6700\u957F\u5B57\u7B26\u4E32\u5373\u53EF.</li></ol><div class="language-rust line-numbers-mode"><pre><code>    <span class="token comment">//leetcode\u6700\u5FEB\u89E3\u6CD5</span>
    <span class="token comment">//.0:\u8BE5\u5143\u7D20\u5750\u6807,.1 \u76F8\u540C\u6570\u503C\u622A\u6B62\u5750\u6807</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">pre_prase</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//iter \u8F6Cvector</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> l <span class="token operator">=</span> <span class="token number">0_usize</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> r <span class="token operator">=</span> <span class="token number">0_usize</span><span class="token punctuation">;</span>

        <span class="token keyword">loop</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> l <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                r <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> l <span class="token operator">&gt;</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> r <span class="token operator">&gt;</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            l <span class="token operator">=</span> r<span class="token punctuation">;</span>
            r <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        result
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">longest_palindrome2</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> length <span class="token operator">=</span> chars<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//        println!(&quot;{:?}&quot;,chars);</span>

        <span class="token comment">// \u8FB9\u754C\u503C\u7684\u5904\u7406\u5F88\u5783\u573E\u3002\u3002\u3002</span>
        <span class="token keyword">match</span> length <span class="token punctuation">{</span>
            <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> s<span class="token punctuation">,</span>
            <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            _ <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//\u4EC0\u4E48\u90FD\u4E0D\u505A</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> cur_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0_usize</span><span class="token punctuation">,</span> <span class="token number">0_usize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> cur_len <span class="token operator">=</span> <span class="token number">0_usize</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> max_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0_usize</span><span class="token punctuation">,</span> <span class="token number">0_usize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> max_len <span class="token operator">=</span> <span class="token number">0_usize</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> poses <span class="token operator">=</span> <span class="token class-name">Solution</span><span class="token punctuation">::</span><span class="token function">pre_prase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;poses:{:?}&quot;</span><span class="token punctuation">,</span> poses<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> pos <span class="token keyword">in</span> poses <span class="token punctuation">{</span>
            <span class="token comment">// 1 2 3 4 5 6</span>
            <span class="token comment">//            i+=1;</span>

            cur_pos <span class="token operator">=</span> pos<span class="token punctuation">;</span>
            cur_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token comment">//\u4ECE\u5DE6\u53F3\u4E24\u8FB9,\u9009\u4E00\u4E2A\u77ED\u7684,\u8FD9\u6837\u4E5F\u4FDD\u8BC1\u4E86\u540E\u9762cur.pos.1+j,cur.pos.0-j\u90FD\u5728\u6709\u6548\u8303\u56F4\u4E4B\u5185</span>
            <span class="token keyword">let</span> ml <span class="token operator">=</span> <span class="token keyword">if</span> cur_pos<span class="token number">.0</span> <span class="token operator">&lt;</span> length <span class="token operator">-</span> cur_pos<span class="token number">.1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">{</span>
                cur_pos<span class="token number">.0</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                length <span class="token operator">-</span> cur_pos<span class="token number">.1</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> ml <span class="token operator">=</span> ml <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">//            println!(&quot;cur_pos {:?}, mml {}&quot;,cur_pos,ml);</span>
            <span class="token comment">//\u8FD9\u4E2A\u601D\u8DEF\u597D\u5904\u5C31\u662F\u4ED6\u5E76\u4E0D\u662F\u4EE5\u5B57\u7B26\u4E3A\u5355\u4F4D\u5411\u5DE6\u53F3\u5C55\u5F00,\u800C\u662F\u4EE5\u5B57\u7B26\u4E32\u4E3A\u5355\u4F4D\u5411\u5DE6\u53F3\u5C55\u5F00,\u8282\u7701\u4E86\u91CD\u590D\u904D\u5386\u7684\u65F6\u95F4</span>
            <span class="token comment">//\u76F8\u5F53\u4E8E\u4E00\u79CD\u6539\u8FDB\u7684\u4ECE\u4E2D\u95F4\u5411\u4E24\u8FB9\u6269\u5C55\u7684\u60C5\u5F62</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>ml <span class="token punctuation">{</span>
                <span class="token keyword">if</span> chars<span class="token punctuation">[</span>cur_pos<span class="token number">.1</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>cur_pos<span class="token number">.0</span> <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                    cur_len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token number">2</span> <span class="token operator">*</span> cur_len <span class="token operator">+</span> cur_pos<span class="token number">.1</span> <span class="token operator">-</span> cur_pos<span class="token number">.0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> max_len <span class="token operator">+</span> max_pos<span class="token number">.1</span> <span class="token operator">-</span> max_pos<span class="token number">.0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">{</span>
                max_len <span class="token operator">=</span> cur_len<span class="token punctuation">;</span>
                max_pos <span class="token operator">=</span> cur_pos<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//            println!(&quot;grow pos? {:?} len {}  {} &gt; {} &quot;,max_pos,max_len,cur_len + cur_pos.1 - cur_pos.0 + 1, max_len + max_pos.1 - max_pos.0 + 1);</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//        println!(&quot;res pos {:?} len {} &quot;,max_pos,max_len);</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> left <span class="token operator">=</span> max_pos<span class="token number">.0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> max_len<span class="token punctuation">;</span>
        <span class="token keyword">let</span> right <span class="token operator">=</span> max_pos<span class="token number">.1</span> <span class="token operator">+</span> max_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//        println!(&quot;left {} right {}&quot;,left,right);</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> left<span class="token punctuation">..</span>right <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u6709\u6CA1\u6709\u529E\u6CD5\u4E0D\u7528push,\u76F4\u63A5\u7528chars\u7684slice\u65B9\u5F0F\u5462?</span>
        <span class="token punctuation">}</span>
        v<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br></div></div><h2 id="\u4E00\u70B9\u611F\u609F" tabindex="-1">\u4E00\u70B9\u611F\u609F <a class="header-anchor" href="#\u4E00\u70B9\u611F\u609F" aria-hidden="true">#</a></h2><p>\u8FD9\u4E2A\u89E3\u6CD5\u662Fcopy\u81EAleetcode\u522B\u4EBA\u7684\u89E3\u6CD5, \u4ED6\u5E76\u4E0D\u4EE5\u5355\u4E2A\u5B57\u7B26\u4E3A\u5355\u4F4D\u8FDB\u884C\u6269\u5C55,\u800C\u662F\u4EE5\u5B57\u7B26\u4E32\u4E3A\u5355\u4F4D,\u7701\u53BB\u4E86\u5F88\u591A\u91CD\u590D\u7684\u5DE5\u4F5C. \u8FD9\u4E2A\u590D\u6742\u5EA6\u4F4E\u4E86\u5F88\u591A,\u6CA1\u6709\u660E\u786E\u7684\u8BC1\u660E\u8FC7\u7A0B,\u4F46\u662F\u611F\u89C9\u5E94\u8BE5\u662F\u5728O(N)\u590D\u6742\u5EA6,O(NlogN)\u6700\u591A</p><h2 id="\u5176\u4ED6" tabindex="-1">\u5176\u4ED6 <a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a></h2><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u7684<a href="https://github.com/nkbai" target="_blank" rel="noopener noreferrer">github</a>,\u672C\u9879\u76EE\u6587\u7AE0\u6240\u6709\u4EE3\u7801\u90FD\u53EF\u4EE5\u627E\u5230.</p>`,13),o=[e];function c(l,u,r,k,i,b){return a(),s("div",null,o)}var _=n(t,[["render",c]]);export{d as __pageData,_ as default};
