import{o as s,c as n,f as a,b as t,d as p,e}from"./app.cf442953.js";const l='{"title":"椭圆曲线签名算法原理","description":"","frontmatter":{},"headers":[{"level":2,"title":"title: \\"ECC签名中随机数不随机的危害\\"\\ndate: 2020-09-03T08:57:03+08:00\\ndraft: false\\nmarkup: mmark","slug":"title-ecc签名中随机数不随机的危害-date-2020-09-03t08-57-03-08-00draft-falsemarkup-mmark"},{"level":3,"title":"椭圆曲线签名算法原理","slug":"椭圆曲线签名算法原理"},{"level":3,"title":"go实现的签名","slug":"go实现的签名"},{"level":3,"title":"go实现的签名验证过程","slug":"go实现的签名验证过程"},{"level":3,"title":"使用了相同的随机数n,为什么能推出私钥","slug":"使用了相同的随机数n-为什么能推出私钥"},{"level":3,"title":"验证","slug":"验证"}],"relativePath":"区块链技术/ecc_signature_random.md","lastUpdated":1602742827000}',c={},o=t("hr",null,null,-1),u=t("h2",{id:"title-ecc签名中随机数不随机的危害-date-2020-09-03t08-57-03-08-00draft-falsemarkup-mmark"},[t("a",{class:"header-anchor",href:"#title-ecc签名中随机数不随机的危害-date-2020-09-03t08-57-03-08-00draft-falsemarkup-mmark","aria-hidden":"true"},"#"),p(' title: "ECC签名中随机数不随机的危害" date: 2020-09-03T08:57:03+08:00 draft: false markup: mmark')],-1),i=e('<ul><li><a href="#%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86">椭圆曲线签名算法原理</a></li><li><a href="#go%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AD%BE%E5%90%8D">go实现的签名</a></li><li><a href="#go%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81%E8%BF%87%E7%A8%8B">go实现的签名验证过程</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E4%BA%86%E7%9B%B8%E5%90%8C%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0n%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8E%A8%E5%87%BA%E7%A7%81%E9%92%A5">使用了相同的随机数n,为什么能推出私钥</a></li><li><a href="#%E9%AA%8C%E8%AF%81">验证</a></li></ul>',1),r=t("p",null,"如果使用了相同的随机数,为什么会泄露私钥.",-1),m=t("h3",{id:"椭圆曲线签名算法原理"},[t("a",{class:"header-anchor",href:"#椭圆曲线签名算法原理","aria-hidden":"true"},"#"),p(" 椭圆曲线签名算法原理")],-1),k=t("p",null,[p("假设私钥为k,那么公钥"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"K"),t("mo",null,"="),t("mi",null,"k"),t("mi",null,"G")]),t("annotation",{encoding:"application/x-tex"},"K=kG")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.69444em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mord mathnormal"},"G")])])]),p(",其中G为G点(就是椭圆曲线的公共参数,可以忽略). 签名的过程如下:")],-1),b=t("ol",null,[t("li",null,[p("选择随机数n,计算"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"P"),t("mo",null,"="),t("mi",null,"n"),t("mi",null,"G")]),t("annotation",{encoding:"application/x-tex"},"P=nG")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.68333em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal"},"n"),t("span",{class:"mord mathnormal"},"G")])])]),p(",P实际上就是曲线上的一个点")]),t("li",null,[p("计算"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"s"),t("mo",null,"="),t("mfrac",null,[t("mrow",null,[t("mi",null,"m"),t("mo",null,"+"),t("mi",null,"k"),t("mi",null,"r")]),t("mi",null,"n")])]),t("annotation",{encoding:"application/x-tex"},"s=\\frac {m+kr} n")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal"},"s"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1.2251079999999999em","vertical-align":"-0.345em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8801079999999999em"}},[t("span",{style:{top:"-2.6550000000000002em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight"},"n")])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.394em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight"},"m"),t("span",{class:"mbin mtight"},"+"),t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r")])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.345em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])])])]),p(",其中m就是公共信息,比如是一个以太坊交易的Hash值. 这里的r是P的x坐标.")]),t("li",null,"将消息m和签名{r,s}发送给接收方 接收方在事先知道公钥K的情况下,就很容易验证签名和m是否是对应关系. 验证签名的过程: 计算$\\frac {mG} s + \\frac {rK} s $,然后与nG比较,如果相等说明是对应关系.其中r是nG这个点的x坐标")],-1),h=t("p",null,"为什么这样可以呢,来看一下简单的推导过程:",-1),g=p(" \\begin{eqnarray} & \\frac {mG} s + \\frac {rK} s \\\\ =& \\frac {mG} s + \\frac {r(kG)} s \\\\ =& \\frac {(m+rk)G} s \\\\ =& \\frac {n(m+rk)G} {m+kr} \\\\ =& nG \\end{eqnarray} "),d=t("p",null,[t("strong",null,[p("注意: "),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"s"),t("mo",null,"="),t("mfrac",null,[t("mrow",null,[t("mi",null,"m"),t("mo",null,"+"),t("mi",null,"k"),t("mi",null,"r")]),t("mi",null,"n")])]),t("annotation",{encoding:"application/x-tex"},"s=\\frac {m+kr} n")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal"},"s"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1.2251079999999999em","vertical-align":"-0.345em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8801079999999999em"}},[t("span",{style:{top:"-2.6550000000000002em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight"},"n")])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.394em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight"},"m"),t("span",{class:"mbin mtight"},"+"),t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r")])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.345em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])])])])])],-1),y=e('<h3 id="go实现的签名"><a class="header-anchor" href="#go实现的签名" aria-hidden="true">#</a> go实现的签名</h3><p>以下代码来自<a href="https://github.com/btcsuite/btcd/blob/master/btcec/signature.go" target="_blank" rel="noopener noreferrer">btcd</a></p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// signRFC6979 generates a deterministic ECDSA signature according to RFC 6979 and BIP 62.</span>\n<span class="token keyword">func</span> <span class="token function">signRFC6979</span><span class="token punctuation">(</span>privateKey <span class="token operator">*</span>PrivateKey<span class="token punctuation">,</span> hash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Signature<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\tprivkey <span class="token operator">:=</span> privateKey<span class="token punctuation">.</span><span class="token function">ToECDSA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tN <span class="token operator">:=</span> <span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>N\n\thalfOrder <span class="token operator">:=</span> <span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>halfOrder\n\tk <span class="token operator">:=</span> <span class="token function">nonceRFC6979</span><span class="token punctuation">(</span>privkey<span class="token punctuation">.</span>D<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token comment">//这里的k对应的是上述公式中的n</span>\n\tinv <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ModInverse</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token comment">//n^(-1)</span>\n\tr<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> privkey<span class="token punctuation">.</span>Curve<span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//r是上述公式中的r,就是P的x坐标</span>\n\tr<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token comment">//r%N</span>\n\n\t<span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;calculated R is zero&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\te <span class="token operator">:=</span> <span class="token function">hashToInt</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> privkey<span class="token punctuation">.</span>Curve<span class="token punctuation">)</span> <span class="token comment">//这个e可以认为是代签名消息m,这里是将hash转换成一个256位的整数来参与计算</span>\n\ts <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>privkey<span class="token punctuation">.</span>D<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token comment">//s=rG</span>\n\ts<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token comment">// s=s+e</span>\n\ts<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> inv<span class="token punctuation">)</span> <span class="token comment">//s=s*(n^(-1))</span>\n\ts<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token comment">//s=s%N  这五行代码就是计算`$s=\\frac {m+kr} n$`</span>\n\n\t<span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>halfOrder<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> \n\t\ts<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">//s不能超过N/2</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;calculated S is zero&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token operator">&amp;</span>Signature<span class="token punctuation">{</span>R<span class="token punctuation">:</span> r<span class="token punctuation">,</span> S<span class="token punctuation">:</span> s<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="go实现的签名验证过程"><a class="header-anchor" href="#go实现的签名验证过程" aria-hidden="true">#</a> go实现的签名验证过程</h3><p>以下代码来自go标准库的crypto/ecdsa/ecdsa.go</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// Verify verifies the signature in r, s of hash using the public key, pub. Its</span>\n<span class="token comment">// return value records whether the signature is valid.</span>\n<span class="token keyword">func</span> <span class="token function">Verify</span><span class="token punctuation">(</span>pub <span class="token operator">*</span>PublicKey<span class="token punctuation">,</span> hash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> s <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// See [NSA] 3.4.2</span>\n\tc <span class="token operator">:=</span> pub<span class="token punctuation">.</span>Curve\n\tN <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>N\n\n\t<span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span>\n\t<span class="token punctuation">}</span>\n\te <span class="token operator">:=</span> <span class="token function">hashToInt</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n\n\t<span class="token keyword">var</span> w <span class="token operator">*</span>big<span class="token punctuation">.</span>Int\n\t<span class="token keyword">if</span> in<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span>invertible<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n\t\tw <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">Inverse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tw <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ModInverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> N<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\tu1 <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> w<span class="token punctuation">)</span>\n\tu1<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> N<span class="token punctuation">)</span>\n\tu2 <span class="token operator">:=</span> w<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> w<span class="token punctuation">)</span>\n\tu2<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>u2<span class="token punctuation">,</span> N<span class="token punctuation">)</span>\n\n\t<span class="token comment">// Check if implements S1*g + S2*p</span>\n\t<span class="token keyword">var</span> x<span class="token punctuation">,</span> y <span class="token operator">*</span>big<span class="token punctuation">.</span>Int\n\t<span class="token keyword">if</span> opt<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token punctuation">(</span>combinedMult<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n\t\tx<span class="token punctuation">,</span> y <span class="token operator">=</span> opt<span class="token punctuation">.</span><span class="token function">CombinedMult</span><span class="token punctuation">(</span>pub<span class="token punctuation">.</span>X<span class="token punctuation">,</span> pub<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> u1<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u2<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tx1<span class="token punctuation">,</span> y1 <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\tx2<span class="token punctuation">,</span> y2 <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ScalarMult</span><span class="token punctuation">(</span>pub<span class="token punctuation">.</span>X<span class="token punctuation">,</span> pub<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> u2<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\tx<span class="token punctuation">,</span> y <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span>\n\t<span class="token punctuation">}</span>\n\tx<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> N<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="使用了相同的随机数n-为什么能推出私钥"><a class="header-anchor" href="#使用了相同的随机数n-为什么能推出私钥" aria-hidden="true">#</a> 使用了相同的随机数n,为什么能推出私钥</h3><p>如果使用了相同的随机数n,那么签名中的{r,s}中的r肯定也是相同的,因为r是nG的x坐标. 那么来看看推到的过程.</p>',8),f=t("p",null,[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mrow",null,[t("msub",null,[t("mi",null,"s"),t("mn",null,"1")]),t("mo",null,"="),t("mfrac",null,[t("mrow",null,[t("msub",null,[t("mi",null,"m"),t("mn",null,"1")]),t("mo",null,"+"),t("mi",null,"k"),t("mi",null,"r")]),t("mi",null,"n")]),t("mspace",{linebreak:"newline"}),t("msub",null,[t("mi",null,"s"),t("mn",null,"2")]),t("mo",null,"="),t("mfrac",null,[t("mrow",null,[t("msub",null,[t("mi",null,"m"),t("mn",null,"2")]),t("mo",null,"+"),t("mi",null,"k"),t("mi",null,"r")]),t("mi",null,"n")]),t("mspace",{linebreak:"newline"}),t("msub",null,[t("mi",null,"s"),t("mn",null,"1")]),t("mo",null,"−"),t("msub",null,[t("mi",null,"s"),t("mn",null,"2")]),t("mo",null,"="),t("mfrac",null,[t("mrow",null,[t("msub",null,[t("mi",null,"m"),t("mn",null,"1")]),t("mo",null,"−"),t("msub",null,[t("mi",null,"m"),t("mn",null,"2")])]),t("mi",null,"n")]),t("mspace",{linebreak:"newline"}),t("mi",null,"n"),t("mo",null,"="),t("mfrac",null,[t("mrow",null,[t("msub",null,[t("mi",null,"m"),t("mn",null,"1")]),t("mo",null,"−"),t("msub",null,[t("mi",null,"m"),t("mn",null,"2")])]),t("mrow",null,[t("msub",null,[t("mi",null,"s"),t("mn",null,"1")]),t("mo",null,"−"),t("msub",null,[t("mi",null,"s"),t("mn",null,"2")])])])]),t("annotation",{encoding:"application/x-tex"},"s_1=\\frac {m_1+kr} n \\\\ s_2=\\frac {m_2+kr} n \\\\ s_1-s_2= \\frac {m_1-m_2} n \\\\ n=\\frac {m_1-m_2} {s_1-s_2} ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.58056em","vertical-align":"-0.15em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"s"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"1")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.05744em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.37144em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"n")])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"m"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"1")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mbin"},"+"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.58056em","vertical-align":"-0.15em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"s"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"2")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.05744em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.37144em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"n")])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"m"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"2")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mbin"},"+"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"s"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"1")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mbin"},"−"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.58056em","vertical-align":"-0.15em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"s"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"2")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1.9463300000000001em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.2603300000000002em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"n")])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"m"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"1")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mbin"},"−"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"m"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"2")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal"},"n"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.09633em","vertical-align":"-0.8360000000000001em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.2603300000000002em"}},[t("span",{style:{top:"-2.3139999999999996em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"s"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"1")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mbin"},"−"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"s"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"2")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])])])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"m"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"1")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])]),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mbin"},"−"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"m"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[t("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},"2")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.15em"}},[t("span")])])])])])])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8360000000000001em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])])])])])],-1),v=t("p",null,"有了n以后,那么来看一下k的计算过程:",-1),w=t("p",null,[t("span",{class:"katex-display"},[t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("semantics",null,[t("mrow",null,[t("mi",null,"s"),t("mo",null,"="),t("mfrac",null,[t("mrow",null,[t("mi",null,"m"),t("mo",null,"+"),t("mi",null,"k"),t("mi",null,"r")]),t("mi",null,"n")]),t("mspace",{linebreak:"newline"}),t("mi",null,"k"),t("mo",null,"="),t("mfrac",null,[t("mrow",null,[t("mi",null,"s"),t("mi",null,"n"),t("mo",null,"−"),t("mi",null,"m")]),t("mi",null,"r")])]),t("annotation",{encoding:"application/x-tex"},"s=\\frac {m+kr} n \\\\ k=\\frac {sn-m} r ")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal"},"s"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"2.05744em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.37144em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"n")])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"m"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mbin"},"+"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])]),t("span",{class:"mspace newline"}),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.69444em","vertical-align":"0em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1.9463300000000001em","vertical-align":"-0.686em"}}),t("span",{class:"mord"},[t("span",{class:"mopen nulldelimiter"}),t("span",{class:"mfrac"},[t("span",{class:"vlist-t vlist-t2"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"1.2603300000000002em"}},[t("span",{style:{top:"-2.314em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r")])]),t("span",{style:{top:"-3.23em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),t("span",{style:{top:"-3.677em"}},[t("span",{class:"pstrut",style:{height:"3em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"s"),t("span",{class:"mord mathnormal"},"n"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mbin"},"−"),t("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),t("span",{class:"mord mathnormal"},"m")])])]),t("span",{class:"vlist-s"},"​")]),t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.686em"}},[t("span")])])])]),t("span",{class:"mclose nulldelimiter"})])])])])])],-1),x=e('<h3 id="验证"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h3><p>也就是说,那怕只用了一次相同的k,私钥都会泄露.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;crypto/ecdsa&quot;</span>\n\t<span class="token string">&quot;crypto/elliptic&quot;</span>\n\t<span class="token string">&quot;encoding/hex&quot;</span>\n\t<span class="token string">&quot;errors&quot;</span>\n\t<span class="token string">&quot;log&quot;</span>\n\t<span class="token string">&quot;math/big&quot;</span>\n\t<span class="token string">&quot;testing&quot;</span>\n\n\t<span class="token string">&quot;github.com/btcsuite/btcd/btcec&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// hashToInt converts a hash value to an integer. There is some disagreement</span>\n<span class="token comment">// about how this is done. [NSA] suggests that this is done in the obvious</span>\n<span class="token comment">// manner, but [SECG] truncates the hash to the bit-length of the curve order</span>\n<span class="token comment">// first. We follow [SECG] because that&#39;s what OpenSSL does. Additionally,</span>\n<span class="token comment">// OpenSSL right shifts excess bits from the number if the hash is too large</span>\n<span class="token comment">// and we mirror that too.</span>\n<span class="token comment">// This is borrowed from crypto/ecdsa.</span>\n<span class="token keyword">func</span> <span class="token function">hashToInt</span><span class="token punctuation">(</span>hash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> c elliptic<span class="token punctuation">.</span>Curve<span class="token punctuation">)</span> <span class="token operator">*</span>big<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>\n\torderBits <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>N<span class="token punctuation">.</span><span class="token function">BitLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\torderBytes <span class="token operator">:=</span> <span class="token punctuation">(</span>orderBits <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span>\n\t<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">&gt;</span> orderBytes <span class="token punctuation">{</span>\n\t\thash <span class="token operator">=</span> hash<span class="token punctuation">[</span><span class="token punctuation">:</span>orderBytes<span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span>\n\n\tret <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>\n\texcess <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">-</span> orderBits\n\t<span class="token keyword">if</span> excess <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\tret<span class="token punctuation">.</span><span class="token function">Rsh</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">uint</span><span class="token punctuation">(</span>excess<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> ret\n<span class="token punctuation">}</span>\n\n<span class="token comment">// PrivKeyFromBytes returns a private and public key for `curve&#39; based on the</span>\n<span class="token comment">// private key passed as an argument as a byte slice.</span>\n<span class="token keyword">func</span> <span class="token function">privKeyFromBytes</span><span class="token punctuation">(</span>curve elliptic<span class="token punctuation">.</span>Curve<span class="token punctuation">,</span> pk <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">,</span>\n\t<span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tx<span class="token punctuation">,</span> y <span class="token operator">:=</span> curve<span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span>\n\n\tpriv <span class="token operator">:=</span> <span class="token operator">&amp;</span>ecdsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">{</span>\n\t\tPublicKey<span class="token punctuation">:</span> ecdsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">{</span>\n\t\t\tCurve<span class="token punctuation">:</span> curve<span class="token punctuation">,</span>\n\t\t\tX<span class="token punctuation">:</span>     x<span class="token punctuation">,</span>\n\t\t\tY<span class="token punctuation">:</span>     y<span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\tD<span class="token punctuation">:</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> priv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>priv<span class="token punctuation">.</span>PublicKey\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>hash1<span class="token punctuation">,</span> hash2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2 <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> pub <span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tc <span class="token operator">:=</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tm1 <span class="token operator">:=</span> <span class="token function">hashToInt</span><span class="token punctuation">(</span>hash1<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n\tm2 <span class="token operator">:=</span> <span class="token function">hashToInt</span><span class="token punctuation">(</span>hash2<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n\tss1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">{</span>s1<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>N<span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">}</span>\n\tss2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">{</span>s2<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>N<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">}</span>\n\t<span class="token comment">//这里这么处理是因为s1,s2有可能因为超过了N/2,而进行了N-s,这里只能进行四种组合测试.</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s1 <span class="token operator">=</span> <span class="token keyword">range</span> ss1 <span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token keyword">range</span> ss2 <span class="token punctuation">{</span>\n\t\t\ts <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>\n\t\t\tm <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> m2<span class="token punctuation">)</span>\n\t\t\ts <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">.</span>N<span class="token punctuation">)</span>\n\t\t\ts <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">ModInverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">.</span>N<span class="token punctuation">)</span>\n\t\t\tn <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> m<span class="token punctuation">)</span>\n\n\t\t\tk <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n\t\t\tk <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> m1<span class="token punctuation">)</span>\n\t\t\tr<span class="token punctuation">.</span><span class="token function">ModInverse</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">.</span>N<span class="token punctuation">)</span>\n\t\t\tk <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> r<span class="token punctuation">)</span>\n\t\t\tk <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> c<span class="token punctuation">.</span>N<span class="token punctuation">)</span>\n\t\t\tlog<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;k=%s&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t<span class="token comment">//通过k来生成公钥,如果匹配,说明私钥正确</span>\n\t\t\tpriv<span class="token punctuation">,</span> pub2 <span class="token operator">:=</span> <span class="token function">privKeyFromBytes</span><span class="token punctuation">(</span>btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">if</span> pub2<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>pub<span class="token punctuation">.</span>X<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pub2<span class="token punctuation">.</span>Y<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>pub<span class="token punctuation">.</span>Y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> priv<span class="token punctuation">,</span> <span class="token boolean">nil</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;not found private key&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/*\nprivkey=eaf02ca348c524e6392655ba4d29603cd1a7347d9d65cfe93ce1ebffdca22694\npubkey=045ceeba2ab4a635df2c0301a3d773da06ac5a18a7c3e0d09a795d7e57d233edf1001aa641732e6a703be89a7fb8568df05675111fcddd519e0cc6c2dd72cd73f8\nhash1=00010203040506070809 sig1 r=e8f0817ae1ad2c1c35770dc8fff5f0ed513769e39e2af6e8e0b4f42e5a60251d,s=2c77219de3f968d38434e89a68428c1c30892e891e02708849137ebb61301794\nhash2=00010203040506070810 sig2 r=e8f0817ae1ad2c1c35770dc8fff5f0ed513769e39e2af6e8e0b4f42e5a60251d,s=344d47eb5b12343bdc8f80eed6c910f2b543359b1373b7dabac1ba2658d23906\n尝试通过相同的r来恢复私钥\n*/</span>\n<span class="token keyword">func</span> <span class="token function">TestGetPrivkey</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tc <span class="token operator">:=</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tpubkeybin<span class="token punctuation">,</span> err <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span><span class="token string">&quot;045ceeba2ab4a635df2c0301a3d773da06ac5a18a7c3e0d09a795d7e57d233edf1001aa641732e6a703be89a7fb8568df05675111fcddd519e0cc6c2dd72cd73f8&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\tpub<span class="token punctuation">,</span> err <span class="token operator">:=</span> btcec<span class="token punctuation">.</span><span class="token function">ParsePubKey</span><span class="token punctuation">(</span>pubkeybin<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;privkey: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\thash1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">}</span>\n\thash2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">}</span>\n\ts1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;2c77219de3f968d38434e89a68428c1c30892e891e02708849137ebb61301794&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>\n\ts2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;344d47eb5b12343bdc8f80eed6c910f2b543359b1373b7dabac1ba2658d23906&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>\n\tr1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;e8f0817ae1ad2c1c35770dc8fff5f0ed513769e39e2af6e8e0b4f42e5a60251d&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>\n\tpriv<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>hash1<span class="token punctuation">,</span> hash2<span class="token punctuation">,</span> r1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> pub<span class="token punctuation">.</span><span class="token function">ToECDSA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tlog<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;priv=%s&quot;</span><span class="token punctuation">,</span> priv<span class="token punctuation">.</span>D<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br></div></div>',3);c.render=function(t,p,e,l,c,E){return s(),n("div",null,[o,u,a(' @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} '),a(" code_chunk_output "),i,a(" /code_chunk_output "),r,m,k,b,h,g,d,y,f,v,w,x])};export{l as __pageData,c as default};
