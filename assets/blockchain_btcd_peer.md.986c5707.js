import{_ as s,c as n,o as e,N as a}from"./chunks/framework.3a9190c5.js";const u=JSON.parse('{"title":"peer","description":"","frontmatter":{"title":"peer","date":"2018-11-30T04:24:21.000Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/btcd/peer.md"}'),p={name:"blockchain/btcd/peer.md"},l=a(`<h1 id="peer模块" tabindex="-1">peer模块 <a class="header-anchor" href="#peer模块" aria-label="Permalink to &quot;peer模块&quot;">​</a></h1><p>peer模块主要是管理连接用的</p><p>看完peer模块,没啥感觉</p><p>peer主要是负责连接建立,然后进行一些基本的认证.</p><p>一个peer实际上就是一个一对一的连接, 如果是我主动与对方建立的连接,那么这个peer在我这里就是outbound peer. 如果是对方主动和我建立的连接,那么就是一个 inbound peer.</p><p>peer真正的使用者是btcd/server.go,哪里对一组peer进行管理.</p><p>这里的peer做的就是负责具体的发送消息,收到消息以后通过特定的接口通知上层(MessageListeners).</p><p>还有就是peer处理了连接并发操作问题,流量统计,连接保持(keep alive)等.</p><p>内部关键结构</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// MessageListeners 负责如何处理收到的消息</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Config 是对peer的配置,创建时指定.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Peer 这是最重要的,也是对外服务的出入口.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 最重要的导出函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// NewInboundPeer returns a new inbound bitcoin peer. Use Start to begin</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// processing incoming and outgoing messages.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewInboundPeer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cfg </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Config</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Peer </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// NewOutboundPeer returns a new outbound bitcoin peer.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewOutboundPeer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cfg </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Config</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> addr </span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">Peer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>\\alpha \\Alpha \\\\ \\beta \\Beta \\\\ \\gamma \\Gamma \\\\ `,11),o=[l];function r(t,c,i,y,D,b){return e(),n("div",null,o)}const A=s(p,[["render",r]]);export{u as __pageData,A as default};
