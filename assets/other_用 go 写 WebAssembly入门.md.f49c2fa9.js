import{o as n,c as s,e as a}from"./app.a3c21c0d.js";const t='{"title":"用 go 写 WebAssembly入门","description":"","frontmatter":{"title":"用 go 写 WebAssembly入门","date":"2018-09-07T01:14:10.000Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"1. 浏览器中运行 Go","slug":"_1-浏览器中运行-go"},{"level":3,"title":"1.1 code","slug":"_1-1-code"},{"level":3,"title":"1.2 编译","slug":"_1-2-编译"},{"level":3,"title":"1.3 运行","slug":"_1-3-运行"},{"level":2,"title":"2. node中运行 wasm","slug":"_2-node中运行-wasm"},{"level":2,"title":"3. 其他例子","slug":"_3-其他例子"},{"level":3,"title":"3.1 bouncy","slug":"_3-1-bouncy"},{"level":3,"title":"3.2 ranbow-mouse","slug":"_3-2-ranbow-mouse"},{"level":3,"title":"3.3 bumpy","slug":"_3-3-bumpy"}],"relativePath":"other/用 go 写 WebAssembly入门.md","lastUpdated":1641604782000}',p={},e=[a('<h1 id="golang-webassembly-入门"><a class="header-anchor" href="#golang-webassembly-入门" aria-hidden="true">#</a> Golang WebAssembly 入门</h1><p>Golang 在1.11版本中引入了 WebAssembly 支持,意味着以后可以用 go编写可以在浏览器中运行的程序,当然这个肯定也是要受浏览器沙盒环境约束的.</p><h2 id="_1-浏览器中运行-go"><a class="header-anchor" href="#_1-浏览器中运行-go" aria-hidden="true">#</a> 1. 浏览器中运行 Go</h2><h3 id="_1-1-code"><a class="header-anchor" href="#_1-1-code" aria-hidden="true">#</a> 1.1 code</h3><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">package</span> main\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, WebAssembly!&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_1-2-编译"><a class="header-anchor" href="#_1-2-编译" aria-hidden="true">#</a> 1.2 编译</h3><p>必须是 go1.11才行</p><div class="language-"><pre><code>GOARCH=wasm GOOS=js go build -o test.wasm main.go\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h3 id="_1-3-运行"><a class="header-anchor" href="#_1-3-运行" aria-hidden="true">#</a> 1.3 运行</h3><p>单独的 wasm 文件是无法直接运行的,必须载入浏览器中.</p><div class="language-shell line-numbers-mode"><pre><code><span class="token function">mkdir</span> <span class="token builtin class-name">test</span>\n<span class="token function">cp</span> test.wasm <span class="token builtin class-name">test</span>\n<span class="token function">cp</span> <span class="token variable">$GOROOT</span>/misc/wasm/wasm_exec.<span class="token punctuation">{</span>html,js<span class="token punctuation">}</span> <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-3-1-一个测试-http-服务器"><a class="header-anchor" href="#_1-3-1-一个测试-http-服务器" aria-hidden="true">#</a> 1.3.1 一个测试 http 服务器</h4><p>chrome 是不支持本地文件中运行 wasm 的,所以必须有一个 http 服务器</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">//http.go</span>\n<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;flag&quot;</span>\n\t<span class="token string">&quot;log&quot;</span>\n\t<span class="token string">&quot;net/http&quot;</span>\n\t<span class="token string">&quot;strings&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">(</span>\n\tlisten <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;listen&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;listen address&quot;</span><span class="token punctuation">)</span>\n\tdir    <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;dir&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;directory to serve&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tflag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;listening on %q...&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>listen<span class="token punctuation">)</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token operator">*</span>listen<span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>resp http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> <span class="token string">&quot;.wasm&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tresp<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/wasm&quot;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\thttp<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token operator">*</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> req<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_1-3-2-http-go"><a class="header-anchor" href="#_1-3-2-http-go" aria-hidden="true">#</a> 1.3.2 http.go</h4><div class="language-shell line-numbers-mode"><pre><code><span class="token function">mv</span> http.go <span class="token builtin class-name">test</span>\n<span class="token builtin class-name">cd</span> <span class="token builtin class-name">test</span>\ngo run http.go \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-4-效果"><a class="header-anchor" href="#_1-4-效果" aria-hidden="true">#</a> 1.4 效果</h4><p>在浏览器中打开http://localhost:8080/wasm_exec.html,点击 run 按钮,可以在控制台看到 Hello, WebAssembly!字符串</p><h2 id="_2-node中运行-wasm"><a class="header-anchor" href="#_2-node中运行-wasm" aria-hidden="true">#</a> 2. node中运行 wasm</h2><p>这个更直接</p><div class="language-"><pre><code>node wasm_exec.js test.wasm\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>就可以在控制台看到Hello, WebAssembly!字符串了.</p><h2 id="_3-其他例子"><a class="header-anchor" href="#_3-其他例子" aria-hidden="true">#</a> 3. 其他例子</h2><p>在<a href="https://github.com/stdiopt/gowasm-experiments" target="_blank" rel="noopener noreferrer"> example</a>中可以看到更多例子</p><h3 id="_3-1-bouncy"><a class="header-anchor" href="#_3-1-bouncy" aria-hidden="true">#</a> 3.1 bouncy</h3><p><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201809/124391-20180907090933841-1091730982.png" loading="lazy" class="lazy"></p><h3 id="_3-2-ranbow-mouse"><a class="header-anchor" href="#_3-2-ranbow-mouse" aria-hidden="true">#</a> 3.2 ranbow-mouse</h3><p>会跟着鼠标画出彩虹图案,挺好看的 <img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201809/124391-20180907091057014-1717034536.png" loading="lazy" class="lazy"></p><h3 id="_3-3-bumpy"><a class="header-anchor" href="#_3-3-bumpy" aria-hidden="true">#</a> 3.3 bumpy</h3><p>可以画一些自定义的形状,形状不同,落地效果不同.球就会反弹,三角形就不会.不过都摔不坏,不会变形,这点不够真实 <img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201809/124391-20180907091344841-321938760.png" loading="lazy" class="lazy"></p>',30)];p.render=function(a,t,p,o,l,c){return n(),s("div",null,e)};export{t as __pageData,p as default};
