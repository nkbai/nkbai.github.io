import{o as n,c as s,e as a}from"./app.f8197458.js";const p='{"title":"learningPythonV4","description":"","frontmatter":{"title":"learningPythonV4","date":"2018-10-08T09:48:12.000Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"基础部分","slug":"基础部分"},{"level":3,"title":"1. list","slug":"_1-list"},{"level":3,"title":"2. 字典","slug":"_2-字典"},{"level":3,"title":"3.python的类型层次","slug":"_3-python的类型层次"},{"level":3,"title":"4. python运算符重载","slug":"_4-python运算符重载"},{"level":2,"title":"类","slug":"类"}],"relativePath":"other/learningPythonV4.md","lastUpdated":1572871231000}',t={},e=[a('<h1 id="python学习手册第四版学习笔记"><a class="header-anchor" href="#python学习手册第四版学习笔记" aria-hidden="true">#</a> python学习手册第四版学习笔记</h1><h2 id="基础部分"><a class="header-anchor" href="#基础部分" aria-hidden="true">#</a> 基础部分</h2><h3 id="_1-list"><a class="header-anchor" href="#_1-list" aria-hidden="true">#</a> 1. list</h3><p><img alt="列表" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121746356-1567322406.png" loading="lazy" class="lazy"></p><h3 id="_2-字典"><a class="header-anchor" href="#_2-字典" aria-hidden="true">#</a> 2. 字典</h3><p><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121814420-1078075977.png" loading="lazy" class="lazy"></p><h3 id="_3-python的类型层次"><a class="header-anchor" href="#_3-python的类型层次" aria-hidden="true">#</a> 3.python的类型层次</h3><p><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121837926-1026810780.png" loading="lazy" class="lazy"></p><h3 id="_4-python运算符重载"><a class="header-anchor" href="#_4-python运算符重载" aria-hidden="true">#</a> 4. python运算符重载</h3><p><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121906516-924222475.png" loading="lazy" class="lazy"><img alt="" data-src="https://img2018.cnblogs.com/blog/124391/201810/124391-20181008121917580-1602821280.png" loading="lazy" class="lazy"></p><h2 id="类"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><ol><li>__slots属性 类中的这个属性主要是用来限制类的实例不能任意新增属性,只有在列表中的有效, 如果想制定了slots属性以后,实例还可以新增属性,可以按照下面的方式来写</li></ol><div class="language-python line-numbers-mode"><pre><code><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">:</span>\n    __slots__  <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;__dict__&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>装饰器 装饰器都是一个类,每次使用,都相当于一次实例化. 比如</li></ol><div class="language-python line-numbers-mode"><pre><code><span class="token keyword">class</span> <span class="token class-name">tracer</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>calls <span class="token operator">=</span> <span class="token number">0</span>\n        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func\n\n    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>calls <span class="token operator">+=</span> <span class="token number">1</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;call %s to %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>calls<span class="token punctuation">,</span> self<span class="token punctuation">.</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-python line-numbers-mode"><pre><code><span class="token decorator annotation punctuation">@tracer</span>\n<span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>\n<span class="token comment">#等效代码</span>\n<span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>\nspam<span class="token operator">=</span>tracer<span class="token punctuation">(</span>spam<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因此spam(3,4,5)调用实际上调用的是tracer实例的__call__</p><ol start="3"><li>描述符 因为Python是一个动态类型解释性语言，不像C/C++等静态编译型语言，数据类型在编译时便可以进行验证，而Python中必须添加额外的类型检查逻辑代码才能做到这一点，这就是描述符的初衷。比如，有一个测试类Test，其具有一个类属性name。</li></ol><div class="language-python line-numbers-mode"><pre><code><span class="token keyword">class</span> <span class="token class-name">name_des</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> <span class="token boolean">None</span>\n    <span class="token keyword">def</span>  <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;call __get__&#39;</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name\n    <span class="token keyword">def</span>  <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;call __set__&#39;</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span>  <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span>__name <span class="token operator">=</span> value\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">&quot;Must be an string&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    name <span class="token operator">=</span> name_des<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>那么执行t.name=3将会报错,这就是描述符的作用,</p><ol start="4"><li>属性查找设置伪代码</li></ol><div class="language-python line-numbers-mode"><pre><code>__getattribute__伪代码：\n   __getattribute__<span class="token punctuation">(</span><span class="token builtin">property</span><span class="token punctuation">)</span> logic<span class="token punctuation">:</span>\n  <span class="token comment">#先在类(包括父类、祖先类)的__dict__属性中查找描述符</span>\n  descripter <span class="token operator">=</span> find first descripter <span class="token keyword">in</span> <span class="token keyword">class</span> <span class="token class-name">and</span> bases&#39;s <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">property</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> descripter<span class="token punctuation">:</span><span class="token comment">#如果找到属性并且是数据描述符，就直接调用该数据描述符的__get__方法并将结果返回</span>\n      <span class="token keyword">return</span> descripter<span class="token punctuation">.</span>__get__<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>\n  <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment">#如果没有找到或者不是数据描述符，就去实例的__dict__属性中查找属性，如果找到了就直接返回这个属性值</span>\n      <span class="token keyword">if</span> value <span class="token keyword">in</span> instance<span class="token punctuation">.</span>__dict__\n          <span class="token keyword">return</span> value\n      <span class="token comment">#程序执行到这里，说明没有数据描述符和实例属性，则在类(父类、祖先类)的__dict__属性中查找非数据描述符</span>\n      value <span class="token operator">=</span> find first value <span class="token keyword">in</span> <span class="token keyword">class</span> <span class="token class-name">and</span> bases&#39;s <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">property</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> value <span class="token keyword">is</span> a function<span class="token punctuation">:</span><span class="token comment">#如果找到了并且这个属性是一个函数，就返回绑定后的函数</span>\n         <span class="token keyword">return</span> bounded function<span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n      <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment">#否则就直接返回这个属性值</span>\n         <span class="token keyword">return</span> value\n <span class="token comment">#程序执行到这里说明没有找到该属性，引发异常，__getattr__函数会被调用</span>\n <span class="token keyword">raise</span> AttributeNotFundedException\n\n __setattr__伪代码：\n __setattr__<span class="token punctuation">(</span><span class="token builtin">property</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>logic<span class="token punctuation">:</span>\n <span class="token comment">#先在类(包括父类、祖先类)的__dict__属性中查找描述符</span>\n descripter <span class="token operator">=</span> find first descripter <span class="token keyword">in</span> <span class="token keyword">class</span> <span class="token class-name">and</span> bases&#39;s <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">property</span><span class="token punctuation">)</span>\n <span class="token keyword">if</span> descripter<span class="token punctuation">:</span><span class="token comment">#如果找到了且是数据描述符，就调用描述符的__set__方法</span>\n     descripter<span class="token punctuation">.</span>__set__<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment">#否则就是给实例属性赋值</span>\n     instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span><span class="token builtin">property</span><span class="token punctuation">]</span> <span class="token operator">=</span> value\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ol start="5"><li>property</li></ol><div class="language-python line-numbers-mode"><pre><code><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n　<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n　　self<span class="token punctuation">.</span>__x<span class="token operator">=</span><span class="token boolean">None</span>\n　\n　@<span class="token builtin">property</span>\n　<span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n　　<span class="token keyword">return</span> self<span class="token punctuation">.</span>__x\n　@x<span class="token punctuation">.</span>setter\n　<span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n　　self<span class="token punctuation">.</span>__x<span class="token operator">=</span>value\n　@x<span class="token punctuation">.</span>deleter\n　<span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n　　<span class="token keyword">del</span> self<span class="token punctuation">.</span>__x\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>用例</p><div class="language-python line-numbers-mode"><pre><code>t<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">#会调用def x(self)</span>\nt<span class="token punctuation">.</span>x\n<span class="token comment">#会调用def x(self,value)</span>\nt<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token number">3</span>\n<span class="token comment">#会调用def x(self)</span>\n<span class="token keyword">del</span> t<span class="token punctuation">.</span>x\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',26)];t.render=function(a,p,t,l,c,o){return n(),s("div",null,e)};export{p as __pageData,t as default};
