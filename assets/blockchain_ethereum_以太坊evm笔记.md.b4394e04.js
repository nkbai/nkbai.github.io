import{_ as n,c as s,o as a,a as t}from"./app.1b76eb5d.js";const d='{"title":"\u4EE5\u592A\u574Aevm\u7B14\u8BB0","description":"","frontmatter":{"title":"\u4EE5\u592A\u574Aevm\u7B14\u8BB0","date":"2019-04-26T06:58:56.834Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"EVM\u7684\u6307\u4EE4","slug":"evm\u7684\u6307\u4EE4"},{"level":3,"title":"\u6307\u4EE4\u7684\u5206\u53C9","slug":"\u6307\u4EE4\u7684\u5206\u53C9"},{"level":3,"title":"\u6307\u4EE4\u76F8\u5173\u6587\u4EF6","slug":"\u6307\u4EE4\u76F8\u5173\u6587\u4EF6"},{"level":2,"title":"EVM\u7684\u521B\u5EFA\u4EE5\u53CA\u5408\u7EA6\u51FD\u6570\u6267\u884C","slug":"evm\u7684\u521B\u5EFA\u4EE5\u53CA\u5408\u7EA6\u51FD\u6570\u6267\u884C"},{"level":3,"title":"\u5185\u7F6E\u5408\u7EA6","slug":"\u5185\u7F6E\u5408\u7EA6"},{"level":2,"title":"\u5176\u4ED6","slug":"\u5176\u4ED6"},{"level":3,"title":"int pool","slug":"int-pool"},{"level":3,"title":"stack\u7BA1\u7406","slug":"stack\u7BA1\u7406"},{"level":2,"title":"\u6307\u4EE4\u6267\u884C \u63D0\u7EB2\u6308\u9886","slug":"\u6307\u4EE4\u6267\u884C-\u63D0\u7EB2\u6308\u9886"},{"level":3,"title":"EVM\u6307\u4EE4\u6267\u884C\u7684\u5165\u53E3","slug":"evm\u6307\u4EE4\u6267\u884C\u7684\u5165\u53E3"},{"level":3,"title":"Interpreter","slug":"interpreter"}],"relativePath":"blockchain/ethereum/\u4EE5\u592A\u574Aevm\u7B14\u8BB0.md"}',p={},e=t(`<h1 id="\u9605\u8BFB\u4EE5\u592A\u574Aevm\u7684\u4E00\u4E9B\u7B14\u8BB0" tabindex="-1">\u9605\u8BFB\u4EE5\u592A\u574AEVM\u7684\u4E00\u4E9B\u7B14\u8BB0 <a class="header-anchor" href="#\u9605\u8BFB\u4EE5\u592A\u574Aevm\u7684\u4E00\u4E9B\u7B14\u8BB0" aria-hidden="true">#</a></h1><h2 id="evm\u7684\u6307\u4EE4" tabindex="-1">EVM\u7684\u6307\u4EE4 <a class="header-anchor" href="#evm\u7684\u6307\u4EE4" aria-hidden="true">#</a></h2><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">type</span> operation <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// op is the operation function</span>
	execute executionFunc
	<span class="token comment">// gasCost is the gas function and returns the gas required for execution</span>
	gasCost gasFunc
	<span class="token comment">// validateStack validates the stack (size) for the operation</span>
	validateStack stackValidationFunc
	<span class="token comment">// memorySize returns the memory size required for the operation</span>
	memorySize memorySizeFunc

	halts   <span class="token builtin">bool</span> <span class="token comment">// indicates whether the operation should halt further execution</span>
	jumps   <span class="token builtin">bool</span> <span class="token comment">// indicates whether the program counter should not increment</span>
	writes  <span class="token builtin">bool</span> <span class="token comment">// determines whether this a state modifying operation</span>
	valid   <span class="token builtin">bool</span> <span class="token comment">// indication whether the retrieved operation is valid and known</span>
	reverts <span class="token builtin">bool</span> <span class="token comment">// determines whether the operation reverts state (implicitly halts)</span>
	returns <span class="token builtin">bool</span> <span class="token comment">// determines whether the operations sets the return data content</span>
	<span class="token comment">//\u76EE\u524D\u53EF\u4EE5\u8FD4\u56DE\u6570\u636E\u7684\u6307\u4EE4\u6709opCreate,opCall,opDelegateCall,opStaticCall,opCallCode</span>
	<span class="token comment">//\u53E6\u5916\u4E00\u4E2A\u5C31\u662FopRevert,\u8FD9\u4E2A\u5E94\u8BE5\u662F\u4E3A\u4E86\u65B9\u4FBF\u8C03\u8BD5,revert(&quot;debug info&quot;)/ \u77E5\u9053\u5728\u54EA\u91CC\u51FA\u95EE\u9898\u4E86.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>\u6240\u6709\u7684\u6307\u4EE4\u90FD\u5C01\u88C5\u6210\u8FD9\u4E2Aoperation\u7ED3\u6784\u4F53, \u6BD4\u5982</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// NewFrontierInstructionSet returns the frontier instructions</span>
<span class="token comment">// that can be executed during the frontier phase.</span>
<span class="token keyword">func</span> <span class="token function">NewFrontierInstructionSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span>operation <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span>operation<span class="token punctuation">{</span>
        STOP<span class="token punctuation">:</span> <span class="token punctuation">{</span>
			execute<span class="token punctuation">:</span>       opStop<span class="token punctuation">,</span>
			gasCost<span class="token punctuation">:</span>       <span class="token function">constGasFunc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			validateStack<span class="token punctuation">:</span> <span class="token function">makeStackFunc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			halts<span class="token punctuation">:</span>         <span class="token boolean">true</span><span class="token punctuation">,</span>
			valid<span class="token punctuation">:</span>         <span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		ADD<span class="token punctuation">:</span> <span class="token punctuation">{</span>
			execute<span class="token punctuation">:</span>       opAdd<span class="token punctuation">,</span>
			gasCost<span class="token punctuation">:</span>       <span class="token function">constGasFunc</span><span class="token punctuation">(</span>GasFastestStep<span class="token punctuation">)</span><span class="token punctuation">,</span>
			validateStack<span class="token punctuation">:</span> <span class="token function">makeStackFunc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			valid<span class="token punctuation">:</span>         <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
        <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u6267\u884C\u6307\u4EE4\u7684\u662Fexecute,\u8BA1\u7B97gas\u82B1\u8D39\u7684\u662FgasCost, \u8BA1\u7B97\u6307\u4EE4\u5185\u5B58\u4F7F\u7528\u7684\u662FmemorySize, \u5728\u6267\u884C\u6307\u4EE4\u4E4B\u524D\u6821\u9A8Cstack\u7684\u662FvalidateStack \u5176\u4E2Dexecute,gasCost\u548CvalidateStack \u5FC5\u6709.</p><h3 id="\u6307\u4EE4\u7684\u5206\u53C9" tabindex="-1">\u6307\u4EE4\u7684\u5206\u53C9 <a class="header-anchor" href="#\u6307\u4EE4\u7684\u5206\u53C9" aria-hidden="true">#</a></h3><p>\u5728jump_table.go \u4E2D,\u53EF\u4EE5\u901A\u8FC7\u4F7F\u7528\u4E0D\u540C\u7684table,\u8BA9\u4E0D\u540C\u7684\u5206\u53C9\u53EF\u4EE5\u4F7F\u7528\u6709\u4E9B\u7EC6\u5FAE\u5DEE\u5F02\u7684\u6307\u4EE4\u96C6.</p><div class="language-go line-numbers-mode"><pre><code>
<span class="token keyword">var</span> <span class="token punctuation">(</span>
	frontierInstructionSet  <span class="token operator">=</span> <span class="token function">NewFrontierInstructionSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	homesteadInstructionSet <span class="token operator">=</span> <span class="token function">NewHomesteadInstructionSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	byzantiumInstructionSet <span class="token operator">=</span> <span class="token function">NewByzantiumInstructionSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="\u6307\u4EE4\u76F8\u5173\u6587\u4EF6" tabindex="-1">\u6307\u4EE4\u76F8\u5173\u6587\u4EF6 <a class="header-anchor" href="#\u6307\u4EE4\u76F8\u5173\u6587\u4EF6" aria-hidden="true">#</a></h3><p>instructions.go\u4E2D\u7ED9\u51FA\u6240\u6709\u6307\u4EE4\u7684execute gas_table.go \u7ED9\u51FA\u6240\u6709\u6307\u4EE4\u8BA1\u7B97gas\u7684\u65B9\u6CD5 memory_table.go\u7ED9\u51FA\u6240\u6709\u9700\u8981\u8BA1\u7B97memory\u5360\u7528\u7684\u6307\u4EE4,\u4EE5\u53CA\u8BA1\u7B97\u65B9\u6CD5.</p><h2 id="evm\u7684\u521B\u5EFA\u4EE5\u53CA\u5408\u7EA6\u51FD\u6570\u6267\u884C" tabindex="-1">EVM\u7684\u521B\u5EFA\u4EE5\u53CA\u5408\u7EA6\u51FD\u6570\u6267\u884C <a class="header-anchor" href="#evm\u7684\u521B\u5EFA\u4EE5\u53CA\u5408\u7EA6\u51FD\u6570\u6267\u884C" aria-hidden="true">#</a></h2><p>\u4F4D\u4E8Eevm.go\u4E2D,\u6B64\u90E8\u5206\u662FEVM\u7684\u6838\u5FC3,\u5305\u542B\u4E86\u5982\u4F55\u521B\u5EFAevm\u5B9E\u4F8B,\u4EE5\u53CA\u51E0\u4E2A\u5408\u7EA6\u7684\u8C03\u7528\u65B9\u5F0F: call,staticcall,delegatecall,callcode</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">/*
caller:\u5408\u7EA6\u4E2D\u7684msg.sender
\u5982\u679C\u662F\u5916\u90E8\u5408\u7EA6\u8C03\u7528,\u5219\u662FTX\u4E2D\u7684From,\u5426\u5219\u5219\u662F\u8C03\u7528\u5176\u4ED6\u5408\u7EA6\u7684\u5408\u7EA6\u5730\u5740
addr: \u88AB\u8C03\u7528\u5408\u7EA6\u7684\u5730\u5740
 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">,</span> value <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> 
<span class="token comment">/*
2. CallCode\u4E3B\u8981\u662F\u670D\u52A1\u4E8Elibrary,\u5047\u8BBE\u5982\u4E0B\u8C03\u7528
\u8D26\u6237A\u8C03\u7528ContractA\u7684FA,\u7136\u540EFA\u8C03\u7528Library B\u7684FB,\u8FD9\u65F6\u5019\u5728FB\u4E2D\u770B\u5230\u7684msg.sender\u662FContractA,value\u662F\u7531\u8C03\u7528FB\u7684\u65F6\u5019\u6307\u5B9A\u7684.
 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">CallCode</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">,</span> value <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> 
<span class="token comment">/*
3. DelegateCall \u662FCallCode\u7684\u5347\u7EA7,\u4E5F\u662F\u670D\u52A1\u4E8ELibrary,\u5047\u8BBE\u8C03\u7528\u5982\u4E0B:
\u8D26\u6237A\u8C03\u7528ContractA\u7684FA,\u7136\u540EFA\u8C03\u7528Library B\u7684FB,\u8FD9\u65F6\u5019\u5728FB\u4E2D\u770B\u5230\u7684msg.sender\u662FA,value\u662F\u7531A\u8C03\u7528FA\u7684\u65F6\u5019\u6307\u5B9A\u7684
 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">DelegateCall</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> 
<span class="token comment">/*
4. StaticCall \u7528\u4E8E\u67E5\u8BE2\u5408\u7EA6.\u4FDD\u8BC1\u8BE5\u8C03\u7528\u6267\u884C\u8FC7\u7A0B\u4E2D\u5408\u7EA6\u72B6\u6001\u4E0D\u88AB\u4FEE\u6539.
\u7528\u6237\u76F4\u63A5\u53D1\u8D77\u7684\u67E5\u8BE2\u6216\u8005\u5728\u5408\u7EA6\u8C03\u7528\u4E2D(\u6BD4\u5982\u521A\u521A\u7684FA),\u8BFB\u53D6\u67E5\u8BE2\u5408\u7EA6\u7684\u72B6\u6001.
\u76EE\u524Dsolidity\u5E76\u6CA1\u6709\u751F\u6210\u8BE5\u6307\u4EE4,\u5C31\u7B97\u662F\u5BF9\u4E8E\u53EA\u8BFB\u7684\u5408\u7EA6\u8BBF\u95EE,\u4E5F\u662F\u751F\u6210call\u6307\u4EE4\u800C\u4E0D\u662Fstaticcall
\u5728\u62DC\u5360\u5EAD\u5206\u53C9\u4EE5\u540E\u624D\u4F1A\u652F\u6301staticcall\u6307\u4EE4.
 */</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">StaticCall</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="\u5185\u7F6E\u5408\u7EA6" tabindex="-1">\u5185\u7F6E\u5408\u7EA6 <a class="header-anchor" href="#\u5185\u7F6E\u5408\u7EA6" aria-hidden="true">#</a></h3><p>\u5BF9\u4E8E\u4E00\u4E9B\u5E38\u7528\u7684\u64CD\u4F5C,\u6BD4\u5982ecrecover,\u5E76\u6CA1\u6709\u4E13\u7528\u7684\u6307\u4EE4\u96C6,\u4ED6\u5B9E\u9645\u4E0A\u662F\u901A\u8FC7\u4E00\u4E9B\u5185\u7F6E\u7684\u5408\u7EA6\u6765\u8FDB\u884C\u652F\u6301\u7684. \u4E0B\u9762\u662F\u76EE\u524D\u5185\u7F6E\u7684\u51E0\u4E2A\u5408\u7EA6ecrecover,sha256hash,ripemd160hash\u548CdataCopy \u5176\u4E2DdataCopy\u6CA1\u6709\u5B9E\u9645\u5B9E\u73B0,\u5E94\u8BE5\u662F\u7559\u4F5C\u540E\u7528. \u6CE8\u610F\u7684\u662F\u8FD9\u4E9B\u5185\u7F6E\u5408\u7EA6solidity\u662F\u77E5\u9053\u7684,\u5E76\u4E14\u4E5F\u662F\u652F\u6301\u7684.</p><p>\u53E6\u5916\u8FD9\u4E9B\u5408\u7EA6\u6536\u53D6\u7684gas\u8D39\u5E76\u4E0D\u6309\u7167\u6807\u51C6\u7684call\u6536\u53D6.</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// PrecompiledContract is the basic interface for native Go contracts. The implementation</span>
<span class="token comment">// requires a deterministic gas count based on the input size of the Run method of the</span>
<span class="token comment">// contract.</span>
<span class="token keyword">type</span> PrecompiledContract <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">RequiredGas</span><span class="token punctuation">(</span>input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span>  <span class="token comment">// RequiredPrice calculates the contract gas use</span>
	<span class="token function">Run</span><span class="token punctuation">(</span>input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">// Run runs the precompiled contract</span>
<span class="token punctuation">}</span>
<span class="token comment">//\u8FD9\u4E9B\u662F\u5E73\u65F6\u8BF4\u7684\u5185\u7F6E\u5408\u7EA6,\u4ED6\u4EEC\u4E0D\u4EE5\u6307\u4EE4\u7684\u5F62\u5F0F\u51FA\u73B0,\u4F46\u662F\u901A\u8FC7\u5185\u7F6E\u5408\u7EA6\u8FDB\u884C</span>
<span class="token comment">// PrecompiledContractsHomestead contains the default set of pre-compiled Ethereum</span>
<span class="token comment">// contracts used in the Frontier and Homestead releases.</span>
<span class="token keyword">var</span> PrecompiledContractsHomestead <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span>PrecompiledContract<span class="token punctuation">{</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>ecrecover<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>sha256hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>ripemd160hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>dataCopy<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// PrecompiledContractsByzantium contains the default set of pre-compiled Ethereum</span>
<span class="token comment">// contracts used in the Byzantium release.</span>
<span class="token keyword">var</span> PrecompiledContractsByzantium <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span>PrecompiledContract<span class="token punctuation">{</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>ecrecover<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>sha256hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>ripemd160hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>dataCopy<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>bigModExp<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>bn256Add<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>bn256ScalarMul<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	common<span class="token punctuation">.</span><span class="token function">BytesToAddress</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>bn256Pairing<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="\u5176\u4ED6" tabindex="-1">\u5176\u4ED6 <a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a></h2><h3 id="int-pool" tabindex="-1">int pool <a class="header-anchor" href="#int-pool" aria-hidden="true">#</a></h3><p>EVM\u57FA\u672C\u5355\u5143\u662F256\u4F4D\u7684\u865A\u62DF\u673A,\u6240\u4EE5\u91CC\u9762\u64CD\u4F5C\u7684\u90FD\u662F\u90FD\u662Fbig.Int. \u56E0\u6B64\u9700\u8981int pool\u6765\u8FDB\u884Ccache\u7BA1\u7406,\u907F\u514D\u5185\u5B58\u5206\u914D.</p><p>\u601D\u8DEF\u4E5F\u5F88\u7B80\u5355,\u770B\u770B\u5F88\u5BB9\u6613\u7406\u89E3.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">const</span> poolLimit <span class="token operator">=</span> <span class="token number">256</span>

<span class="token comment">// intPool is a pool of big integers that</span>
<span class="token comment">// can be reused for all big.Int operations.</span>
<span class="token keyword">type</span> intPool <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pool <span class="token operator">*</span>Stack
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newIntPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>intPool <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>intPool<span class="token punctuation">{</span>pool<span class="token punctuation">:</span> <span class="token function">newstack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>intPool<span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>big<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>pool<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> p<span class="token punctuation">.</span>pool<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>intPool<span class="token punctuation">)</span> <span class="token function">put</span><span class="token punctuation">(</span>is <span class="token operator">...</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&gt;</span> poolLimit <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> is <span class="token punctuation">{</span>
		<span class="token comment">// verifyPool is a build flag. Pool verification makes sure the integrity</span>
		<span class="token comment">// of the integer pool by comparing values to a default value.</span>
		<span class="token keyword">if</span> verifyPool <span class="token punctuation">{</span>
			i<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>checkVal<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		p<span class="token punctuation">.</span>pool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="stack\u7BA1\u7406" tabindex="-1">stack\u7BA1\u7406 <a class="header-anchor" href="#stack\u7BA1\u7406" aria-hidden="true">#</a></h3><p>EVM\u662F\u4E00\u4E2A\u975E\u5E38\u7B80\u5355\u7684\u6808\u865A\u62DF\u673A,\u9700\u8981\u6709\u4E00\u4E2A\u7BA1\u7406\u6808\u6570\u636E\u7684\u6570\u636E\u7ED3\u6784,\u770B\u7740\u4E5F\u5F88\u7B80\u5355.</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// stack is an object for basic stack operations. Items popped to the stack are</span>
<span class="token comment">// expected to be changed and modified. stack does not take care of adding newly</span>
<span class="token comment">// initialised objects.</span>
<span class="token keyword">type</span> Stack <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int
<span class="token punctuation">}</span>
push<span class="token punctuation">,</span>pop\u4E4B\u7C7B\u7684\u6307\u4EE4<span class="token punctuation">.</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="\u6307\u4EE4\u6267\u884C-\u63D0\u7EB2\u6308\u9886" tabindex="-1">\u6307\u4EE4\u6267\u884C \u63D0\u7EB2\u6308\u9886 <a class="header-anchor" href="#\u6307\u4EE4\u6267\u884C-\u63D0\u7EB2\u6308\u9886" aria-hidden="true">#</a></h2><h3 id="evm\u6307\u4EE4\u6267\u884C\u7684\u5165\u53E3" tabindex="-1">EVM\u6307\u4EE4\u6267\u884C\u7684\u5165\u53E3 <a class="header-anchor" href="#evm\u6307\u4EE4\u6267\u884C\u7684\u5165\u53E3" aria-hidden="true">#</a></h3><p>\u8FD9\u91CC\u53EF\u4EE5\u770B\u51FA\u5982\u4F55\u8FDB\u884C\u8C03\u7528.</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">/*
caller:\u5408\u7EA6\u4E2D\u7684msg.sender
\u5982\u679C\u662F\u5916\u90E8\u5408\u7EA6\u8C03\u7528,\u5219\u662FTX\u4E2D\u7684From,\u5426\u5219\u5219\u662F\u8C03\u7528\u5176\u4ED6\u5408\u7EA6\u7684\u5408\u7EA6\u5730\u5740
addr: \u88AB\u8C03\u7528\u5408\u7EA6\u7684\u5730\u5740
 */</span>
<span class="token comment">// Call executes the contract associated with the addr with the given input as</span>
<span class="token comment">// parameters. It also handles any necessary value transfer required and takes</span>
<span class="token comment">// the necessary steps to create accounts and reverses the state in case of an</span>
<span class="token comment">// execution error or failed value transfer.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>evm <span class="token operator">*</span>EVM<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>caller ContractRef<span class="token punctuation">,</span> addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> gas <span class="token builtin">uint64</span><span class="token punctuation">,</span> value <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> leftOverGas <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> evm<span class="token punctuation">.</span>vmConfig<span class="token punctuation">.</span>NoRecursion <span class="token operator">&amp;&amp;</span> evm<span class="token punctuation">.</span>depth <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> gas<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Fail if we&#39;re trying to execute above the call depth limit</span>
	<span class="token keyword">if</span> evm<span class="token punctuation">.</span>depth <span class="token operator">&gt;</span> <span class="token function">int</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>CallCreateDepth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> gas<span class="token punctuation">,</span> ErrDepth
	<span class="token punctuation">}</span>
	<span class="token comment">// Fail if we&#39;re trying to transfer more than the available balance</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">CanTransfer</span><span class="token punctuation">(</span>evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> caller<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">IsSIP004Block</span><span class="token punctuation">(</span>evm<span class="token punctuation">.</span>BlockNumber<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span><span class="token function">IsChiefAddress</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> gas<span class="token punctuation">,</span> ErrInsufficientBalance
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		to       <span class="token operator">=</span> <span class="token function">AccountRef</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
		snapshot <span class="token operator">=</span> evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">Snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		precompiles <span class="token operator">:=</span> PrecompiledContractsHomestead
		<span class="token keyword">if</span> evm<span class="token punctuation">.</span><span class="token function">ChainConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsByzantium</span><span class="token punctuation">(</span>evm<span class="token punctuation">.</span>BlockNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			precompiles <span class="token operator">=</span> PrecompiledContractsByzantium
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> precompiles<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> evm<span class="token punctuation">.</span><span class="token function">ChainConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsEIP158</span><span class="token punctuation">(</span>evm<span class="token punctuation">.</span>BlockNumber<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> gas<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">CreateAccount</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	evm<span class="token punctuation">.</span><span class="token function">Transfer</span><span class="token punctuation">(</span>evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> caller<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> to<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>

	<span class="token comment">// Initialise a new contract and set the code that is to be used by the EVM.</span>
	<span class="token comment">// The contract is a scoped environment for this execution context only.</span>
	contract <span class="token operator">:=</span> <span class="token function">NewContract</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> to<span class="token punctuation">,</span> value<span class="token punctuation">,</span> gas<span class="token punctuation">)</span>
	<span class="token comment">//TODO cache chief [address -&gt; code]</span>
	contract<span class="token punctuation">.</span><span class="token function">SetCallCode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">GetCodeHash</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">,</span> evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">GetCode</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

	start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// Capture the tracer start/end events in debug mode</span>
	<span class="token keyword">if</span> evm<span class="token punctuation">.</span>vmConfig<span class="token punctuation">.</span>Debug <span class="token operator">&amp;&amp;</span> evm<span class="token punctuation">.</span>depth <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		evm<span class="token punctuation">.</span>vmConfig<span class="token punctuation">.</span>Tracer<span class="token punctuation">.</span><span class="token function">CaptureStart</span><span class="token punctuation">(</span>caller<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> gas<span class="token punctuation">,</span> value<span class="token punctuation">)</span>

		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Lazy evaluation of the parameters</span>
			evm<span class="token punctuation">.</span>vmConfig<span class="token punctuation">.</span>Tracer<span class="token punctuation">.</span><span class="token function">CaptureEnd</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> gas<span class="token operator">-</span>contract<span class="token punctuation">.</span>Gas<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	ret<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">run</span><span class="token punctuation">(</span>evm<span class="token punctuation">,</span> contract<span class="token punctuation">,</span> input<span class="token punctuation">)</span>

	<span class="token comment">// When an error was returned by the EVM or when setting the creation code</span>
	<span class="token comment">// above we revert to the snapshot and consume any gas remaining. Additionally</span>
	<span class="token comment">// when we&#39;re in homestead this also counts for code storage gas errors.</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">RevertToSnapshot</span><span class="token punctuation">(</span>snapshot<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> errExecutionReverted <span class="token punctuation">{</span>
			contract<span class="token punctuation">.</span><span class="token function">UseGas</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Gas<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">,</span> contract<span class="token punctuation">.</span>Gas<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div><h3 id="interpreter" tabindex="-1">Interpreter <a class="header-anchor" href="#interpreter" aria-hidden="true">#</a></h3><p>\u63A7\u5236\u7740\u865A\u62DF\u673A\u6307\u4EE4\u7684\u6267\u884C,\u6700\u6838\u5FC3\u7684\u5C31\u662FRun\u51FD\u6570</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// Interpreter is used to run Ethereum based contracts and will utilise the</span>
<span class="token comment">// passed evmironment to query external sources for state information.</span>
<span class="token comment">// The Interpreter will run the byte code VM or JIT VM based on the passed</span>
<span class="token comment">// configuration.</span>
<span class="token keyword">type</span> Interpreter <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	evm      <span class="token operator">*</span>EVM
	cfg      Config
	gasTable params<span class="token punctuation">.</span>GasTable
	intPool  <span class="token operator">*</span>intPool

	readOnly   <span class="token builtin">bool</span>   <span class="token comment">// Whether to throw on stateful modifications</span>
	returnData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token comment">// Last CALL&#39;s return data for subsequent reuse</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u8FD9\u91CC\u662F\u865A\u62DF\u673A\u6267\u884C\u7684\u6838\u5FC3,</span>
<span class="token comment">//\u53D6\u6307\u4EE4</span>
<span class="token comment">//validateStack</span>
<span class="token comment">//enforceRestrictions</span>
<span class="token comment">//memorySize</span>
<span class="token comment">//execute  \u6267\u884C\u6307\u4EE4</span>

<span class="token comment">// Run loops and evaluates the contract&#39;s code with the given input data and returns</span>
<span class="token comment">// the return byte-slice and an error if one occurred.</span>
<span class="token comment">//</span>
<span class="token comment">// It&#39;s important to note that any errors returned by the interpreter should be</span>
<span class="token comment">// considered a revert-and-consume-all-gas operation except for</span>
<span class="token comment">// errExecutionReverted which means revert-and-keep-gas-left.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>in <span class="token operator">*</span>Interpreter<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>contract <span class="token operator">*</span>Contract<span class="token punctuation">,</span> input <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ret <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Increment the call depth which is restricted to 1024</span>
	in<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>depth<span class="token operator">++</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> in<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>depth<span class="token operator">--</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// Reset the previous call&#39;s return data. It&#39;s unimportant to preserve the old buffer</span>
	<span class="token comment">// as every returning call will return new data anyway.</span>
	in<span class="token punctuation">.</span>returnData <span class="token operator">=</span> <span class="token boolean">nil</span>

	<span class="token comment">// Don&#39;t bother with the execution if there&#39;s no code.</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Code<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>

	codehash <span class="token operator">:=</span> contract<span class="token punctuation">.</span>CodeHash <span class="token comment">// codehash is used when doing jump dest caching</span>
	<span class="token keyword">if</span> codehash <span class="token operator">==</span> <span class="token punctuation">(</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		codehash <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">Keccak256Hash</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>Code<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		op    OpCode        <span class="token comment">// current opcode</span>
		mem   <span class="token operator">=</span> <span class="token function">NewMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bound memory</span>
		stack <span class="token operator">=</span> <span class="token function">newstack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// local stack</span>
		<span class="token comment">// For optimisation reason we&#39;re using uint64 as the program counter.</span>
		<span class="token comment">// It&#39;s theoretically possible to go above 2^64. The YP defines the PC</span>
		<span class="token comment">// to be uint256. Practically much less so feasible.</span>
		pc   <span class="token operator">=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// program counter</span>
		cost <span class="token builtin">uint64</span>
		<span class="token comment">// copies used by tracer</span>
		pcCopy  <span class="token builtin">uint64</span> <span class="token comment">// needed for the deferred Tracer</span>
		gasCopy <span class="token builtin">uint64</span> <span class="token comment">// for Tracer to log gas remaining before execution</span>
		logged  <span class="token builtin">bool</span>   <span class="token comment">// deferred Tracer should ignore already logged steps</span>
	<span class="token punctuation">)</span>
	contract<span class="token punctuation">.</span>Input <span class="token operator">=</span> input

	<span class="token keyword">if</span> in<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Debug <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token operator">!</span>logged <span class="token punctuation">{</span>
					in<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Tracer<span class="token punctuation">.</span><span class="token function">CaptureState</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>evm<span class="token punctuation">,</span> pcCopy<span class="token punctuation">,</span> op<span class="token punctuation">,</span> gasCopy<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> contract<span class="token punctuation">,</span> in<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>depth<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					in<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Tracer<span class="token punctuation">.</span><span class="token function">CaptureFault</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>evm<span class="token punctuation">,</span> pcCopy<span class="token punctuation">,</span> op<span class="token punctuation">,</span> gasCopy<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> contract<span class="token punctuation">,</span> in<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>depth<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// The Interpreter main run loop (contextual). This loop runs until either an</span>
	<span class="token comment">// explicit STOP, RETURN or SELFDESTRUCT is executed, an error occurred during</span>
	<span class="token comment">// the execution of one of the operations or until the done flag is set by the</span>
	<span class="token comment">// parent context.</span>
	<span class="token keyword">for</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>in<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>abort<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> in<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Debug <span class="token punctuation">{</span>
			<span class="token comment">// Capture pre-execution values for tracing.</span>
			logged<span class="token punctuation">,</span> pcCopy<span class="token punctuation">,</span> gasCopy <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> pc<span class="token punctuation">,</span> contract<span class="token punctuation">.</span>Gas
		<span class="token punctuation">}</span>

		<span class="token comment">// Get the operation from the jump table and validate the stack to ensure there are</span>
		<span class="token comment">// enough stack items available to perform the operation.</span>
		op <span class="token operator">=</span> contract<span class="token punctuation">.</span><span class="token function">GetOp</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span>
		operation <span class="token operator">:=</span> in<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>JumpTable<span class="token punctuation">[</span>op<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span>valid <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid opcode 0x%x&quot;</span><span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> operation<span class="token punctuation">.</span><span class="token function">validateStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// If the operation is valid, enforce and write restrictions</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> in<span class="token punctuation">.</span><span class="token function">enforceRestrictions</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> operation<span class="token punctuation">,</span> stack<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>

		<span class="token keyword">var</span> memorySize <span class="token builtin">uint64</span>
		<span class="token comment">// calculate the new memory size and expand the memory to fit</span>
		<span class="token comment">// the operation</span>
		<span class="token keyword">if</span> operation<span class="token punctuation">.</span>memorySize <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			memSize<span class="token punctuation">,</span> overflow <span class="token operator">:=</span> <span class="token function">bigUint64</span><span class="token punctuation">(</span>operation<span class="token punctuation">.</span><span class="token function">memorySize</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> overflow <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errGasUintOverflow
			<span class="token punctuation">}</span>
			<span class="token comment">// memory is expanded in words of 32 bytes. Gas</span>
			<span class="token comment">// is also calculated in words.</span>
			<span class="token keyword">if</span> memorySize<span class="token punctuation">,</span> overflow <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">SafeMul</span><span class="token punctuation">(</span><span class="token function">toWordSize</span><span class="token punctuation">(</span>memSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> overflow <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errGasUintOverflow
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token operator">!</span>in<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>DisableGasMetering <span class="token punctuation">{</span>
			<span class="token comment">// consume the gas and return an error if not enough gas is available.</span>
			<span class="token comment">// cost is explicitly set so that the capture state defer method cas get the proper cost</span>
			cost<span class="token punctuation">,</span> err <span class="token operator">=</span> operation<span class="token punctuation">.</span><span class="token function">gasCost</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>gasTable<span class="token punctuation">,</span> in<span class="token punctuation">.</span>evm<span class="token punctuation">,</span> contract<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> memorySize<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token operator">!</span>contract<span class="token punctuation">.</span><span class="token function">UseGas</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrOutOfGas
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> memorySize <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			mem<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>memorySize<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> in<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Debug <span class="token punctuation">{</span>
			in<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Tracer<span class="token punctuation">.</span><span class="token function">CaptureState</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>evm<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> op<span class="token punctuation">,</span> gasCopy<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> contract<span class="token punctuation">,</span> in<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>depth<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			logged <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// execute the operation</span>
		res<span class="token punctuation">,</span> err <span class="token operator">:=</span> operation<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pc<span class="token punctuation">,</span> in<span class="token punctuation">.</span>evm<span class="token punctuation">,</span> contract<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> stack<span class="token punctuation">)</span>
		<span class="token comment">// verifyPool is a build flag. Pool verification makes sure the integrity</span>
		<span class="token comment">// of the integer pool by comparing values to a default value.</span>
		<span class="token keyword">if</span> verifyPool <span class="token punctuation">{</span>
			<span class="token function">verifyIntegerPool</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>intPool<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// if the operation clears the return data (e.g. it has returning data)</span>
		<span class="token comment">// set the last return to the result of the operation.</span>
		<span class="token keyword">if</span> operation<span class="token punctuation">.</span>returns <span class="token punctuation">{</span>
			in<span class="token punctuation">.</span>returnData <span class="token operator">=</span> res
		<span class="token punctuation">}</span>

		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token keyword">case</span> operation<span class="token punctuation">.</span>reverts<span class="token punctuation">:</span>
			<span class="token keyword">return</span> res<span class="token punctuation">,</span> errExecutionReverted
		<span class="token keyword">case</span> operation<span class="token punctuation">.</span>halts<span class="token punctuation">:</span>
			<span class="token keyword">return</span> res<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token keyword">case</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span>jumps<span class="token punctuation">:</span>
			pc<span class="token operator">++</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br></div></div><p>\u76F8\u6BD4\u4E0E\u6BD4\u7279\u5E01\u7684\u865A\u62DF\u673A,EVM\u7279\u70B9\u662F\u6BD4\u8F83\u89C4\u8303,\u4ECEInterpreter.go\u4E2D\u53EF\u4EE5\u770B\u51FA\u5176\u6267\u884C\u6D41\u7A0B\u975E\u5E38\u7B80\u6D01\u7EDF\u4E00.</p>`,34),o=[e];function c(l,u,i,r,k,b){return a(),s("div",null,o)}var f=n(p,[["render",c]]);export{d as __pageData,f as default};
