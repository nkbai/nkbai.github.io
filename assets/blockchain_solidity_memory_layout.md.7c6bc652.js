import{_ as a,c as s,o as e,N as n}from"./chunks/framework.3a9190c5.js";const b=JSON.parse('{"title":"Solidity的内存布局","description":"","frontmatter":{"title":"Solidity的内存布局","date":"2022-07-11T01:45:03.000Z","draft":false,"tags":["ethereum","blockchain","solidity"],"categories":["技术相关"]},"headers":[],"relativePath":"blockchain/solidity/memory_layout.md"}'),l={name:"blockchain/solidity/memory_layout.md"},t=n(`<p>solidity经过编译后生成相应的evm机器码,相当于直接在一个裸机上运行一段程序. 并且由于合约相对没有那么复杂(比如进程之类的概念),因此其内存管理机制就相当于一个简单的bootloader一样.</p><h2 id="固定布局" tabindex="-1">固定布局 <a class="header-anchor" href="#固定布局" aria-label="Permalink to &quot;固定布局&quot;">​</a></h2><ul><li>0x00-0x3f 前六十四个字节,临时缓冲区,比如计算hash时使用</li><li>0x40-0x5f 共32个字节,当前已经分配了多少内存,同时也指向了下次可分配的内存空间</li><li>0x60-0x7f zero slot 永远是0,不应该写入</li></ul><h2 id="内存只分配-不释放" tabindex="-1">内存只分配,不释放 <a class="header-anchor" href="#内存只分配-不释放" aria-label="Permalink to &quot;内存只分配,不释放&quot;">​</a></h2><p>和普通的编程语言不一样的是,solidity只管内存分配,永远不释放. 因为其地址空间有2^256,可以说是用之不尽.</p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>如果临时需要使用超过64字节的空间,那么可以直接使用未分配空间,具体就是0x40-0x5f指向的地址,同时也是msize()的返回值. <strong>因此代码不应假定分配到的内存都是初始化为0</strong></p><h2 id="内存布局与storage中的差异" tabindex="-1">内存布局与storage中的差异 <a class="header-anchor" href="#内存布局与storage中的差异" aria-label="Permalink to &quot;内存布局与storage中的差异&quot;">​</a></h2><p>因为storage中读写非常昂贵,因此会尽可能的紧凑,而内存则无需这么复杂.</p><p>因为紧凑的内存,会带来不必要的操作复杂度. 毕竟evm中指令的操作数都是32字节(256位).</p><p>比如:</p><p><code>uint8[4] a; </code> 在memory中,会占用128字节,而storage中,则只有32字节.</p><p>再比如:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">struct S {</span></span>
<span class="line"><span style="color:#A6ACCD;">    uint a;</span></span>
<span class="line"><span style="color:#A6ACCD;">    uint b;</span></span>
<span class="line"><span style="color:#A6ACCD;">    uint8 c;</span></span>
<span class="line"><span style="color:#A6ACCD;">    uint8 d;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>storage中无需对齐(这是现代risc cpu的基本要求),所以在memory中是32*4=128字节,而在storage中则只有96字节.</p>`,15),o=[t];function r(i,p,c,d,u,m){return e(),s("div",null,o)}const _=a(l,[["render",r]]);export{b as __pageData,_ as default};
