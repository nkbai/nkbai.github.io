import{o as n,c as s,e as a}from"./app.f9082c82.js";const p='{"title":"从零实现消息中间件-client","description":"","frontmatter":{"title":"从零实现消息中间件-client","date":"2020-02-20T01:57:03.000Z","draft":false,"tags":["rust"],"categories":["技术相关"]},"headers":[{"level":2,"title":"功能设计","slug":"功能设计"},{"level":2,"title":"数据结构定义","slug":"数据结构定义"},{"level":3,"title":"接口-connect","slug":"接口-connect"},{"level":3,"title":"接口-pub_message","slug":"接口-pub-message"},{"level":3,"title":"接口-sub_message","slug":"接口-sub-message"},{"level":3,"title":"receive_task","slug":"receive-task"},{"level":2,"title":"API的使用","slug":"api的使用"},{"level":3,"title":"pub","slug":"pub"},{"level":3,"title":"sub","slug":"sub"},{"level":2,"title":"代码实现","slug":"代码实现"},{"level":2,"title":"其他","slug":"其他"}],"relativePath":"rust/rnats/6.client.md","lastUpdated":1641604782425}',t={},e=[a('<h2 id="功能设计"><a class="header-anchor" href="#功能设计" aria-hidden="true">#</a> 功能设计</h2><p>client实现功能相对比较单一,就是能够向服务器pub消息,然后就会说订阅消息,订阅的主题收到消息以后能够得到通知.因此总结起来就是下面三个功能:</p><ol><li>提供pub接口</li><li>提供sub接口</li><li>处理sub后收到的消息</li></ol><h2 id="数据结构定义"><a class="header-anchor" href="#数据结构定义" aria-hidden="true">#</a> 数据结构定义</h2><p>提供给用户的接口是上面的三个, 为了实现这三个接口,client一定要有的就是<code>writer</code>以及<code>handler</code>. 而sid则是因为一个client可以有多个sub,每一个sub要有唯一的id,主要是编号用. <code>stop</code>则是为了client正常关闭使用.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Client</span> <span class="token punctuation">{</span>\n    addr<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    writer<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">WriteHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> stop<span class="token punctuation">:</span> <span class="token namespace">oneshot<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    sid<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n    handler<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span>  \n                  <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token class-name">UnboundedSender</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="接口-connect"><a class="header-anchor" href="#接口-connect" aria-hidden="true">#</a> 接口-connect</h3><p>connect的功能非常直白就是创建和服务器的连接,同时后台会启动一个任务来处理tcp连接,主要是接收消息.</p><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Client</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h3 id="接口-pub-message"><a class="header-anchor" href="#接口-pub-message" aria-hidden="true">#</a> 接口-pub_message</h3><p>向服务器发布一条pub消息</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">pub_message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> \n  subject<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> \n  msg<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \n     <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="接口-sub-message"><a class="header-anchor" href="#接口-sub-message" aria-hidden="true">#</a> 接口-sub_message</h3><p>向服务器发布一条sub消息,然后等待服务器推送相关消息. 需要说明的是这里的参数<code>subject</code>和<code>queue</code>完全没有必要使用String,&amp;str即可. 这应该是rust的一个bug,在1.41和nightly 1.43都是编译不过去的.所以退而求其次,使用了String.</p><div class="language-rust line-numbers-mode"><pre><code>    <span class="token comment">//sub消息格式为SUB subject {queue} {sid}\\r\\n</span>\n    <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sub_message</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>\n        subject<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n        queue<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        handler<span class="token punctuation">:</span> <span class="token class-name">MessageHandler</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="receive-task"><a class="header-anchor" href="#receive-task" aria-hidden="true">#</a> receive_task</h3><p><code>receive_task</code>主要是做消息的接收,解析,以及将消息派发给合适的handler. 这个其实是本模块最复杂的地方,总体上比较直观. 主要有以下两点</p><ol><li>使用futures::select这个宏来辅助实现同时监控多个future</li><li>TcpStream如果read到size为0,说明连接已经关闭,无需继续</li></ol><div class="language-rust line-numbers-mode"><pre><code>    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">receive_task</span><span class="token punctuation">(</span>\n        <span class="token keyword">mut</span> reader<span class="token punctuation">:</span> <span class="token class-name">ReadHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        stop<span class="token punctuation">:</span> <span class="token namespace">oneshot<span class="token punctuation">::</span></span><span class="token class-name">Receiver</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        handler<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span>\n                 <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token class-name">UnboundedSender</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        writer<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">WriteHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="api的使用"><a class="header-anchor" href="#api的使用" aria-hidden="true">#</a> API的使用</h2><h3 id="pub"><a class="header-anchor" href="#pub" aria-hidden="true">#</a> pub</h3><div class="language-rust line-numbers-mode"><pre><code> c<span class="token punctuation">.</span><span class="token function">pub_message</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;hello{}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="sub"><a class="header-anchor" href="#sub" aria-hidden="true">#</a> sub</h3><div class="language-rust line-numbers-mode"><pre><code> c<span class="token punctuation">.</span><span class="token function">sub_message</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;test&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">None</span><span class="token punctuation">,</span>\n        <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>msg<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>\n            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;recevied:{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token function">from_utf8_unchecked</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="代码实现"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-rust line-numbers-mode"><pre><code>\n<span class="token keyword">type</span> <span class="token class-name">MessageHandler</span> <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">FnMut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>result<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token operator">+</span> <span class="token class-name">Sync</span> <span class="token operator">+</span> <span class="token class-name">Send</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">//#[derive(Debug)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Client</span> <span class="token punctuation">{</span>\n    addr<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    writer<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">WriteHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> stop<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token namespace">oneshot<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    sid<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n    handler<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MessageHandler</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>\n    <span class="token comment">//1. 建立到服务器的连接</span>\n    <span class="token comment">//2. 启动后台任务</span>\n    <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Client</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> conn <span class="token operator">=</span> <span class="token class-name">TcpStream</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token punctuation">(</span>reader<span class="token punctuation">,</span> writer<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">split</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>oneshot<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>\n            addr<span class="token punctuation">:</span> addr<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            writer<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            stop<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            sid<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            handler<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> handler <span class="token operator">=</span> c<span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> writer <span class="token operator">=</span> c<span class="token punctuation">.</span>writer<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/*\n        tokio::spawn 可以认为和go语言中的\n        go func(){}()\n        */</span>\n        <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>\n            <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">receive_task</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> rx<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Ok</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">/*\n    从服务器接收pub消息\n    然后推送给相关的订阅方。\n    */</span>\n    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">receive_task</span><span class="token punctuation">(</span>\n        <span class="token keyword">mut</span> reader<span class="token punctuation">:</span> <span class="token class-name">ReadHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        stop<span class="token punctuation">:</span> <span class="token namespace">oneshot<span class="token punctuation">::</span></span><span class="token class-name">Receiver</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        handler<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MessageHandler</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        writer<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">WriteHalf</span><span class="token operator">&lt;</span><span class="token class-name">TcpStream</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> buf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">as</span> <span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> parser <span class="token operator">=</span> <span class="token class-name">Parser</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">use</span> <span class="token namespace">futures<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> stop <span class="token operator">=</span> stop<span class="token punctuation">.</span><span class="token function">fuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n            <span class="token macro property">select!</span> <span class="token punctuation">{</span>\n                _<span class="token operator">=</span>stop<span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;client closed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">return</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                r <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buf<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n                     <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">match</span> r <span class="token punctuation">{</span>\n                            <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;read err {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                <span class="token keyword">let</span> _ <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                                <span class="token keyword">return</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span>\n                            <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n<span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n                        <span class="token comment">//EOF,说明对方关闭了连接</span>\n                        <span class="token keyword">return</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">let</span> <span class="token keyword">mut</span> buf2 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token punctuation">..</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">let</span> r <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">let</span> <span class="token punctuation">(</span>r<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">match</span> r <span class="token punctuation">{</span>\n                            <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;parse err {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                <span class="token keyword">let</span> _ <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                                <span class="token keyword">return</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span>\n                            <span class="token class-name">Ok</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n                        <span class="token comment">//                println!(&quot;receive msg {:?}&quot;, r);</span>\n                        <span class="token keyword">match</span> r <span class="token punctuation">{</span>\n                            <span class="token class-name">ParseResult</span><span class="token punctuation">::</span><span class="token class-name">NoMsg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                                <span class="token keyword">break</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span>\n                            <span class="token class-name">ParseResult</span><span class="token punctuation">::</span><span class="token class-name">MsgArg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                                <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token function">process_message</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n                                parser<span class="token punctuation">.</span><span class="token function">clear_msg_buf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n                        <span class="token comment">//缓冲区处理完毕</span>\n                        <span class="token keyword">if</span> n <span class="token operator">==</span> buf<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token keyword">break</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                        buf2 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf2<span class="token punctuation">[</span>n<span class="token punctuation">..</span><span class="token punctuation">]</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">/*\n    根据消息的subject，找到订阅方，\n    然后推送给他们\n    */</span>\n    <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">process_message</span><span class="token punctuation">(</span>\n        msg<span class="token punctuation">:</span> <span class="token class-name">MsgArg</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        handler<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MessageHandler</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//        println!(&quot;broadcast msg {}&quot;, msg.subject);</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> handler <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> h <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span> h <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//pub消息格式为PUB subject size\\r\\n{message}</span>\n    <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">pub_message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> subject<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> writer <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>writer<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;PUB {} {}\\r\\n&quot;</span><span class="token punctuation">,</span> subject<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> _ <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> _ <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n        writer<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//sub消息格式为SUB subject {queue} {sid}\\r\\n</span>\n    <span class="token comment">//可能由于rustc的bug,导致如果subject是&amp;str,则会报错E0700,暂时使用String来替代</span>\n    <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sub_message</span><span class="token punctuation">(</span>\n        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>\n        subject<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n        queue<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n        handler<span class="token punctuation">:</span> <span class="token class-name">MessageHandler</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>sid <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> writer <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>writer<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">=</span> queue <span class="token punctuation">{</span>\n            <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;SUB {} {} {}\\r\\n&quot;</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>sid<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;SUB {} {}\\r\\n&quot;</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>sid<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        writer<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>stop<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> stop<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;stop err {:?}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br></div></div><h2 id="其他"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>相关代码都在我的github <a href="https://github.com/nkbai/learnrustbynats" target="_blank" rel="noopener noreferrer">rnats</a> 欢迎围观</p>',28)];t.render=function(a,p,t,o,c,l){return n(),s("div",null,e)};export{p as __pageData,t as default};
