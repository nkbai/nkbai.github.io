import{_ as s,c as n,o as a,N as l}from"./chunks/framework.3a9190c5.js";const F=JSON.parse('{"title":"hdwallet-bip0032","description":"","frontmatter":{"title":"hdwallet-bip0032","date":"2019-05-20T08:33:25.957Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/btcwallet/hdwallet-bip0032.md"}'),p={name:"blockchain/btcwallet/hdwallet-bip0032.md"},e=l(`<h1 id="bip-0032-关于hdwallet解读" tabindex="-1">bip-0032-关于HDWallet解读 <a class="header-anchor" href="#bip-0032-关于hdwallet解读" aria-label="Permalink to &quot;bip-0032-关于HDWallet解读&quot;">​</a></h1><h3 id="bip0032的核心就是子秘钥的推导" tabindex="-1">BIP0032的核心就是子秘钥的推导 <a class="header-anchor" href="#bip0032的核心就是子秘钥的推导" aria-label="Permalink to &quot;BIP0032的核心就是子秘钥的推导&quot;">​</a></h3><p>如何从父秘钥(父节点)推出子秘钥(子节点) 可以从父私钥到子私钥 也可以从父公钥到子公钥 也可以从父公钥到子私钥</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Child returns a derived child extended key at the given index.  When this</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// extended key is a private extended key (as determined by the IsPrivate</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// function), a private extended key will be derived.  Otherwise, the derived</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// extended key will be also be a public extended key.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// When the index is greater to or equal than the HardenedKeyStart constant, the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// derived extended key will be a hardened extended key.  It is only possible to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// derive a hardended extended key from a private extended key.  Consequently,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// this function will return ErrDeriveHardFromPublic if a hardened child</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// extended key is requested from a public extended key.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// A hardened extended key is useful since, as previously mentioned, it requires</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// a parent private extended key to derive.  In other words, normal child</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// extended public keys can be derived from a parent public extended key (no</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// knowledge of the parent private key) whereas hardened extended keys may not</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// be.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// NOTE: There is an extremely small chance (&lt; 1 in 2^127) the specific child</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index does not derive to a usable child.  The ErrInvalidChild error will be</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// returned if this should occur, and the caller is expected to ignore the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// invalid child and simply increment to the next index.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ExtendedKey</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Child</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#C792EA;">uint32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">ExtendedKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Prevent derivation of children beyond the max allowed depth.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> maxUint8 </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> ErrDeriveBeyondMaxDepth</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// There are four scenarios that could happen here:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// 1) Private extended key -&gt; Hardened child private extended key</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// 2) Private extended key -&gt; Non-hardened child private extended key</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// 3) Public extended key -&gt; Non-hardened child public extended key</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// 4) Public extended key -&gt; Hardened child public extended key (INVALID!)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Case #4 is invalid, so error out early.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// A hardened child extended key may not be created from a public</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// extended key.</span></span>
<span class="line"><span style="color:#A6ACCD;">	isChildHardened </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> HardenedKeyStart</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isPrivate </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> isChildHardened </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> ErrDeriveHardFromPublic</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// The data used to derive the child key depends on whether or not the</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// child is hardened per [BIP32].</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// For hardened children:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   0x00 || ser256(parentKey) || ser32(i)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// For normal children:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   serP(parentPubKey) || ser32(i)</span></span>
<span class="line"><span style="color:#A6ACCD;">	keyLen </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">33</span></span>
<span class="line"><span style="color:#A6ACCD;">	data </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> keyLen</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> isChildHardened </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Case #1.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// When the child is a hardened child, the key is known to be a</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// private key due to the above early return.  Pad it with a</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// leading zero as required by [BIP32] for deriving the child.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#82AAFF;">copy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:],</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Case #2 or #3.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// This is either a public or private extended key, but in</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// either case, the data which is used to derive the child key</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// starts with the secp256k1 compressed public key bytes.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#82AAFF;">copy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pubKeyBytes</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	binary</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BigEndian</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">PutUint32</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">keyLen</span><span style="color:#89DDFF;">:],</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Take the HMAC-SHA512 of the current key&#39;s chain code and the derived</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// data:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   I = HMAC-SHA512(Key = chainCode, Data = data)</span></span>
<span class="line"><span style="color:#A6ACCD;">	hmac512 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> hmac</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sha512</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">New</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">chainCode</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	hmac512</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Write</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	ilr </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> hmac512</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sum</span><span style="color:#89DDFF;">(nil)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Split &quot;I&quot; into two 32-byte sequences Il and Ir where:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   Il = intermediate key used to derive the child</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   Ir = child chain code</span></span>
<span class="line"><span style="color:#A6ACCD;">	il </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> ilr</span><span style="color:#89DDFF;">[:</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">)/</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">	childChainCode </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> ilr</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">)/</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Both derived public or private keys rely on treating the left 32-byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// sequence calculated above (Il) as a 256-bit integer that must be</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// within the valid range for a secp256k1 private key.  There is a small</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// chance (&lt; 1 in 2^127) this condition will not hold, and in that case,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// a child extended key can&#39;t be created for this index and the caller</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// should simply increment to the next index.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//这里的2^127是怎么算出来的呢?</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	N=FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	如果il是均匀分布,那么出现大于N的可能性是P{il&gt;N}=(MaxUint256-N)/MaxUint256</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	约等于1/(2^127)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	但是为什么要排除这种情况,而不是取模呢</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	ilNum </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">SetBytes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">il</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> ilNum</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Cmp</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">S256</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">N</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> ilNum</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sign</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> ErrInvalidChild</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// The algorithm used to derive the child key depends on whether or not</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// a private or public child is being derived.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// For private children:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   childKey = parse256(Il) + parentKey</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// For public children:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   childKey = serP(point(parse256(Il)) + parentKey)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> isPrivate </span><span style="color:#C792EA;">bool</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> childKey </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isPrivate </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Case #1 or #2.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Add the parent private key to the intermediate private key to</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// derive the final child key.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// childKey = parse256(Il) + parenKey</span></span>
<span class="line"><span style="color:#A6ACCD;">		keyNum </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">SetBytes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		ilNum</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ilNum</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> keyNum</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		ilNum</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Mod</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ilNum</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">S256</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">N</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		childKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ilNum</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Bytes</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">		isPrivate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Case #3.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Calculate the corresponding intermediate public key for</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// intermediate private key.</span></span>
<span class="line"><span style="color:#A6ACCD;">		ilx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ily </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">S256</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">ScalarBaseMult</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">il</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> ilx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sign</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> ily</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sign</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> ErrInvalidChild</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Convert the serialized compressed parent public key into X</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// and Y coordinates so it can be added to the intermediate</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// public key.</span></span>
<span class="line"><span style="color:#A6ACCD;">		pubKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ParsePubKey</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">S256</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Add the intermediate public key to the parent public key to</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// derive the final child key.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// childKey = serP(point(parse256(Il)) + parentKey)</span></span>
<span class="line"><span style="color:#A6ACCD;">		childX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> childY </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">S256</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ilx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ily</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pubKey</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">X</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pubKey</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		pk </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PublicKey</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Curve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">S256</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> X</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> childX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> childY</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		childKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pk</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SerializeCompressed</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		childKey对应的私钥是什么呢?</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		K1=k1*G</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		K2=k2*G</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		K3=K1+K2=k1*G+k2*G=(k1+k2)*G</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		因此K3对应的私钥是k1+k2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		所以childKey对应的私钥就是il+(k.key 对应的私钥)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// The fingerprint of the parent for the derived child is the first 4</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// bytes of the RIPEMD160(SHA256(parentPubKey)).</span></span>
<span class="line"><span style="color:#A6ACCD;">	parentFP </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcutil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Hash160</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pubKeyBytes</span><span style="color:#89DDFF;">())[:</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewExtendedKey</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">version</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> childKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> childChainCode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> parentFP</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depth</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> isPrivate</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br></div></div><h3 id="为什么有强化衍生和普通衍生的区别" tabindex="-1">为什么有强化衍生和普通衍生的区别 <a class="header-anchor" href="#为什么有强化衍生和普通衍生的区别" aria-label="Permalink to &quot;为什么有强化衍生和普通衍生的区别&quot;">​</a></h3><p>对于Index大于2^31的就是强化衍生(isChildHardened), 强化衍生使用父节点的私钥衍生Child的私钥和chainCode, 而普通衍生使用父节点的公钥衍生child的私钥和chainCode.</p><h3 id="强化衍生和普通衍生的细节" tabindex="-1">强化衍生和普通衍生的细节 <a class="header-anchor" href="#强化衍生和普通衍生的细节" aria-label="Permalink to &quot;强化衍生和普通衍生的细节&quot;">​</a></h3><p>一下来自于extendkey.go中的Child函数, 这两种方式都是得到子节点的PrivateKey和childChainCode. 同时无法通过子节点的PrivateKey和childChainCode来倒推父节点的.</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> isChildHardened </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Case #1.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// When the child is a hardened child, the key is known to be a</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// private key due to the above early return.  Pad it with a</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// leading zero as required by [BIP32] for deriving the child.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#82AAFF;">copy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:],</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Case #2 or #3.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// This is either a public or private extended key, but in</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// either case, the data which is used to derive the child key</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// starts with the secp256k1 compressed public key bytes.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#82AAFF;">copy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pubKeyBytes</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	binary</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BigEndian</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">PutUint32</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">keyLen</span><span style="color:#89DDFF;">:],</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Take the HMAC-SHA512 of the current key&#39;s chain code and the derived</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// data:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   I = HMAC-SHA512(Key = chainCode, Data = data)</span></span>
<span class="line"><span style="color:#A6ACCD;">	hmac512 </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> hmac</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sha512</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">New</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">chainCode</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	hmac512</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Write</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ilr </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> hmac512</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Sum</span><span style="color:#89DDFF;">(nil)</span></span>
<span class="line"><span style="color:#A6ACCD;">    	</span><span style="color:#676E95;font-style:italic;">// Split &quot;I&quot; into two 32-byte sequences Il and Ir where:</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   Il = intermediate key used to derive the child</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//   Ir = child chain code</span></span>
<span class="line"><span style="color:#A6ACCD;">	il </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> ilr</span><span style="color:#89DDFF;">[:</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">)/</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">	childChainCode </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> ilr</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">)/</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="父节点到子节点的三种推导方式" tabindex="-1">父节点到子节点的三种推导方式 <a class="header-anchor" href="#父节点到子节点的三种推导方式" aria-label="Permalink to &quot;父节点到子节点的三种推导方式&quot;">​</a></h3><h4 id="父私钥到子私钥" tabindex="-1">父私钥到子私钥 <a class="header-anchor" href="#父私钥到子私钥" aria-label="Permalink to &quot;父私钥到子私钥&quot;">​</a></h4><p>index大于2^31,</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">:=</span><span style="color:#82AAFF;">sha512</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">ParentPrivateKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">ParentChainCode</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">childPrivateKey</span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">[:</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">childChainCode</span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">:]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="父公钥到子私钥" tabindex="-1">父公钥到子私钥 <a class="header-anchor" href="#父公钥到子私钥" aria-label="Permalink to &quot;父公钥到子私钥&quot;">​</a></h4><p>index小于2^31</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">:=</span><span style="color:#82AAFF;">sha512</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ParentPubicKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">ParentChainCode</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">childPrivateKey</span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">[:</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">childChainCode</span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">:]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="父公钥到子公钥" tabindex="-1">父公钥到子公钥 <a class="header-anchor" href="#父公钥到子公钥" aria-label="Permalink to &quot;父公钥到子公钥&quot;">​</a></h4><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">:=</span><span style="color:#82AAFF;">sha512</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ParentPubicKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">ParentChainCode</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">il</span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">[:</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">childChainCode</span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;">ilr</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">:]</span></span>
<span class="line"><span style="color:#A6ACCD;"> ilx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ily </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">S256</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">ScalarBaseMult</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">il</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> childX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> childY </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">S256</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ilx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ily</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> paretPubKey</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">X</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> paretPubKey</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> pk </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PublicKey</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Curve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> btcec</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">S256</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> X</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> childX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> childY</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">childPubKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pk</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SerializeCompressed</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>childKey对应的私钥是什么呢? K1=k1<em>G K2=k2</em>G K3=K1+K2=k1<em>G+k2</em>G=(k1+k2)*G 因此K3对应的私钥是k1+k2 所以childKey对应的私钥就是il+(k.key 对应的私钥)</p><p><strong>从推导过程可以看出,一旦子私钥暴露,这种方式会导致父私钥也暴露</strong> 不过这种也有明显的好处,就是我不需要知道父私钥,只需要知道父公钥和父chainCode就可以推导出所有需要的收款地址. 推导人自己都不知道推导出来的收款地址对应的私钥是什么.</p><h2 id="bip0032树状私钥管理" tabindex="-1">BIP0032树状私钥管理 <a class="header-anchor" href="#bip0032树状私钥管理" aria-label="Permalink to &quot;BIP0032树状私钥管理&quot;">​</a></h2><p><img alt="" data-src="./img/hdwallet_1.jpg" loading="lazy" class="lazy"></p><h2 id="bip0039-助记词" tabindex="-1">BIP0039 助记词 <a class="header-anchor" href="#bip0039-助记词" aria-label="Permalink to &quot;BIP0039 助记词&quot;">​</a></h2><p><img alt="" data-src="./img/hdwallet_2.jpg" loading="lazy" class="lazy"></p><p>从助记词到Seed过程要计算起来非常耗时,否则容易被暴力攻破 <img alt="" data-src="./img/hdwallet_3.jpg" loading="lazy" class="lazy"></p><h2 id="bip0044-简介" tabindex="-1">BIP0044 简介 <a class="header-anchor" href="#bip0044-简介" aria-label="Permalink to &quot;BIP0044 简介&quot;">​</a></h2><p>BIP 0044实际上是如何规范使用bip0032,我们一般的钱包都是树状的, 这部分我没看懂,他是怎么管理的.</p><p>m / purpose&#39; / coin_type&#39; / account&#39; / change / address_index purpose总是44, 第二层的coin_type有相关规范,自行查询即可 account就是对应钱包中的account</p><p>第一层的 purpose 总是被设定为 44&#39;。 第二层的“coin_type”特指币种并且允许多元货币 HD 钱包中的货币在第二个层级 下有自己的亚树状结构。目前有三种货币被定义：Bitcoin is m/44&#39;/0&#39;、Bitcoin Testnet is m/44&#39;/1&#39;，以及 Litecoin is m/44&#39;/2&#39;。 树的第三层级是“account”，这可以允许使用者为了会计或者组织目的，而去再细 分他们的钱包到独立的逻辑性亚账户。 举个例子，一个 HD 钱包可能包含两个比 特币“账户”：m/44&#39;/0&#39;/0&#39; 和 m/44&#39;/0&#39;/1&#39;。每个账户都是它自己亚树的根。</p><p>第四层级就是“change”。每一个 HD 钱包有两个亚树，一个是用来接收地址一个是 用来创造找零地址。注意无论先前的层级是否使用强化衍生，这一层级使用的都 是常规衍生。这是为了允许这一层级的树可以在不安全环境下，输出扩展公钥。</p><p>被 HD 钱包衍生的可用的地址是第四层级的子级，就是第五层级的树的 “address_index”。比如，第三个层级的主账户收到比特币支付的地址就是 M/44&#39;/0&#39;/0&#39;/0/2。 表 5-7 展示了更多的例子。</p><table><thead><tr><th>HD路径</th><th>主要描述</th></tr></thead><tbody><tr><td>M/44&#39;/0&#39;/0&#39;/0/2</td><td>第三个收到公共钥匙的主比特币账户</td></tr><tr><td>M/44&#39;/0&#39;/3&#39;/1/14</td><td>第十五个改变地址公钥的第四个比特币账户</td></tr><tr><td>m/44&#39;/2&#39;/0&#39;/0/1</td><td>为了签署交易的在莱特币主账户的第二个私钥</td></tr></tbody></table>`,32),o=[e];function t(r,c,i,y,D,A){return a(),n("div",null,o)}const b=s(p,[["render",t]]);export{F as __pageData,b as default};
