import{_ as s,c as n,o as a,N as l}from"./chunks/framework.3a9190c5.js";const C=JSON.parse('{"title":"gokart速读笔记","description":"","frontmatter":{"title":"gokart速读笔记","date":"2022-07-10T01:57:03.000Z","draft":false,"tags":["security","web"],"categories":["技术相关"]},"headers":[],"relativePath":"web-security/gokart.md"}'),p={name:"web-security/gokart.md"},e=l(`<p><a href="https://github.com/praetorian-inc/gokart" target="_blank" rel="noreferrer">gokart</a>是github上一个比较受欢迎的开源的go语言的静态分析工具. 它基于golang专有的ir进行分析.</p><p><a href="https://github.com/golang/tools.git" target="_blank" rel="noreferrer">golang的SSA</a> 功能比较复杂,相对于soot这种只有十五条语句的IR,这个IR,要复杂不少,主要是他直接把go语言自身的很多特性直接放在了IR中,比如make, defer等.</p><p>这是一个典型的基于IR的数据流分析工具,相比基于ast的肯定要简单不少,可以认为他是一个通用的数据流分析引擎,其最核心的代码是<a href="https://github.com/praetorian-inc/gokart/blob/main/util/taint.go" target="_blank" rel="noreferrer">util/taint.go</a>中的ContainsTaint,其核心思路是<strong>从sink递归倒推,看看能不能遇到source</strong>,如果能就认为有问题,否则ok. 其他代码都是围绕这个思想而设计的.</p><p>内置了常见的几种漏洞:</p><ul><li>ssrf</li><li>sql注入</li><li>命令行注入</li><li>rsa弱密码</li><li>路径穿越</li></ul><p>还支持自定义的source,sink.</p><p>说说缺点吧:</p><ol><li>不够通用,虽然有自定义的source,sink,但是如果不是上面的几种漏洞,是你关注的其他楼栋,就要写代码来实现.</li><li>正如作者说的,想低误报,所以不少都没尝试,比如就没有处理interface.</li></ol><h2 id="一个失败的例子" tabindex="-1">一个失败的例子 <a class="header-anchor" href="#一个失败的例子" aria-label="Permalink to &quot;一个失败的例子&quot;">​</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">getPather</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">getFilePhi</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp </span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">S2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">S2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getFilePhi</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">temp </span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	reader </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> bufio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewReader</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">os</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Stdin</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	hiddenMessage</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ReadString</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> hiddenMessage</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DirTraversalPhi</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	safe </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	folderPath </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./list1/images/</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> g getPather </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> S2</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">	f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">folderPath </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFilePhi</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">safe</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">	f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>如果把第16行的getPather去掉,就能找到漏洞,否则就找不到.</p><p>可能因为服务端的漏洞本来就比较少,相比之下,越权之类的反而是多数,因此可以通过数据流分析直接扫描的漏洞数量是比较少的.</p>`,12),o=[e];function r(t,c,D,i,F,y){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{C as __pageData,b as default};
