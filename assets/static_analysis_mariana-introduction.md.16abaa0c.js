import{o as n,c as a,e as s}from"./app.9f1c34e3.js";const e='{"title":"mariana安卓静态分析工具简介","description":"","frontmatter":{"title":"mariana安卓静态分析工具简介","date":"2021-11-14T03:57:03.000Z","draft":false,"tags":["android","静态分析"],"series":["静态分析"],"categories":["技术相关"]},"headers":[{"level":2,"title":"工作原理","slug":"工作原理"},{"level":3,"title":"什么是Model","slug":"什么是model"}],"relativePath":"static_analysis/mariana-introduction.md","lastUpdated":1641604782000}',r={},t=[s('<h2 id="工作原理"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><h3 id="什么是model"><a class="header-anchor" href="#什么是model" aria-hidden="true">#</a> 什么是Model</h3><p>为每一个函数都建立一个model，包括库函数，描述：</p><ul><li>匹配到了哪些sink点</li><li>匹配到了哪些source点</li><li>污点怎么从变量传播到返回值，this，静态变量等 迭代求解： 比如foo调用了bar。 Iteration 1： 求foo的model，发生了变化，没有调用者 求bar的model，发生了变化，将bar的调用者foo加入下一轮求解集合中 Iteration 2: 在bar的model基础上继续求解foo的model</li></ul><p>什么是Model 源码中的说法</p><div class="language-c line-numbers-mode"><pre><code><span class="token comment">/**\n * A `Model` is a summary of what we know about a method. A `Model` should\n * contain the properties we are interested in, such as *generations*,\n * *propagations* and *sinks*.\n *\n * A *mode* describes a specific behavior of a model. See `Model::Mode`.\n *\n * A *generation* describes the property that the method either\n * returns a tainted value or mutates (and hence taints) a reference type\n * argument, regardless of whether parameters are tainted.\n *\n * A *parameter source* of a method describes the property that the method\n * receives a tainted value on a given parameter.\n *\n * A *propagation* describes how taint may flow through a method. More\n * specifically, how taint may flow from a parameter to the method&#39;s return\n * value or another parameters. A *propagation* will only propagate the taint\n * if the parameter is tainted. See `Propagation`.\n *\n * A *global sanitizer* sanitizes all sources, sinks or propagations flowing\n * through the method that have a kind dictated by its kinds field\n *\n * *Attach to sources* automatically adds features to all sources flowing out of\n * the method.\n *\n * *Attach to sinks* automatically adds features to all sources flowing in\n * the method.\n *\n * *Attach to propagations* automatically adds features to all propagations from\n * or to a given argument or return value.\n *\n * *Add features to arguments* automatically adds features to all taint that\n * might flow in or out of a given argument. This is equivalent to *attach to\n * sources/sinks/propagations*, but also adds features even when there is no\n * inferred propagation. E.g,\n * ```\n * List&lt;String&gt; x;\n * f(x);\n * // Here x has the feature, regardless of the propagations of f.\n * ```\n *\n * *inline as* is either top, bottom or an argument access path that will be\n * used to inline the method at call sites.\n */</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>最简单的Model</p><div class="language-json line-numbers-mode"><pre><code>\n<span class="token punctuation">{</span>\n    <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Lcom/security/bvaa/MainActivity;.f:()V&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;position&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">44</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com/security/bvaa/MainActivity.java&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',8)];r.render=function(s,e,r,l,p,o){return n(),a("div",null,t)};export{e as __pageData,r as default};
