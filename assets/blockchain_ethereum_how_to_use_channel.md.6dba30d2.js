import{o as n,c as s,e as a}from"./app.8bf2a359.js";const p='{"title":"如何使用 Channel","description":"","frontmatter":{"title":"如何使用 Channel","date":"2018-04-27T03:06:23.000Z","draft":true},"headers":[{"level":2,"title":"v1.0","slug":"v1-0"},{"level":2,"title":"Google 2.0","slug":"google-2-0"},{"level":2,"title":"Google 2.1","slug":"google-2-1"},{"level":2,"title":"Google 3.0 Avoid timeout","slug":"google-3-0-avoid-timeout"},{"level":2,"title":"Google 3.1","slug":"google-3-1"},{"level":2,"title":"完整的 google 3.1","slug":"完整的-google-3-1"}],"relativePath":"blockchain/ethereum/how_to_use_channel.md","lastUpdated":1561553438000}',t={},o=[a('<h1 id="如何使用-channel"><a class="header-anchor" href="#如何使用-channel" aria-hidden="true">#</a> 如何使用 Channel</h1><p>例子来自于<a href="https://talks.golang.org/2012/concurrency.slide" target="_blank" rel="noopener noreferrer">Concurrency is not parallelism</a></p><p>#Google Search: A fake framework</p><h2 id="v1-0"><a class="header-anchor" href="#v1-0" aria-hidden="true">#</a> v1.0</h2><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">var</span> <span class="token punctuation">(</span>\n    Web <span class="token operator">=</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span><span class="token string">&quot;web&quot;</span><span class="token punctuation">)</span>\n    Image <span class="token operator">=</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span>\n    Video <span class="token operator">=</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span><span class="token string">&quot;video&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Search <span class="token keyword">func</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> Result\n\n<span class="token keyword">func</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span>kind <span class="token builtin">string</span><span class="token punctuation">)</span> Search <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> Result <span class="token punctuation">{</span>\n              time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>\n              <span class="token keyword">return</span> <span class="token function">Result</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s result for %q\\n&quot;</span><span class="token punctuation">,</span> kind<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    results <span class="token operator">:=</span> <span class="token function">Google</span><span class="token punctuation">(</span><span class="token string">&quot;golang&quot;</span><span class="token punctuation">)</span>\n    elapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>关键函数</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">Google</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>results <span class="token punctuation">[</span><span class="token punctuation">]</span>Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token function">Web</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token function">Image</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token function">Video</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="google-2-0"><a class="header-anchor" href="#google-2-0" aria-hidden="true">#</a> Google 2.0</h2><p>每个 search, 独立并发. No locks. No condition variables. No callbacks.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">Google</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>results <span class="token punctuation">[</span><span class="token punctuation">]</span>Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">Web</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">Image</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">Video</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        result <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c\n        results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="google-2-1"><a class="header-anchor" href="#google-2-1" aria-hidden="true">#</a> Google 2.1</h2><p>如果某个服务比较慢,怎么办? No locks. No condition variables. No callbacks.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">Google</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>results <span class="token punctuation">[</span><span class="token punctuation">]</span>Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">Web</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">Image</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">Video</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    timeout <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">80</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        <span class="token keyword">select</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> result <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c<span class="token punctuation">:</span>\n            results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>\n            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;timed out&quot;</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="google-3-0-avoid-timeout"><a class="header-anchor" href="#google-3-0-avoid-timeout" aria-hidden="true">#</a> Google 3.0 Avoid timeout</h2><p>No locks. No condition variables. No callbacks.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">First</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> replicas <span class="token operator">...</span>Search<span class="token punctuation">)</span> Result <span class="token punctuation">{</span>\n    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">)</span>\n    searchReplica <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> replicas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> replicas <span class="token punctuation">{</span>\n        <span class="token keyword">go</span> <span class="token function">searchReplica</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;-</span>c\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">Google</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>results <span class="token punctuation">[</span><span class="token punctuation">]</span>Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">First</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Web1<span class="token punctuation">,</span> Web2<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">First</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Image1<span class="token punctuation">,</span> Image2<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">First</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Video1<span class="token punctuation">,</span> Video2<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    timeout <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">80</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        <span class="token keyword">select</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> result <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c<span class="token punctuation">:</span>\n            results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>\n            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;timed out&quot;</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="google-3-1"><a class="header-anchor" href="#google-3-1" aria-hidden="true">#</a> Google 3.1</h2><p>上面的例子看起来挺完美,但是存在一个严重的内存泄漏,不知道你看出来没有. First 中的 searchReplica调用,除了第一个会成功返回以外,其他都不会返回.因为堵塞在 c 上面,从而导致了内存泄漏. 改进也很简单</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">First</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> replicas <span class="token operator">...</span>Search<span class="token punctuation">)</span> Result <span class="token punctuation">{</span>\n    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>replicas<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//看似多分配了资源,但是很快就会收回</span>\n    searchReplica <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> replicas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> replicas <span class="token punctuation">{</span>\n        <span class="token keyword">go</span> <span class="token function">searchReplica</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;-</span>c\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>经过简单的替换,通过 Go 的并发模型,将一个慢的,顺序执行的,故障敏感的程序改造为了一个快速的,并发的,有冗余的,健壮的程序.</p><h2 id="完整的-google-3-1"><a class="header-anchor" href="#完整的-google-3-1" aria-hidden="true">#</a> 完整的 google 3.1</h2><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">var</span> <span class="token punctuation">(</span>\n    Web1 <span class="token operator">=</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span><span class="token string">&quot;web&quot;</span><span class="token punctuation">)</span>\n    Web2 <span class="token operator">=</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span><span class="token string">&quot;web&quot;</span><span class="token punctuation">)</span>\n    Image1 <span class="token operator">=</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span>\n    Image2 <span class="token operator">=</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span>\n    Video1 <span class="token operator">=</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span><span class="token string">&quot;video&quot;</span><span class="token punctuation">)</span>\n    Video2 <span class="token operator">=</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span><span class="token string">&quot;video&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Search <span class="token keyword">func</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> Result\n\n<span class="token keyword">func</span> <span class="token function">fakeSearch</span><span class="token punctuation">(</span>kind <span class="token builtin">string</span><span class="token punctuation">)</span> Search <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> Result <span class="token punctuation">{</span>\n              time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>\n              <span class="token keyword">return</span> <span class="token function">Result</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s result for %q\\n&quot;</span><span class="token punctuation">,</span> kind<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    results <span class="token operator">:=</span> <span class="token function">Google</span><span class="token punctuation">(</span><span class="token string">&quot;golang&quot;</span><span class="token punctuation">)</span>\n    elapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">First</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> replicas <span class="token operator">...</span>Search<span class="token punctuation">)</span> Result <span class="token punctuation">{</span>\n    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>replicas<span class="token punctuation">)</span><span class="token punctuation">)</span> \n    searchReplica <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> replicas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> replicas <span class="token punctuation">{</span>\n        <span class="token keyword">go</span> <span class="token function">searchReplica</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;-</span>c\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">Google</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>results <span class="token punctuation">[</span><span class="token punctuation">]</span>Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">First</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Web1<span class="token punctuation">,</span> Web2<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">First</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Image1<span class="token punctuation">,</span> Image2<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c <span class="token operator">&lt;-</span> <span class="token function">First</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> Video1<span class="token punctuation">,</span> Video2<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n    timeout <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">80</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>\n    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        <span class="token keyword">select</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> result <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c<span class="token punctuation">:</span>\n            results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>\n            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;timed out&quot;</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div>',22)];t.render=function(a,p,t,e,c,u){return n(),s("div",null,o)};export{p as __pageData,t as default};
