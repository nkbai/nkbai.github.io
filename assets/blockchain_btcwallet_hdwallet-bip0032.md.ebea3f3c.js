import{o as n,c as s,e as a}from"./app.f8197458.js";const e='{"title":"hdwallet-bip0032","description":"","frontmatter":{"title":"hdwallet-bip0032","date":"2019-05-20T08:33:25.957Z","draft":false,"markup":"mmark"},"headers":[{"level":3,"title":"BIP0032的核心就是子秘钥的推导","slug":"bip0032的核心就是子秘钥的推导"},{"level":3,"title":"为什么有强化衍生和普通衍生的区别","slug":"为什么有强化衍生和普通衍生的区别"},{"level":3,"title":"强化衍生和普通衍生的细节","slug":"强化衍生和普通衍生的细节"},{"level":3,"title":"父节点到子节点的三种推导方式","slug":"父节点到子节点的三种推导方式"},{"level":2,"title":"BIP0032树状私钥管理","slug":"bip0032树状私钥管理"},{"level":2,"title":"BIP0039 助记词","slug":"bip0039-助记词"},{"level":2,"title":"BIP0044 简介","slug":"bip0044-简介"}],"relativePath":"blockchain/btcwallet/hdwallet-bip0032.md","lastUpdated":1561507892000}',p={},t=[a('<h1 id="bip-0032-关于hdwallet解读"><a class="header-anchor" href="#bip-0032-关于hdwallet解读" aria-hidden="true">#</a> bip-0032-关于HDWallet解读</h1><h3 id="bip0032的核心就是子秘钥的推导"><a class="header-anchor" href="#bip0032的核心就是子秘钥的推导" aria-hidden="true">#</a> BIP0032的核心就是子秘钥的推导</h3><p>如何从父秘钥(父节点)推出子秘钥(子节点) 可以从父私钥到子私钥 也可以从父公钥到子公钥 也可以从父公钥到子私钥</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// Child returns a derived child extended key at the given index.  When this</span>\n<span class="token comment">// extended key is a private extended key (as determined by the IsPrivate</span>\n<span class="token comment">// function), a private extended key will be derived.  Otherwise, the derived</span>\n<span class="token comment">// extended key will be also be a public extended key.</span>\n<span class="token comment">//</span>\n<span class="token comment">// When the index is greater to or equal than the HardenedKeyStart constant, the</span>\n<span class="token comment">// derived extended key will be a hardened extended key.  It is only possible to</span>\n<span class="token comment">// derive a hardended extended key from a private extended key.  Consequently,</span>\n<span class="token comment">// this function will return ErrDeriveHardFromPublic if a hardened child</span>\n<span class="token comment">// extended key is requested from a public extended key.</span>\n<span class="token comment">//</span>\n<span class="token comment">// A hardened extended key is useful since, as previously mentioned, it requires</span>\n<span class="token comment">// a parent private extended key to derive.  In other words, normal child</span>\n<span class="token comment">// extended public keys can be derived from a parent public extended key (no</span>\n<span class="token comment">// knowledge of the parent private key) whereas hardened extended keys may not</span>\n<span class="token comment">// be.</span>\n<span class="token comment">//</span>\n<span class="token comment">// NOTE: There is an extremely small chance (&lt; 1 in 2^127) the specific child</span>\n<span class="token comment">// index does not derive to a usable child.  The ErrInvalidChild error will be</span>\n<span class="token comment">// returned if this should occur, and the caller is expected to ignore the</span>\n<span class="token comment">// invalid child and simply increment to the next index.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>k <span class="token operator">*</span>ExtendedKey<span class="token punctuation">)</span> <span class="token function">Child</span><span class="token punctuation">(</span>i <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ExtendedKey<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// Prevent derivation of children beyond the max allowed depth.</span>\n\t<span class="token keyword">if</span> k<span class="token punctuation">.</span>depth <span class="token operator">==</span> maxUint8 <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrDeriveBeyondMaxDepth\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// There are four scenarios that could happen here:</span>\n\t<span class="token comment">// 1) Private extended key -&gt; Hardened child private extended key</span>\n\t<span class="token comment">// 2) Private extended key -&gt; Non-hardened child private extended key</span>\n\t<span class="token comment">// 3) Public extended key -&gt; Non-hardened child public extended key</span>\n\t<span class="token comment">// 4) Public extended key -&gt; Hardened child public extended key (INVALID!)</span>\n\n\t<span class="token comment">// Case #4 is invalid, so error out early.</span>\n\t<span class="token comment">// A hardened child extended key may not be created from a public</span>\n\t<span class="token comment">// extended key.</span>\n\tisChildHardened <span class="token operator">:=</span> i <span class="token operator">&gt;=</span> HardenedKeyStart\n\t<span class="token keyword">if</span> <span class="token operator">!</span>k<span class="token punctuation">.</span>isPrivate <span class="token operator">&amp;&amp;</span> isChildHardened <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrDeriveHardFromPublic\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// The data used to derive the child key depends on whether or not the</span>\n\t<span class="token comment">// child is hardened per [BIP32].</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// For hardened children:</span>\n\t<span class="token comment">//   0x00 || ser256(parentKey) || ser32(i)</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// For normal children:</span>\n\t<span class="token comment">//   serP(parentPubKey) || ser32(i)</span>\n\tkeyLen <span class="token operator">:=</span> <span class="token number">33</span>\n\tdata <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> keyLen<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> isChildHardened <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Case #1.</span>\n\t\t<span class="token comment">// When the child is a hardened child, the key is known to be a</span>\n\t\t<span class="token comment">// private key due to the above early return.  Pad it with a</span>\n\t\t<span class="token comment">// leading zero as required by [BIP32] for deriving the child.</span>\n\t\t<span class="token function">copy</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span>key<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Case #2 or #3.</span>\n\t\t<span class="token comment">// This is either a public or private extended key, but in</span>\n\t\t<span class="token comment">// either case, the data which is used to derive the child key</span>\n\t\t<span class="token comment">// starts with the secp256k1 compressed public key bytes.</span>\n\t\t<span class="token function">copy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">.</span><span class="token function">pubKeyBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\tbinary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">PutUint32</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>keyLen<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n\n\t<span class="token comment">// Take the HMAC-SHA512 of the current key&#39;s chain code and the derived</span>\n\t<span class="token comment">// data:</span>\n\t<span class="token comment">//   I = HMAC-SHA512(Key = chainCode, Data = data)</span>\n\thmac512 <span class="token operator">:=</span> hmac<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>sha512<span class="token punctuation">.</span>New<span class="token punctuation">,</span> k<span class="token punctuation">.</span>chainCode<span class="token punctuation">)</span>\n\thmac512<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n\tilr <span class="token operator">:=</span> hmac512<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>\n\n\t<span class="token comment">// Split &quot;I&quot; into two 32-byte sequences Il and Ir where:</span>\n\t<span class="token comment">//   Il = intermediate key used to derive the child</span>\n\t<span class="token comment">//   Ir = child chain code</span>\n\til <span class="token operator">:=</span> ilr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>ilr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>\n\tchildChainCode <span class="token operator">:=</span> ilr<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>ilr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n\n\t<span class="token comment">// Both derived public or private keys rely on treating the left 32-byte</span>\n\t<span class="token comment">// sequence calculated above (Il) as a 256-bit integer that must be</span>\n\t<span class="token comment">// within the valid range for a secp256k1 private key.  There is a small</span>\n\t<span class="token comment">// chance (&lt; 1 in 2^127) this condition will not hold, and in that case,</span>\n\t<span class="token comment">// a child extended key can&#39;t be created for this index and the caller</span>\n\t<span class="token comment">// should simply increment to the next index.</span>\n\t<span class="token comment">//这里的2^127是怎么算出来的呢?</span>\n\t<span class="token comment">/*\n\tN=FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n\t如果il是均匀分布,那么出现大于N的可能性是P{il&gt;N}=(MaxUint256-N)/MaxUint256\n\t约等于1/(2^127)\n\t但是为什么要排除这种情况,而不是取模呢\n\t */</span>\n\tilNum <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>il<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> ilNum<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> ilNum<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrInvalidChild\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// The algorithm used to derive the child key depends on whether or not</span>\n\t<span class="token comment">// a private or public child is being derived.</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// For private children:</span>\n\t<span class="token comment">//   childKey = parse256(Il) + parentKey</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// For public children:</span>\n\t<span class="token comment">//   childKey = serP(point(parse256(Il)) + parentKey)</span>\n\t<span class="token keyword">var</span> isPrivate <span class="token builtin">bool</span>\n\t<span class="token keyword">var</span> childKey <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\t<span class="token keyword">if</span> k<span class="token punctuation">.</span>isPrivate <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Case #1 or #2.</span>\n\t\t<span class="token comment">// Add the parent private key to the intermediate private key to</span>\n\t\t<span class="token comment">// derive the final child key.</span>\n\t\t<span class="token comment">//</span>\n\t\t<span class="token comment">// childKey = parse256(Il) + parenKey</span>\n\t\tkeyNum <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>key<span class="token punctuation">)</span>\n\t\tilNum<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ilNum<span class="token punctuation">,</span> keyNum<span class="token punctuation">)</span>\n\t\tilNum<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>ilNum<span class="token punctuation">,</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>N<span class="token punctuation">)</span>\n\t\tchildKey <span class="token operator">=</span> ilNum<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\tisPrivate <span class="token operator">=</span> <span class="token boolean">true</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Case #3.</span>\n\t\t<span class="token comment">// Calculate the corresponding intermediate public key for</span>\n\t\t<span class="token comment">// intermediate private key.</span>\n\t\tilx<span class="token punctuation">,</span> ily <span class="token operator">:=</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>il<span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> ilx<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> ily<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrInvalidChild\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token comment">// Convert the serialized compressed parent public key into X</span>\n\t\t<span class="token comment">// and Y coordinates so it can be added to the intermediate</span>\n\t\t<span class="token comment">// public key.</span>\n\t\tpubKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> btcec<span class="token punctuation">.</span><span class="token function">ParsePubKey</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>key<span class="token punctuation">,</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token comment">// Add the intermediate public key to the parent public key to</span>\n\t\t<span class="token comment">// derive the final child key.</span>\n\t\t<span class="token comment">//</span>\n\t\t<span class="token comment">// childKey = serP(point(parse256(Il)) + parentKey)</span>\n\t\tchildX<span class="token punctuation">,</span> childY <span class="token operator">:=</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ilx<span class="token punctuation">,</span> ily<span class="token punctuation">,</span> pubKey<span class="token punctuation">.</span>X<span class="token punctuation">,</span> pubKey<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>\n\t\tpk <span class="token operator">:=</span> btcec<span class="token punctuation">.</span>PublicKey<span class="token punctuation">{</span>Curve<span class="token punctuation">:</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">:</span> childX<span class="token punctuation">,</span> Y<span class="token punctuation">:</span> childY<span class="token punctuation">}</span>\n\t\tchildKey <span class="token operator">=</span> pk<span class="token punctuation">.</span><span class="token function">SerializeCompressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token comment">/*\n\t\tchildKey对应的私钥是什么呢?\n\t\tK1=k1*G\n\t\tK2=k2*G\n\t\tK3=K1+K2=k1*G+k2*G=(k1+k2)*G\n\t\t因此K3对应的私钥是k1+k2\n\t\t所以childKey对应的私钥就是il+(k.key 对应的私钥)\n\t\t */</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// The fingerprint of the parent for the derived child is the first 4</span>\n\t<span class="token comment">// bytes of the RIPEMD160(SHA256(parentPubKey)).</span>\n\tparentFP <span class="token operator">:=</span> btcutil<span class="token punctuation">.</span><span class="token function">Hash160</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">pubKeyBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>\n\t<span class="token keyword">return</span> <span class="token function">NewExtendedKey</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>version<span class="token punctuation">,</span> childKey<span class="token punctuation">,</span> childChainCode<span class="token punctuation">,</span> parentFP<span class="token punctuation">,</span>\n\t\tk<span class="token punctuation">.</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> isPrivate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br></div></div><h3 id="为什么有强化衍生和普通衍生的区别"><a class="header-anchor" href="#为什么有强化衍生和普通衍生的区别" aria-hidden="true">#</a> 为什么有强化衍生和普通衍生的区别</h3><p>对于Index大于2^31的就是强化衍生(isChildHardened), 强化衍生使用父节点的私钥衍生Child的私钥和chainCode, 而普通衍生使用父节点的公钥衍生child的私钥和chainCode.</p><h3 id="强化衍生和普通衍生的细节"><a class="header-anchor" href="#强化衍生和普通衍生的细节" aria-hidden="true">#</a> 强化衍生和普通衍生的细节</h3><p>一下来自于extendkey.go中的Child函数, 这两种方式都是得到子节点的PrivateKey和childChainCode. 同时无法通过子节点的PrivateKey和childChainCode来倒推父节点的.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">if</span> isChildHardened <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Case #1.</span>\n\t\t<span class="token comment">// When the child is a hardened child, the key is known to be a</span>\n\t\t<span class="token comment">// private key due to the above early return.  Pad it with a</span>\n\t\t<span class="token comment">// leading zero as required by [BIP32] for deriving the child.</span>\n\t\t<span class="token function">copy</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span>key<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Case #2 or #3.</span>\n\t\t<span class="token comment">// This is either a public or private extended key, but in</span>\n\t\t<span class="token comment">// either case, the data which is used to derive the child key</span>\n\t\t<span class="token comment">// starts with the secp256k1 compressed public key bytes.</span>\n\t\t<span class="token function">copy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">.</span><span class="token function">pubKeyBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\tbinary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">PutUint32</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>keyLen<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n\n\t<span class="token comment">// Take the HMAC-SHA512 of the current key&#39;s chain code and the derived</span>\n\t<span class="token comment">// data:</span>\n\t<span class="token comment">//   I = HMAC-SHA512(Key = chainCode, Data = data)</span>\n\thmac512 <span class="token operator">:=</span> hmac<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>sha512<span class="token punctuation">.</span>New<span class="token punctuation">,</span> k<span class="token punctuation">.</span>chainCode<span class="token punctuation">)</span>\n\thmac512<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n    ilr <span class="token operator">:=</span> hmac512<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>\n    \t<span class="token comment">// Split &quot;I&quot; into two 32-byte sequences Il and Ir where:</span>\n\t<span class="token comment">//   Il = intermediate key used to derive the child</span>\n\t<span class="token comment">//   Ir = child chain code</span>\n\til <span class="token operator">:=</span> ilr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>ilr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>\n\tchildChainCode <span class="token operator">:=</span> ilr<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>ilr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="父节点到子节点的三种推导方式"><a class="header-anchor" href="#父节点到子节点的三种推导方式" aria-hidden="true">#</a> 父节点到子节点的三种推导方式</h3><h4 id="父私钥到子私钥"><a class="header-anchor" href="#父私钥到子私钥" aria-hidden="true">#</a> 父私钥到子私钥</h4><p>index大于2^31,</p><div class="language-go line-numbers-mode"><pre><code>ilr<span class="token operator">:=</span><span class="token function">sha512</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ParentPrivateKey<span class="token punctuation">,</span>index<span class="token punctuation">,</span>ParentChainCode<span class="token punctuation">)</span>\nchildPrivateKey<span class="token operator">:=</span>ilr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span>\nchildChainCode<span class="token operator">:=</span>ilr<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="父公钥到子私钥"><a class="header-anchor" href="#父公钥到子私钥" aria-hidden="true">#</a> 父公钥到子私钥</h4><p>index小于2^31</p><div class="language-go line-numbers-mode"><pre><code>ilr<span class="token operator">:=</span><span class="token function">sha512</span><span class="token punctuation">(</span>ParentPubicKey<span class="token punctuation">,</span>index<span class="token punctuation">,</span>ParentChainCode<span class="token punctuation">)</span>\nchildPrivateKey<span class="token operator">:=</span>ilr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span>\nchildChainCode<span class="token operator">:=</span>ilr<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="父公钥到子公钥"><a class="header-anchor" href="#父公钥到子公钥" aria-hidden="true">#</a> 父公钥到子公钥</h4><div class="language-go line-numbers-mode"><pre><code>ilr<span class="token operator">:=</span><span class="token function">sha512</span><span class="token punctuation">(</span>ParentPubicKey<span class="token punctuation">,</span>index<span class="token punctuation">,</span>ParentChainCode<span class="token punctuation">)</span>\nil<span class="token operator">:=</span>ilr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span>\nchildChainCode<span class="token operator">:=</span>ilr<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span>\n ilx<span class="token punctuation">,</span> ily <span class="token operator">:=</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>il<span class="token punctuation">)</span>\n childX<span class="token punctuation">,</span> childY <span class="token operator">:=</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ilx<span class="token punctuation">,</span> ily<span class="token punctuation">,</span> paretPubKey<span class="token punctuation">.</span>X<span class="token punctuation">,</span> paretPubKey<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>\n pk <span class="token operator">:=</span> btcec<span class="token punctuation">.</span>PublicKey<span class="token punctuation">{</span>Curve<span class="token punctuation">:</span> btcec<span class="token punctuation">.</span><span class="token function">S256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">:</span> childX<span class="token punctuation">,</span> Y<span class="token punctuation">:</span> childY<span class="token punctuation">}</span>\nchildPubKey <span class="token operator">=</span> pk<span class="token punctuation">.</span><span class="token function">SerializeCompressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>childKey对应的私钥是什么呢? K1=k1<em>G K2=k2</em>G K3=K1+K2=k1<em>G+k2</em>G=(k1+k2)*G 因此K3对应的私钥是k1+k2 所以childKey对应的私钥就是il+(k.key 对应的私钥)</p><p><strong>从推导过程可以看出,一旦子私钥暴露,这种方式会导致父私钥也暴露</strong> 不过这种也有明显的好处,就是我不需要知道父私钥,只需要知道父公钥和父chainCode就可以推导出所有需要的收款地址. 推导人自己都不知道推导出来的收款地址对应的私钥是什么.</p><h2 id="bip0032树状私钥管理"><a class="header-anchor" href="#bip0032树状私钥管理" aria-hidden="true">#</a> BIP0032树状私钥管理</h2><p><img alt="" data-src="./img/hdwallet_1.jpg" loading="lazy" class="lazy"></p><h2 id="bip0039-助记词"><a class="header-anchor" href="#bip0039-助记词" aria-hidden="true">#</a> BIP0039 助记词</h2><p><img alt="" data-src="./img/hdwallet_2.jpg" loading="lazy" class="lazy"></p><p>从助记词到Seed过程要计算起来非常耗时,否则容易被暴力攻破 <img alt="" data-src="./img/hdwallet_3.jpg" loading="lazy" class="lazy"></p><h2 id="bip0044-简介"><a class="header-anchor" href="#bip0044-简介" aria-hidden="true">#</a> BIP0044 简介</h2><p>BIP 0044实际上是如何规范使用bip0032,我们一般的钱包都是树状的, 这部分我没看懂,他是怎么管理的.</p><p>m / purpose&#39; / coin_type&#39; / account&#39; / change / address_index purpose总是44, 第二层的coin_type有相关规范,自行查询即可 account就是对应钱包中的account</p><p>第一层的 purpose 总是被设定为 44&#39;。 第二层的“coin_type”特指币种并且允许多元货币 HD 钱包中的货币在第二个层级 下有自己的亚树状结构。目前有三种货币被定义：Bitcoin is m/44&#39;/0&#39;、Bitcoin Testnet is m/44&#39;/1&#39;，以及 Litecoin is m/44&#39;/2&#39;。 树的第三层级是“account”，这可以允许使用者为了会计或者组织目的，而去再细 分他们的钱包到独立的逻辑性亚账户。 举个例子，一个 HD 钱包可能包含两个比 特币“账户”：m/44&#39;/0&#39;/0&#39; 和 m/44&#39;/0&#39;/1&#39;。每个账户都是它自己亚树的根。</p><p>第四层级就是“change”。每一个 HD 钱包有两个亚树，一个是用来接收地址一个是 用来创造找零地址。注意无论先前的层级是否使用强化衍生，这一层级使用的都 是常规衍生。这是为了允许这一层级的树可以在不安全环境下，输出扩展公钥。</p><p>被 HD 钱包衍生的可用的地址是第四层级的子级，就是第五层级的树的 “address_index”。比如，第三个层级的主账户收到比特币支付的地址就是 M/44&#39;/0&#39;/0&#39;/0/2。 表 5-7 展示了更多的例子。</p><table><thead><tr><th>HD路径</th><th>主要描述</th></tr></thead><tbody><tr><td>M/44&#39;/0&#39;/0&#39;/0/2</td><td>第三个收到公共钥匙的主比特币账户</td></tr><tr><td>M/44&#39;/0&#39;/3&#39;/1/14</td><td>第十五个改变地址公钥的第四个比特币账户</td></tr><tr><td>m/44&#39;/2&#39;/0&#39;/0/1</td><td>为了签署交易的在莱特币主账户的第二个私钥</td></tr></tbody></table>',32)];p.render=function(a,e,p,c,o,l){return n(),s("div",null,t)};export{e as __pageData,p as default};
