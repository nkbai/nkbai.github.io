import{_ as s,c as n,o as a,N as l}from"./chunks/framework.3a9190c5.js";const F=JSON.parse('{"title":"比特币解锁脚本中的ScriptSignature都包含了什么东西","description":"","frontmatter":{"title":"比特币解锁脚本中的ScriptSignature都包含了什么东西","date":"2018-11-13T10:46:41.000Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/btcd/比特币解锁脚本中的ScriptSignature都包含了什么东西.md"}'),p={name:"blockchain/btcd/比特币解锁脚本中的ScriptSignature都包含了什么东西.md"},e=l(`<h1 id="比特币-script-signature-包含了那些东西" tabindex="-1">比特币 script signature 包含了那些东西? <a class="header-anchor" href="#比特币-script-signature-包含了那些东西" aria-label="Permalink to &quot;比特币 script signature 包含了那些东西?&quot;">​</a></h1><p>使用 UTXO 需要私钥签名,私钥到底都签了什么东西呢?一直比较好奇. 比特币的私钥签名总共有五中类型,具体见 btcd 代码,如下:</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// SigHashType represents hash type bits at the end of a signature.</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SigHashType</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Hash type bits from the end of a signature.</span></span>
<span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	SigHashOld          SigHashType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x0</span></span>
<span class="line"><span style="color:#A6ACCD;">	SigHashAll          SigHashType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x1</span></span>
<span class="line"><span style="color:#A6ACCD;">	SigHashNone         SigHashType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x2</span></span>
<span class="line"><span style="color:#A6ACCD;">	SigHashSingle       SigHashType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x3</span></span>
<span class="line"><span style="color:#A6ACCD;">	SigHashAnyOneCanPay SigHashType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x80</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// sigHashMask defines the number of bits of the hash type which is used</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// to identify which outputs are signed.</span></span>
<span class="line"><span style="color:#A6ACCD;">	sigHashMask </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x1f</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h1 id="sighashold-和-sighashall" tabindex="-1">SigHashOld 和 SigHashAll <a class="header-anchor" href="#sighashold-和-sighashall" aria-label="Permalink to &quot;SigHashOld 和 SigHashAll&quot;">​</a></h1><p>从代码看,两者是一样的.具体签名内容见图.</p><h2 id="签名内容计算方式" tabindex="-1">签名内容计算方式 <a class="header-anchor" href="#签名内容计算方式" aria-label="Permalink to &quot;签名内容计算方式&quot;">​</a></h2><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// calcSignatureHash will, given a script and hash type for the current script</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// engine instance, calculate the signature hash to be used for signing and</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// verification.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//script 是引用的outpoint对应的输出的锁定脚本</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//SigHashType 可能是</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// SigHashOld          SigHashType = 0x0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// SigHashAll          SigHashType = 0x1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// SigHashNone         SigHashType = 0x2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// SigHashSingle       SigHashType = 0x3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// SigHashAnyOneCanPay SigHashType = 0x80</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//tx是这整个交易</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//idx 是交易中输入部分的编号</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">calcSignatureHash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">script </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">parsedOpcode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hashType SigHashType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> tx </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">wire</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MsgTx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> idx </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// The SigHashSingle signature type signs only the corresponding input</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// and output (the output with the same index number as the input).</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Since transactions can have more inputs than outputs, this means it</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// is improper to use SigHashSingle on input indices that don&#39;t have a</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// corresponding output.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// A bug in the original Satoshi client implementation means specifying</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// an index that is out of range results in a signature hash of 1 (as a</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// uint256 little endian).  The original intent appeared to be to</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// indicate failure, but unfortunately, it was never checked and thus is</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// treated as the actual signature hash.  This buggy behavior is now</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// part of the consensus and a hard fork would be required to fix it.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Due to this, care must be taken by software that creates transactions</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// which make use of SigHashSingle because it can lead to an extremely</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// dangerous situation where the invalid inputs will end up signing a</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// hash of 1.  This in turn presents an opportunity for attackers to</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// cleverly construct transactions which can steal those coins provided</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// they can reuse signatures.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> hashType</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">sigHashMask </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> SigHashSingle </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> idx </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxOut</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> hash chainhash</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Hash</span></span>
<span class="line"><span style="color:#A6ACCD;">		hash</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x01</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> hash</span><span style="color:#89DDFF;">[:]</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Remove all instances of OP_CODESEPARATOR from the script.</span></span>
<span class="line"><span style="color:#A6ACCD;">	script </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeOpcode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> OP_CODESEPARATOR</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// Make a deep copy of the transaction, zeroing out the script for all</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// inputs that are not currently being processed.</span></span>
<span class="line"><span style="color:#A6ACCD;">	txCopy </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> tx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Copy</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxIn </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> idx </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// UnparseScript cannot fail here because removeOpcode</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">// above only returns a valid script.</span></span>
<span class="line"><span style="color:#A6ACCD;">			sigScript</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unparseScript</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxIn</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">idx</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">SignatureScript </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sigScript</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxIn</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">SignatureScript </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> hashType </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> sigHashMask </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> SigHashNone</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">		txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxOut </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxOut</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Empty slice.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxIn </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> idx </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">				txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxIn</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">Sequence </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> SigHashSingle</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Resize output array to up to and including requested index.</span></span>
<span class="line"><span style="color:#A6ACCD;">		txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxOut </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxOut</span><span style="color:#89DDFF;">[:</span><span style="color:#A6ACCD;">idx</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// All but current output get zeroed out.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> idx</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxOut</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">Value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">			txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxOut</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">PkScript </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Sequence on all other inputs is 0, too.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxIn </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> idx </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">				txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxIn</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">Sequence </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Consensus treats undefined hashtypes like normal SigHashAll</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// for purposes of hash generation.</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">fallthrough</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> SigHashOld</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">fallthrough</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> SigHashAll</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;">// Nothing special here.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> hashType</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">SigHashAnyOneCanPay </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxIn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TxIn</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">idx </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> idx</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// The final hash is the double sha256 of both the serialized modified</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// transaction and the hash type (encoded as a 4-byte little-endian</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">// value) appended.</span></span>
<span class="line"><span style="color:#A6ACCD;">	wbuf </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> bytes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewBuffer</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SerializeSizeStripped</span><span style="color:#89DDFF;">()+</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">	txCopy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SerializeNoWitness</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">wbuf</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	binary</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Write</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">wbuf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> binary</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">LittleEndian</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hashType</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> chainhash</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">DoubleHashB</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">wbuf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Bytes</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br></div></div>`,7),o=[e];function t(c,r,i,y,D,C){return a(),n("div",null,o)}const b=s(p,[["render",t]]);export{F as __pageData,b as default};
