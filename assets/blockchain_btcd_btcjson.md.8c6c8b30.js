import{o as n,c as s,e as a}from"./app.d48cc1fc.js";const p='{"title":"btcjson","description":"","frontmatter":{"title":"btcjson","date":"2018-12-26T03:19:02.000Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"1. 注册","slug":"_1-注册"},{"level":2,"title":"2. 命令处理","slug":"_2-命令处理"},{"level":2,"title":"3. 客户端使用","slug":"_3-客户端使用"},{"level":2,"title":"4. 其他","slug":"_4-其他"},{"level":3,"title":"","slug":""}],"relativePath":"blockchain/btcd/btcjson.md","lastUpdated":1641604782309}',e={},t=[a('<h1 id="btcd-btcjson-如何管理命令"><a class="header-anchor" href="#btcd-btcjson-如何管理命令" aria-hidden="true">#</a> btcd/btcjson 如何管理命令</h1><p>以debuglevel命令为例来说明btcd对于rpc命令是如何组织的.</p><h2 id="_1-注册"><a class="header-anchor" href="#_1-注册" aria-hidden="true">#</a> 1. 注册</h2><p>通过此方式可以注册一个新的命令,</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// DebugLevelCmd defines the debuglevel JSON-RPC command.  This command is not a</span>\n<span class="token comment">// standard Bitcoin command.  It is an extension for btcd.</span>\n<span class="token keyword">type</span> DebugLevelCmd <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tLevelSpec <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token function">MustRegisterCmd</span><span class="token punctuation">(</span><span class="token string">&quot;debuglevel&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>DebugLevelCmd<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>MustRegisterCmd 最终通过RegisterCmd来实现命令注册,这里面用到了不少反射代码来简化函数的调用.</p><p>最终MustRegisterCmd提供信息会保存到三个全局map中,</p><div class="language-go line-numbers-mode"><pre><code>\tmethodToConcreteType <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>\n\tmethodToInfo         <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>methodInfo<span class="token punctuation">)</span>\n\tconcreteTypeToMethod <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中methodToInfo 的key是<code>debuglevel</code>,用于对该命令进行描述,为btcctl help 提供信息,也是rpc server检测提供参数格式是否正确的依据.</p><p>btcctl help中的信息还有一部分来源就是helpDescsEnUS中,</p><p>其中methodToConcreteType和concreteTypeToMethod是互为映射,主要是为了帮助创建DebugLevelCmd结构体.以及根据这个结构体找到对应的命令. 针对这个命令来说,三个map中会写入如下信息</p><div class="language-go line-numbers-mode"><pre><code>methodToConcreteType<span class="token punctuation">[</span><span class="token string">&quot;debuglevel&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>DebugLevelCmd<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nmethodToInfo<span class="token punctuation">[</span><span class="token string">&quot;debuglevel&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;该结构体的信息&quot;</span>\nconcreteTypeToMethod<span class="token punctuation">[</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>DebugLevelCmd<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;debuglevel&quot;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>**注意这里面并没有定义如何处理这个命令. **</p><h2 id="_2-命令处理"><a class="header-anchor" href="#_2-命令处理" aria-hidden="true">#</a> 2. 命令处理</h2><p>rpc server对一个命令的处理入口主要在rpcserver.go中,还是以debuglevel这个命令为例. 在rpcHandlersBeforeInit可以看到 &quot;debuglevel&quot;对应的处理函数是handleDebugLevel</p><div class="language-go line-numbers-mode"><pre><code>\n<span class="token comment">// handleDebugLevel handles debuglevel commands.</span>\n<span class="token keyword">func</span> <span class="token function">handleDebugLevel</span><span class="token punctuation">(</span>s <span class="token operator">*</span>rpcServer<span class="token punctuation">,</span> cmd <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> closeChan <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tc <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>btcjson<span class="token punctuation">.</span>DebugLevelCmd<span class="token punctuation">)</span>\n\n\t<span class="token comment">// Special show command to list supported subsystems.</span>\n\t<span class="token keyword">if</span> c<span class="token punctuation">.</span>LevelSpec <span class="token operator">==</span> <span class="token string">&quot;show&quot;</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Supported subsystems %v&quot;</span><span class="token punctuation">,</span>\n\t\t\t<span class="token function">supportedSubsystems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n\t<span class="token punctuation">}</span>\n\n\terr <span class="token operator">:=</span> <span class="token function">parseAndSetDebugLevels</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>LevelSpec<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>btcjson<span class="token punctuation">.</span>RPCError<span class="token punctuation">{</span>\n\t\t\tCode<span class="token punctuation">:</span>    btcjson<span class="token punctuation">.</span>ErrRPCInvalidParams<span class="token punctuation">.</span>Code<span class="token punctuation">,</span>\n\t\t\tMessage<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> <span class="token string">&quot;Done.&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>走到这里的时候,框架已经做完参数解析以及初步验证,还有就是告诉你如何返回结果. cmd 参数就是DebugLevelCmd结构体.处理完毕以后直接返回结果即可.</p><p>需要说明的是closeChan一般不用,如果你处理的是一个长时间不能返回的任务,那么这时候有可能客户端已经停止请求了,这时候处理函数可以通过closeChan检测到这种情况来停止任务,然后返回一个错误信息. 比如<code>return nil, ErrClientQuit</code></p><h2 id="_3-客户端使用"><a class="header-anchor" href="#_3-客户端使用" aria-hidden="true">#</a> 3. 客户端使用</h2><p>具体见btcctl.go</p><div class="language-go line-numbers-mode"><pre><code>\tcmd<span class="token punctuation">,</span> err <span class="token operator">:=</span> btcjson<span class="token punctuation">.</span><span class="token function">NewCmd</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> params<span class="token operator">...</span><span class="token punctuation">)</span>\n\tmarshalledJSON<span class="token punctuation">,</span> err <span class="token operator">:=</span> btcjson<span class="token punctuation">.</span><span class="token function">MarshalCmd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>\n\tresult<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">sendPostRequest</span><span class="token punctuation">(</span>marshalledJSON<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>\n\t<span class="token comment">//result就是命令的执行结果,根据情况进行解析</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_4-其他"><a class="header-anchor" href="#_4-其他" aria-hidden="true">#</a> 4. 其他</h2><p>rpcserver是提供了外部使用者如何调控一个正在运行的btcd全节点.</p><ul><li>提供的接口完全兼容bitcoind.</li><li>没有钱包相关功能</li><li>很多命令提供的功能可以在btcd.conf预置 <ul><li>比如可以在btcd.conf中指定debuglevel</li></ul></li></ul><h3 id=""><a class="header-anchor" href="#" aria-hidden="true">#</a></h3>',25)];e.render=function(a,p,e,o,c,l){return n(),s("div",null,t)};export{p as __pageData,e as default};
