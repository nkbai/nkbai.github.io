import{_ as a,c as e,o,N as l}from"./chunks/framework.3a9190c5.js";const g=JSON.parse('{"title":"让photon支持go module","description":"","frontmatter":{"title":"让photon支持go module","date":"2018-11-07T12:35:46.000Z","draft":false,"markup":"mmark"},"headers":[],"relativePath":"blockchain/ethereum/让photon支持go module.md"}'),n={name:"blockchain/ethereum/让photon支持go module.md"},s=l(`<h1 id="如何让你的项目同时支持go-vendor和go-module" tabindex="-1">如何让你的项目同时支持go vendor和go module <a class="header-anchor" href="#如何让你的项目同时支持go-vendor和go-module" aria-label="Permalink to &quot;如何让你的项目同时支持go vendor和go module&quot;">​</a></h1><ul><li><a href="#如何让你的项目同时支持go-vendor和go-module">如何让你的项目同时支持go vendor和go module</a><ul><li><a href="#1-go-module简介">1. go module简介</a></li><li><a href="#2-使用go-mod命令管理项目">2. 使用go mod命令管理项目</a><ul><li><a href="#21-初始化环境">2.1 初始化环境</a></li><li><a href="#22-构建">2.2 构建</a><ul><li><a href="#221-需要翻墙的源码怎么办">2.2.1 需要翻墙的源码怎么办?</a></li><li><a href="#222-我依赖的不能是最新的代码怎么办">2.2.2 我依赖的不能是最新的代码怎么办</a></li><li><a href="#223-我依赖的某个项目是我修改过的和官方版本不一样怎么办">2.2.3 我依赖的某个项目是我修改过的,和官方版本不一样怎么办</a></li><li><a href="#224-其他注意事项">2.2.4 其他注意事项</a></li></ul></li></ul></li><li><a href="#3-保持兼容性">3. 保持兼容性</a></li><li><a href="#4-使用goland来管理你的新版项目">4. 使用goland来\b管理你的新版项目</a></li></ul></li></ul><h2 id="_1-go-module简介" tabindex="-1">1. go module简介 <a class="header-anchor" href="#_1-go-module简介" aria-label="Permalink to &quot;1. go module简介&quot;">​</a></h2><p>go module是go在1.11版本引入的新的版本依赖工具,是对vendor方式的一次升级. 目前是如果项目位于GOPATH下则会默认禁用go modoule,否则就会默认启用.</p><p>因此首先需要将项目移出GOPATH,假设位于~/dev/smmodule目录下.</p><h2 id="_2-使用go-mod命令管理项目" tabindex="-1">2. 使用go mod命令管理项目 <a class="header-anchor" href="#_2-使用go-mod命令管理项目" aria-label="Permalink to &quot;2. 使用go mod命令管理项目&quot;">​</a></h2><p>这里以我们的Photon项目为例,来说明如何实施.</p><h3 id="_2-1-初始化环境" tabindex="-1">2.1 初始化环境 <a class="header-anchor" href="#_2-1-初始化环境" aria-label="Permalink to &quot;2.1 初始化环境&quot;">​</a></h3><p><code>cd ~/dev/smmodule/Photon</code> 切换到项目以后首先要初始化.为了避免带来莫名其妙的问题,建议先将vendor目录移到其他地方,待配置完毕以后再移回来.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/dev/smmodule/Photon</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这时就会在Photon下产生了go.mod 文件,如果打开就会看到只有一句话</p><div class="language-go.mod line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go.mod</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">module github.com/nkbai/Photon</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这个路径是因为我这个项目在github上的路径是 github.com/nkbai/Photon ,但是实际上,我这个项目只是module github.com/SmartMeshFoundation/Photon ,所以需要直接将其内容修改为</p><div class="language-go.mod line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go.mod</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">module github.com/SmartMeshFoundation/Photon</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-2-构建" tabindex="-1">2.2 构建 <a class="header-anchor" href="#_2-2-构建" aria-label="Permalink to &quot;2.2 构建&quot;">​</a></h3><p>这时候我们进入cmd/photon目录,执行<code>go build</code>命令,进行编译.这时候就会看到go会根据项目代码自动下载所有依赖的项目代码. 这个过程可能会碰到各种问题.下面就常见的问题列出来.</p><h4 id="_2-2-1-需要翻墙的源码怎么办" tabindex="-1">2.2.1 需要翻墙的源码怎么办? <a class="header-anchor" href="#_2-2-1-需要翻墙的源码怎么办" aria-label="Permalink to &quot;2.2.1 需要翻墙的源码怎么办?&quot;">​</a></h4><p>直接打开go.mod 添加replace项, 比如:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">replace (</span></span>
<span class="line"><span style="color:#A6ACCD;">	golang.org/x/net v0.0.0-20181106171534-e4dc69e5b2fd =&gt; github.com/golang/net latest</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这表示系统依赖的 golang.org/x/net v0.0.0 这个版本应该从github.com/golang/net 这个地方下载<code>latest</code>也就是最新版本.</p><h4 id="_2-2-2-我依赖的不能是最新的代码怎么办" tabindex="-1">2.2.2 我依赖的不能是最新的代码怎么办 <a class="header-anchor" href="#_2-2-2-我依赖的不能是最新的代码怎么办" aria-label="Permalink to &quot;2.2.2 我依赖的不能是最新的代码怎么办&quot;">​</a></h4><p>我们的项目以前用的是vendor方式,可能依赖的是某个项目较早的版本,但是go下载的确实最新的版本,这时候只需到项目主页找到你依赖的版本号即可.</p><p>比如Photon依赖的storm,go自动下载的是最新的2.1.2,但是无法编译. 这时候就需要打开go.mod 直接修改 比如我这里直接将 github.com/asdine/storm v2.1.2+incompatible 修改为v2.1.1</p><p>这样就可以正常编译了.</p><h4 id="_2-2-3-我依赖的某个项目是我修改过的-和官方版本不一样怎么办" tabindex="-1">2.2.3 我依赖的某个项目是我修改过的,和官方版本不一样怎么办 <a class="header-anchor" href="#_2-2-3-我依赖的某个项目是我修改过的-和官方版本不一样怎么办" aria-label="Permalink to &quot;2.2.3 我依赖的某个项目是我修改过的,和官方版本不一样怎么办&quot;">​</a></h4><p>比如Photon依赖的go-ethereum实际上不是官方的任何一个版本,是根据我们自己的需要,做了修改的版本. 那么这时候也很简单,直接clone一个官方的版本到自己的github上,然后修改. 待修改完毕以后,新建一个版本即可.</p><p>比如我就把 github.com/ethereum/go-ethereum clone到我自己的github上,然后按照vendor中的修改重新来一遍,然后打了一个v1.9.1的tag.</p><p>然后同样replace成下面的. replace ( github.com/ethereum/go-ethereum v1.8.17 =&gt; github.com/nkbai/go-ethereum v1.9.1 )</p><h4 id="_2-2-4-其他注意事项" tabindex="-1">2.2.4 其他注意事项 <a class="header-anchor" href="#_2-2-4-其他注意事项" aria-label="Permalink to &quot;2.2.4 其他注意事项&quot;">​</a></h4><p>由于go mod目前处于较早起版本,我们手工修改文件要特别注意 否则会碰到莫名其妙的问题.我说一下我碰到的两个问题</p><ul><li><ol><li>replace和(之间的空格一定不能少</li></ol></li><li><ol start="2"><li>=&gt; 前后的空格一定不能少</li></ol></li><li><ol start="3"><li>如果替换的版本号不知道是多少,直接写latest,go会自己找到最新版本填上去.</li></ol></li></ul><h2 id="_3-保持兼容性" tabindex="-1">3. 保持兼容性 <a class="header-anchor" href="#_3-保持兼容性" aria-label="Permalink to &quot;3. 保持兼容性&quot;">​</a></h2><p>将原来的vendor目录移回来,这时候你会发现项目没什么变化,只是多了两个go.mod和go.sum两个文件,直接添加将其提交到github即可.</p><p>这时候,你这个项目既可以在GOPA\b\b\b\bTH下像以前一样管理,也可以在独立的其他目录中编译运行.</p><h2 id="_4-使用goland来管理你的新版项目" tabindex="-1">4. 使用goland来\b管理你的新版项目 <a class="header-anchor" href="#_4-使用goland来管理你的新版项目" aria-label="Permalink to &quot;4. 使用goland来\b管理你的新版项目&quot;">​</a></h2><p>记得新建项目,并且在新建的时候选择go module即可.</p>`,36),t=[s];function r(i,p,d,c,h,u){return o(),e("div",null,t)}const b=a(n,[["render",r]]);export{g as __pageData,b as default};
