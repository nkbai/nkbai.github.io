import{o as n,c as s,e as a}from"./app.3f14a1b4.js";const p='{"title":"go 笔记","description":"","frontmatter":{"title":"go 笔记","date":"2018-04-28T03:06:23.000Z","draft":false},"headers":[{"level":2,"title":"channel","slug":"channel-1"},{"level":3,"title":"多个send的情形","slug":"多个send的情形"}],"relativePath":"other/learn_go.md","lastUpdated":1641604782000}',e={},t=[a('<h1 id="go-笔记"><a class="header-anchor" href="#go-笔记" aria-hidden="true">#</a> go 笔记</h1><h1 id="defer"><a class="header-anchor" href="#defer" aria-hidden="true">#</a> defer</h1><p>defer 的参数绑定是在 defer 时，而不是在执行时，和 go 是一样的。</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>会输出4 3 2 1 0</p><h1 id="make-new"><a class="header-anchor" href="#make-new" aria-hidden="true">#</a> make &amp;&amp; new</h1><p>make 只能应用于 slice，map，channel，返回的不是指针。 以 slice 为例，一个 slice 是引用 copy，但是每个 slice 结构体战三个字。</p><h1 id="channel"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> channel</h1><p>range 用法，以及如何idiomatic的使用 closure</p><div class="language-"><pre><code>func handle(queue chan *Request) {\n    for r := range queue {\n        process(r)\n    }\n}\n\nfunc Serve(queue chan *Request) {\n    for req := range queue {\n        req := req // Create new instance of req for the goroutine.\n        sem &lt;- 1\n        go func() {\n            process(req)\n            &lt;-sem\n        }()\n    }\n}\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h1 id="panic"><a class="header-anchor" href="#panic" aria-hidden="true">#</a> panic</h1><p>panic可以用作复杂的错误处理，但是如果是用作错误处理，不要把 panic 暴露到包外。</p><p>Useful though this pattern is, it should be used only within a package. Parse turns its internal panic calls into error values; it does not expose panics to its client. That is a good rule to follow.</p><div class="language-go line-numbers-mode"><pre><code>\n<span class="token comment">// error is a method of *Regexp that reports parsing errors by</span>\n<span class="token comment">// panicking with an Error.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>regexp <span class="token operator">*</span>Regexp<span class="token punctuation">)</span> <span class="token function">error</span><span class="token punctuation">(</span>err <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Compile returns a parsed representation of the regular expression.</span>\n<span class="token keyword">func</span> <span class="token function">Compile</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>regexp <span class="token operator">*</span>Regexp<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    regexp <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Regexp<span class="token punctuation">)</span>\n    <span class="token comment">// doParse will panic if there is a parse error.</span>\n    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> e <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n            regexp <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token comment">// Clear return value.</span>\n            err <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span> <span class="token comment">// Will re-panic if not a parse error.</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> regexp<span class="token punctuation">.</span><span class="token function">doParse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="channel-1"><a class="header-anchor" href="#channel-1" aria-hidden="true">#</a> channel</h2><h3 id="多个send的情形"><a class="header-anchor" href="#多个send的情形" aria-hidden="true">#</a> 多个send的情形</h3><p>golang中的channel可以看做是一个加锁的buffer,所以是可以当做rust中的MPMC来使用的. 按照设计,channel close的一方必须是sender,那么如果有多个sender会是什么结果呢?</p><p>下面的这种情况是会panic的.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token function">TestSend</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\tc <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\tSendAndSleep <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t\t\tt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%d panic&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\tt<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">&quot;s %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n\t\tc <span class="token operator">&lt;-</span> <span class="token number">3</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">go</span> <span class="token function">SendAndSleep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\t<span class="token keyword">go</span> <span class="token function">SendAndSleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\t<span class="token keyword">go</span> <span class="token function">SendAndSleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\ttime<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>\n\t<span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n\ttime<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>其中一种输出是:</p><div class="language-"><pre><code>    cfg_test.go:44: s 1\n    cfg_test.go:44: s 0\n    cfg_test.go:44: s 2\n    cfg_test.go:41: 2 panic\n    cfg_test.go:41: 0 panic\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',21)];e.render=function(a,p,e,o,c,l){return n(),s("div",null,t)};export{p as __pageData,e as default};
