import{o as n,c as s,f as a,e as p}from"./app.f7f738b8.js";const t='{"title":"2.在Libra中学习Protobuf","description":"","frontmatter":{"title":"2.在Libra中学习Protobuf","date":"2019-06-23T03:00:34.000Z","draft":false,"tags":["rust","blockchain","libra"],"series":["libra"],"categories":["技术相关"]},"headers":[{"level":2,"title":"编译安装相关依赖","slug":"编译安装相关依赖"},{"level":3,"title":"找一个文件试试","slug":"找一个文件试试"},{"level":2,"title":"利用build.rs自动将proto编译成rs","slug":"利用build-rs自动将proto编译成rs"},{"level":3,"title":"build.rs","slug":"build-rs"},{"level":3,"title":"简单解读build_helper","slug":"简单解读build-helper"},{"level":3,"title":"rust中的字符串处理","slug":"rust中的字符串处理"},{"level":2,"title":"FromProto和IntoProto","slug":"fromproto和intoproto"}],"relativePath":"libra/2.Protobuf_in_libria.md","lastUpdated":1564531739000}',e={},o=p('<ul><li><a href="#%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96"> 编译安装相关依赖</a><ul><li><a href="#%E6%89%BE%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E8%AF%95%E8%AF%95"> 找一个文件试试</a></li></ul></li><li><a href="#%E5%88%A9%E7%94%A8buildrs%E8%87%AA%E5%8A%A8%E5%B0%86proto%E7%BC%96%E8%AF%91%E6%88%90rs"> 利用build.rs自动将proto编译成rs</a><ul><li><a href="#buildrs"> build.rs</a></li><li><a href="#rust%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86"> rust中的字符串处理</a></li></ul></li><li><a href="#fromproto%E5%92%8Cintoproto"> FromProto和IntoProto</a></li></ul>',1),c=p('<h2 id="编译安装相关依赖"><a class="header-anchor" href="#编译安装相关依赖" aria-hidden="true">#</a> 编译安装相关依赖</h2><p>通过执行<code>./scripts/dev_setup.sh</code>是可以自动安装相关依赖以及编译整个libra系统的. 如果想自己手工安装protobuf相关依赖可以安装如下步骤:</p><div class="language-bash line-numbers-mode"><pre><code>cargo <span class="token function">install</span> protobuf\ncargo <span class="token function">install</span> protobuf-codegen\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意:我当前使用的是v2.6.2</p><h3 id="找一个文件试试"><a class="header-anchor" href="#找一个文件试试" aria-hidden="true">#</a> 找一个文件试试</h3><p>这是我从libra中抠出来的,非源文件,位于transaction.proto.</p><div class="language-proto line-numbers-mode"><pre><code>syntax = &quot;proto3&quot;;\n\npackage types;\n// Account state as a whole.\n// After execution, updates to accounts are passed in this form to storage for\n// persistence.\nmessage AccountState {\n    // Account address\n    bytes address = 1;\n    // Account state blob\n    bytes blob = 2;\n}\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>运行下面的命令:</p><div class="language-"><pre><code>protoc --rust_out . accountstate.proto \n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p><a href="http://xn--accountstate-ft4sze8sn0h1zas29ai3an9w6j2ark5aq02b653exua.rs" target="_blank" rel="noopener noreferrer">可以看到目录下会多出来一个accountstate.rs</a> 简单看一下生成的AccountState结构体</p><div class="language-rust line-numbers-mode"><pre><code><span class="token attribute attr-name">#[derive(PartialEq,Clone,Default)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">AccountState</span> <span class="token punctuation">{</span>\n    <span class="token comment">// message fields</span>\n    <span class="token keyword">pub</span> address<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> blob<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token comment">// special fields</span>\n    <span class="token keyword">pub</span> unknown_fields<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">protobuf<span class="token punctuation">::</span></span><span class="token class-name">UnknownFields</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> cached_size<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">protobuf<span class="token punctuation">::</span></span><span class="token class-name">CachedSize</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>default<span class="token punctuation">::</span></span><span class="token class-name">Default</span> <span class="token keyword">for</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">AccountState</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">AccountState</span> <span class="token punctuation">{</span>\n        <span class="token operator">&lt;</span><span class="token class-name">AccountState</span> <span class="token keyword">as</span> <span class="token punctuation">::</span><span class="token namespace">protobuf<span class="token punctuation">::</span></span><span class="token class-name">Message</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">default_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">AccountState</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">AccountState</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>default<span class="token punctuation">::</span></span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// bytes address = 1;</span>\n\n\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>address\n    <span class="token punctuation">}</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">clear_address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>address<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Param is passed by value, moved</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>address <span class="token operator">=</span> v<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Mutable pointer to the field.</span>\n    <span class="token comment">// If field is not initialized, it is initialized with default value first.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">mut_address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>address\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Take field</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">take_address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// bytes blob = 2;</span>\n\n\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_blob</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>blob\n    <span class="token punctuation">}</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">clear_blob</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>blob<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Param is passed by value, moved</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_blob</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>blob <span class="token operator">=</span> v<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Mutable pointer to the field.</span>\n    <span class="token comment">// If field is not initialized, it is initialized with default value first.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">mut_blob</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>blob\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Take field</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">take_blob</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>blob<span class="token punctuation">,</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><p>除了这些,还为AccountState自动生成了protobuf::Message,protobuf::Clear和std::fmt::Debug接口.</p><p>*<em>注意如果是Service的话,一样会自动生成一个</em>_grpc.rs文件,用于服务的实现.</p><h2 id="利用build-rs自动将proto编译成rs"><a class="header-anchor" href="#利用build-rs自动将proto编译成rs" aria-hidden="true">#</a> 利用build.rs自动将proto编译成rs</h2><p>rust在工程化方面做的非常友好,我们可以编译的过程都可以介入. <a href="http://xn--build-bi1hrti9a3z5djeg0sj7pipnom1c4ycs61irqba5624n.rs" target="_blank" rel="noopener noreferrer">也就是如果我们的项目目录下有build.rs</a>,那么在运行cargo build之前会自动编译然后运行此程序. 相当于在项目目录下运行<code>cargo run build.rs</code>然后再去build. 这看起来有点类似于go中的<code>//go:generate command argument...</code>,但是要更为强大,更为灵活.</p><h3 id="build-rs"><a class="header-anchor" href="#build-rs" aria-hidden="true">#</a> <a href="http://build.rs" target="_blank" rel="noopener noreferrer">build.rs</a></h3><p><a href="http://xn--Libraprotobuild-9e3xlf8vsb49j76ejw6aia161eja689qpa4090ax1z3d3dzu6e70ccab4954uyk5bea.rs" target="_blank" rel="noopener noreferrer">在Libra中包含了proto的子项目都会在项目根目录下包含一个build.rs</a>. 其内容非常简单.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> proto_root <span class="token operator">=</span> <span class="token string">&quot;src/proto&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> dependent_root <span class="token operator">=</span> <span class="token string">&quot;../../types/src/proto&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token namespace">build_helpers<span class="token punctuation">::</span>build_helpers<span class="token punctuation">::</span></span><span class="token function">compile_proto</span><span class="token punctuation">(</span>\n        proto_root<span class="token punctuation">,</span>\n        <span class="token macro property">vec!</span><span class="token punctuation">[</span>dependent_root<span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">/* generate_client_code */</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这是storage_proto/build.rs, 主要有两个参数是proto_root和dependent_root</p><ol><li>proto_root表示要自动转换的proto所在目录</li><li>dependent_root 表示编译这些proto文件import所引用的目录,也就是protoc -I参数指定的目录. 当然编译成的rs文件如果要正常工作,那么也必须编译dependent_root中的所有proto文件才行 至于第三个参数generate_client_code, 则表示是否生成client代码,也就是如果proto中包含Service,那么是否也生成grpc client的辅助代码.</li></ol><h3 id="简单解读build-helper"><a class="header-anchor" href="#简单解读build-helper" aria-hidden="true">#</a> 简单解读build_helper</h3><p>build_helper位于common/build_helper,是为了辅助自动将proto文件编译成rs文件.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">compile_proto</span><span class="token punctuation">(</span>proto_root<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> dependent_roots<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> generate_client_code<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">let</span> <span class="token keyword">mut</span> additional_includes <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n   <span class="token keyword">for</span> dependent_root <span class="token keyword">in</span> dependent_roots <span class="token punctuation">{</span>\n       <span class="token comment">// First compile dependent directories</span>\n       <span class="token function">compile_dir</span><span class="token punctuation">(</span>\n           <span class="token operator">&amp;</span>dependent_root<span class="token punctuation">,</span>\n           <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/* additional_includes */</span>\n           <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">/* generate_client_code */</span>\n       <span class="token punctuation">)</span><span class="token punctuation">;</span>\n       additional_includes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>dependent_root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_path_buf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   <span class="token comment">// Now compile this directory</span>\n   <span class="token function">compile_dir</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proto_root<span class="token punctuation">,</span> additional_includes<span class="token punctuation">,</span> generate_client_code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Compile all of the proto files in proto_root directory and use the additional</span>\n<span class="token comment">// includes when compiling.</span>\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">compile_dir</span><span class="token punctuation">(</span>\n   proto_root<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>\n   additional_includes<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">PathBuf</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n   generate_client_code<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">for</span> entry <span class="token keyword">in</span> <span class="token class-name">WalkDir</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>proto_root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">let</span> p <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token keyword">if</span> p<span class="token punctuation">.</span><span class="token function">file_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n           <span class="token keyword">continue</span><span class="token punctuation">;</span>\n       <span class="token punctuation">}</span>\n\n       <span class="token keyword">let</span> path <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extension</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n           <span class="token keyword">if</span> ext <span class="token operator">!=</span> <span class="token string">&quot;proto&quot;</span> <span class="token punctuation">{</span>\n               <span class="token keyword">continue</span><span class="token punctuation">;</span>\n           <span class="token punctuation">}</span>\n           <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;cargo:rerun-if-changed={}&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n           <span class="token function">compile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>additional_includes<span class="token punctuation">,</span> generate_client_code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">compile</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Path</span><span class="token punctuation">,</span> additional_includes<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">PathBuf</span><span class="token punctuation">]</span><span class="token punctuation">,</span> generate_client_code<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>build.rs直接调用的就是compile_proto这个函数,他非常简单就是先调用compile_dir来编译所有的依赖,然后再编译自身.</p><p>而compile_dir则是遍历指定的目录,利用<code>WalkDir</code>查找当前目录下所有的proto文件,然后逐个调用compile进行编译.</p><h3 id="rust中的字符串处理"><a class="header-anchor" href="#rust中的字符串处理" aria-hidden="true">#</a> rust中的字符串处理</h3><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">fn</span> <span class="token function-definition function">compile</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Path</span><span class="token punctuation">,</span> additional_includes<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">PathBuf</span><span class="token punctuation">]</span><span class="token punctuation">,</span> generate_client_code<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> parent <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> src_path <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_path_buf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    src_path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> includes <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>additional_includes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//写成additional_includes.to_owned()也是可以的</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> includes <span class="token operator">=</span> additional_includes<span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最终都会调用slice的to_vec</span>\n    includes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">to_path_buf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">...</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>要跟操作系统打交道，⾸先需要介绍的是两个字符串类型：OsString 以及它所对应的字符串切⽚类型OsStr。它们存在于std：：ffi模块中。</p><p>Rust标准的字符串类型是String和str。它们的⼀个重要特点是保证了内 部编码是统⼀的utf-8。但是，当我们和具体的操作系统打交道时，统⼀的 utf-8编码是不够⽤的，某些操作系统并没有规定⼀定是⽤的utf-8编码。所 以，在和操作系统打交道的时候，String/str类型并不是⼀个很好的选择。 ⽐如在Windows系统上，字符⼀般是⽤16位数字来表⽰的。</p><p>为了应付这样的情况，Rust在标准库中又设计了OsString/OsStr来处理 这样的情况。这两种类型携带的⽅法跟String/str⾮常类似，⽤起来⼏乎没 什么区别，它们之间也可以相互转换。</p><p>Rust标准库中⽤PathBuf和Path两个类型来处理路径。它们之间的关系 就类似String和str之间的关系：⼀个对内部数据有所有权，还有⼀个只是借 ⽤。实际上，读源码可知，PathBuf⾥⾯存的是⼀个OsString，Path⾥⾯存 的是⼀个OsStr。这两个类型定义在std：：path模块中。</p><p>通过这种方式可以方便的在字符串和Path,PathBuf之间进行任意转换. 在compile_dir的第23行中,我们提供给WalkDir::new一个&amp;str,rust自动将其转换为了Path.</p><h2 id="fromproto和intoproto"><a class="header-anchor" href="#fromproto和intoproto" aria-hidden="true">#</a> FromProto和IntoProto</h2><p>出于跨平台的考虑,proto文件中的数据类型表达能力肯定不如rust丰富,所以不可避免需要在两者之间进行类型转换. 因此Libra中提供了proto_conv接口专门用于实现两者之间的转换. 比如:</p><div class="language-rust line-numbers-mode"><pre><code><span class="token comment">/// Helper to construct and parse [`proto::storage::GetAccountStateWithProofByStateRootRequest`]</span>\n<span class="token comment">///</span>\n<span class="token comment">/// It does so by implementing [`IntoProto`](#impl-IntoProto) and [`FromProto`](#impl-FromProto),</span>\n<span class="token comment">/// providing [`into_proto`](IntoProto::into_proto) and [`from_proto`](FromProto::from_proto).</span>\n<span class="token attribute attr-name">#[derive(PartialEq, Eq, Clone, FromProto, IntoProto)]</span>\n<span class="token attribute attr-name">#[ProtoType(crate::proto::storage::GetAccountStateWithProofByStateRootRequest)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">GetAccountStateWithProofByStateRootRequest</span> <span class="token punctuation">{</span>\n    <span class="token comment">/// The access path to query with.</span>\n    <span class="token keyword">pub</span> address<span class="token punctuation">:</span> <span class="token class-name">AccountAddress</span><span class="token punctuation">,</span>\n\n    <span class="token comment">/// the state root hash the query is based on.</span>\n    <span class="token keyword">pub</span> state_root_hash<span class="token punctuation">:</span> <span class="token class-name">HashValue</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/// Helper to construct and parse [`proto::storage::GetAccountStateWithProofByStateRootResponse`]</span>\n<span class="token comment">///</span>\n<span class="token comment">/// It does so by implementing [`IntoProto`](#impl-IntoProto) and [`FromProto`](#impl-FromProto),</span>\n<span class="token comment">/// providing [`into_proto`](IntoProto::into_proto) and [`from_proto`](FromProto::from_proto).</span>\n<span class="token attribute attr-name">#[derive(PartialEq, Eq, Clone)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">GetAccountStateWithProofByStateRootResponse</span> <span class="token punctuation">{</span>\n    <span class="token comment">/// The account state blob requested.</span>\n    <span class="token keyword">pub</span> account_state_blob<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">AccountStateBlob</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n\n    <span class="token comment">/// The state root hash the query is based on.</span>\n    <span class="token keyword">pub</span> sparse_merkle_proof<span class="token punctuation">:</span> <span class="token class-name">SparseMerkleProof</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>针对<code>GetAccountStateWithProofByStateRootRequest</code>可以自动在<code>crate::proto::storage::GetAccountStateWithProofByStateRootRequest</code>和<code>GetAccountStateWithProofByStateRootRequest</code>之间进行转换,只需要derive(FromProto,IntoProto)即可. 而针对GetAccountStateWithProofByStateRootResponse 则由于只能手工实现.</p><div class="language-rust line-numbers-mode"><pre><code>\n<span class="token keyword">impl</span> <span class="token class-name">FromProto</span> <span class="token keyword">for</span> <span class="token class-name">GetAccountStateWithProofByStateRootResponse</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span> <span class="token class-name">ProtoType</span> <span class="token operator">=</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>proto<span class="token punctuation">::</span>storage<span class="token punctuation">::</span></span><span class="token class-name">GetAccountStateWithProofByStateRootResponse</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">fn</span> <span class="token function-definition function">from_proto</span><span class="token punctuation">(</span><span class="token keyword">mut</span> object<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">ProtoType</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> account_state_blob <span class="token operator">=</span> <span class="token keyword">if</span> object<span class="token punctuation">.</span><span class="token function">has_account_state_blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">AccountStateBlob</span><span class="token punctuation">::</span><span class="token function">from_proto</span><span class="token punctuation">(</span>\n                object<span class="token punctuation">.</span><span class="token function">take_account_state_blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">None</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token keyword">Self</span> <span class="token punctuation">{</span>\n            account_state_blob<span class="token punctuation">,</span>\n            sparse_merkle_proof<span class="token punctuation">:</span> <span class="token class-name">SparseMerkleProof</span><span class="token punctuation">::</span><span class="token function">from_proto</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">take_sparse_merkle_proof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">IntoProto</span> <span class="token keyword">for</span> <span class="token class-name">GetAccountStateWithProofByStateRootResponse</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span> <span class="token class-name">ProtoType</span> <span class="token operator">=</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>proto<span class="token punctuation">::</span>storage<span class="token punctuation">::</span></span><span class="token class-name">GetAccountStateWithProofByStateRootResponse</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">fn</span> <span class="token function-definition function">into_proto</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">ProtoType</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> object <span class="token operator">=</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">ProtoType</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>account_state_blob<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>account_state_blob <span class="token punctuation">{</span>\n            object<span class="token punctuation">.</span><span class="token function">set_account_state_blob</span><span class="token punctuation">(</span>account_state_blob<span class="token punctuation">.</span><span class="token function">into_proto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        object<span class="token punctuation">.</span><span class="token function">set_sparse_merkle_proof</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>sparse_merkle_proof<span class="token punctuation">.</span><span class="token function">into_proto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        object\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',37);e.render=function(p,t,e,l,u,r){return n(),s("div",null,[a(' @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} '),a(" code_chunk_output "),o,a(" /code_chunk_output "),c])};export{t as __pageData,e as default};
