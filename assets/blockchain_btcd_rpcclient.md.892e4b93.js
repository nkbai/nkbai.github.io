import{o as n,c as s,e as a}from"./app.1f3c315f.js";const t='{"title":"rpcclient","description":"","frontmatter":{"title":"rpcclient","date":"2018-11-29T03:57:26.000Z","draft":false,"markup":"mmark"},"headers":[{"level":2,"title":"创建client","slug":"创建client"},{"level":2,"title":"http 调用分析","slug":"http-调用分析"},{"level":2,"title":"websocket连接的事件推送","slug":"websocket连接的事件推送"}],"relativePath":"blockchain/btcd/rpcclient.md","lastUpdated":1561507892000}',e={},p=[a('<h1 id="rpc-client-模块"><a class="header-anchor" href="#rpc-client-模块" aria-hidden="true">#</a> rpc client 模块</h1><p>这个模块是进行rpc调用的入口模块,是为了帮助btcd的客户端程序实现而设计的模块,注意btcctl并没有用此模块,它直接用的是btcjson.</p><p>这个模块式在btcjson上面再次封装,方便调用</p><h2 id="创建client"><a class="header-anchor" href="#创建client" aria-hidden="true">#</a> 创建client</h2><div class="language-go line-numbers-mode"><pre><code>connCfg <span class="token operator">:=</span> <span class="token operator">&amp;</span>rpcclient<span class="token punctuation">.</span>ConnConfig<span class="token punctuation">{</span>\n\t\tHost<span class="token punctuation">:</span>         <span class="token string">&quot;192.168.124.13:18334&quot;</span><span class="token punctuation">,</span>\n\t\tUser<span class="token punctuation">:</span>         <span class="token string">&quot;bai&quot;</span><span class="token punctuation">,</span>\n\t\tPass<span class="token punctuation">:</span>         <span class="token string">&quot;bai&quot;</span><span class="token punctuation">,</span>\n\t\tHTTPPostMode<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Bitcoin core only supports HTTP POST mode</span>\n\t\tDisableTLS<span class="token punctuation">:</span>   <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Bitcoin core does not provide TLS by default,</span>\n\t\tCertificates<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`-----BEGIN CERTIFICATE-----\nMIICTzCCAbGgAwIBAgIQLZMB/bcvEeMIuQSobOhvcTAKBggqhkjOPQQDBDAhMREw\nDwYDVQQKEwhnZW5jZXJ0czEMMAoGA1UEAxMDZXRoMB4XDTE4MTEyNzA2MzYxMFoX\nDTI4MTEyNTA2MzYxMFowITERMA8GA1UEChMIZ2VuY2VydHMxDDAKBgNVBAMTA2V0\naDCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEAD5A5+3tRK2UDwmIUYfkWPzXtS67\nzjgToegCMGkgzEwWrOJvaPj2uFy95v5hsozmfyh5cZY1o2FHOGrYnVNQcxE+AW9Z\nOofsgz+4SPY7W8bTkZka6670ejZ1EMfPwFio7ObyVEZt4eFe7xVQ9pJEwg3XWM2c\nYdT6xpn0gQAQ9canuWa8o4GHMIGEMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8E\nBTADAQH/MGEGA1UdEQRaMFiCA2V0aIIJbG9jYWxob3N0hwR/AAABhxAAAAAAAAAA\nAAAAAAAAAAABhwTAqHwNhwQKAABkhxD+gAAAAAAAADrVR//+ALeGhxD+gAAAAAAA\nALj9/f/+anOwMAoGCCqGSM49BAMEA4GLADCBhwJBU0neT5MZvmRwXnUXUdorOojt\nB2sqIW1eZkb6xZzZTnbjLaU+EFdMsdHYxXcM9eAHSbtKbRmsCh+DBL7sWuMNiJYC\nQgFRgh2wZofvEBFVLXGTgawWv8qIqgneOflIcl4cukbA7PLLZ5nfHCO/iC7oP6JH\nbkGHJJz1CYKS12HU4jzSZYq7eQ==\n-----END CERTIFICATE-----`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// Notice the notification parameter is nil since notifications are</span>\n\t<span class="token comment">// not supported in HTTP POST mode.</span>\n\tclient<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpcclient<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>connCfg<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tlog<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>如果要调用在另一台电脑上运行的btcd,就必须指定正确的证书,否则无法建立有效连接.</p><h2 id="http-调用分析"><a class="header-anchor" href="#http-调用分析" aria-hidden="true">#</a> http 调用分析</h2><p>以GetBlockCount为例进行分析</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">GetBlockCountAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> FutureGetBlockCountResult <span class="token punctuation">{</span>\n\tcmd <span class="token operator">:=</span> btcjson<span class="token punctuation">.</span><span class="token function">NewGetBlockCountCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">sendCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// GetBlockCount returns the number of blocks in the longest block chain.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">GetBlockCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">GetBlockCountAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>真正通用部分的处理都在infrastructure.go中,该文件处理了如何发送和派发消息,兼顾http和websocket两种连接方式.</p><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// start begins processing input and output messages.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Tracef</span><span class="token punctuation">(</span><span class="token string">&quot;Starting RPC client %s&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>\n\n\t<span class="token comment">// Start the I/O processing handlers depending on whether the client is</span>\n\t<span class="token comment">// in HTTP POST mode or the default websocket mode.</span>\n\t<span class="token keyword">if</span> c<span class="token punctuation">.</span>config<span class="token punctuation">.</span>HTTPPostMode <span class="token punctuation">{</span>\n\t\tc<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">go</span> c<span class="token punctuation">.</span><span class="token function">sendPostHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tc<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> c<span class="token punctuation">.</span>ntfnHandlers <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">if</span> c<span class="token punctuation">.</span>ntfnHandlers<span class="token punctuation">.</span>OnClientConnected <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t\t\t\tc<span class="token punctuation">.</span>ntfnHandlers<span class="token punctuation">.</span><span class="token function">OnClientConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\tc<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">go</span> c<span class="token punctuation">.</span><span class="token function">wsInHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">go</span> c<span class="token punctuation">.</span><span class="token function">wsOutHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>启动过程就可以看出来,对于http就是启动一个接受上层发起post请求的chan就可以了. 但是websocket是两个,一个是接受上层发送消息请求,一个是接受服务器主动发送来的消息. 也就是说在websocket方式下,所有的消息走的都是websocket消息.</p><p>相对http来说,收到的消息明确知道派发到哪个Response,但是websocket就必须通过id来处理.因此处理http消息的是handleSendPostMessage,而处理websocket消息的是handleMessage</p><p>因此最终在handleSendPostMessage中FutureGetBlockCountResult的Receive收到数据,并进行解析,然后返回.</p><h2 id="websocket连接的事件推送"><a class="header-anchor" href="#websocket连接的事件推送" aria-hidden="true">#</a> websocket连接的事件推送</h2><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// handleMessage is the main handler for incoming notifications and responses.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// Attempt to unmarshal the message as either a notification or</span>\n\t<span class="token comment">// response.</span>\n\t<span class="token keyword">var</span> in inMessage\n\tjson<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>in<span class="token punctuation">)</span>\n \n\t<span class="token comment">// JSON-RPC 1.0 notifications are requests with a null id.</span>\n\t<span class="token keyword">if</span> in<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tntfn <span class="token operator">:=</span> in<span class="token punctuation">.</span>rawNotification\n\t\t<span class="token comment">// Deliver the notification.</span>\n\t\tlog<span class="token punctuation">.</span><span class="token function">Tracef</span><span class="token punctuation">(</span><span class="token string">&quot;Received notification [%s]&quot;</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>\n\t\tc<span class="token punctuation">.</span><span class="token function">handleNotification</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>rawNotification<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\n\tid <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token operator">*</span>in<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Tracef</span><span class="token punctuation">(</span><span class="token string">&quot;Received response for id %d (result %s)&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> in<span class="token punctuation">.</span>Result<span class="token punctuation">)</span>\n\trequest <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">removeRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n\n\t<span class="token comment">// Nothing more to do if there is no request associated with this reply.</span>\n\t<span class="token keyword">if</span> request <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> request<span class="token punctuation">.</span>responseChan <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tlog<span class="token punctuation">.</span><span class="token function">Warnf</span><span class="token punctuation">(</span><span class="token string">&quot;Received unexpected reply: %s (id %d)&quot;</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span>Result<span class="token punctuation">,</span>\n\t\t\tid<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// Since the command was successful, examine it to see if it&#39;s a</span>\n\t<span class="token comment">// notification, and if is, add it to the notification state so it</span>\n\t<span class="token comment">// can automatically be re-established on reconnect.</span>\n\tc<span class="token punctuation">.</span><span class="token function">trackRegisteredNtfns</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span>\n\n\t<span class="token comment">// Deliver the response.</span>\n\tresult<span class="token punctuation">,</span> err <span class="token operator">:=</span> in<span class="token punctuation">.</span>rawResponse<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\trequest<span class="token punctuation">.</span>responseChan <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>response<span class="token punctuation">{</span>result<span class="token punctuation">:</span> result<span class="token punctuation">,</span> err<span class="token punctuation">:</span> err<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>服务器的主动推送的Notification,消息中是没有ID一项的,如果是客户端的请求消息,服务器推送消息肯定包含ID.</p><p>以下是服务器可以主动推送的事件.</p><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">const</span> <span class="token punctuation">(</span>\n\t<span class="token comment">// BlockConnectedNtfnMethod is the legacy, deprecated method used for</span>\n\t<span class="token comment">// notifications from the chain server that a block has been connected.</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// NOTE: Deprecated. Use FilteredBlockConnectedNtfnMethod instead.</span>\n\tBlockConnectedNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;blockconnected&quot;</span>\n\n\t<span class="token comment">// BlockDisconnectedNtfnMethod is the legacy, deprecated method used for</span>\n\t<span class="token comment">// notifications from the chain server that a block has been</span>\n\t<span class="token comment">// disconnected.</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// NOTE: Deprecated. Use FilteredBlockDisconnectedNtfnMethod instead.</span>\n\tBlockDisconnectedNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;blockdisconnected&quot;</span>\n\n\t<span class="token comment">// FilteredBlockConnectedNtfnMethod is the new method used for</span>\n\t<span class="token comment">// notifications from the chain server that a block has been connected.</span>\n\tFilteredBlockConnectedNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;filteredblockconnected&quot;</span>\n\n\t<span class="token comment">// FilteredBlockDisconnectedNtfnMethod is the new method used for</span>\n\t<span class="token comment">// notifications from the chain server that a block has been</span>\n\t<span class="token comment">// disconnected.</span>\n\tFilteredBlockDisconnectedNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;filteredblockdisconnected&quot;</span>\n\n\t<span class="token comment">// RecvTxNtfnMethod is the legacy, deprecated method used for</span>\n\t<span class="token comment">// notifications from the chain server that a transaction which pays to</span>\n\t<span class="token comment">// a registered address has been processed.</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// NOTE: Deprecated. Use RelevantTxAcceptedNtfnMethod and</span>\n\t<span class="token comment">// FilteredBlockConnectedNtfnMethod instead.</span>\n\tRecvTxNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;recvtx&quot;</span>\n\n\t<span class="token comment">// RedeemingTxNtfnMethod is the legacy, deprecated method used for</span>\n\t<span class="token comment">// notifications from the chain server that a transaction which spends a</span>\n\t<span class="token comment">// registered outpoint has been processed.</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// NOTE: Deprecated. Use RelevantTxAcceptedNtfnMethod and</span>\n\t<span class="token comment">// FilteredBlockConnectedNtfnMethod instead.</span>\n\tRedeemingTxNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;redeemingtx&quot;</span>\n\n\t<span class="token comment">// RescanFinishedNtfnMethod is the legacy, deprecated method used for</span>\n\t<span class="token comment">// notifications from the chain server that a legacy, deprecated rescan</span>\n\t<span class="token comment">// operation has finished.</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// NOTE: Deprecated. Not used with rescanblocks command.</span>\n\tRescanFinishedNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;rescanfinished&quot;</span>\n\n\t<span class="token comment">// RescanProgressNtfnMethod is the legacy, deprecated method used for</span>\n\t<span class="token comment">// notifications from the chain server that a legacy, deprecated rescan</span>\n\t<span class="token comment">// operation this is underway has made progress.</span>\n\t<span class="token comment">//</span>\n\t<span class="token comment">// NOTE: Deprecated. Not used with rescanblocks command.</span>\n\tRescanProgressNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;rescanprogress&quot;</span>\n\n\t<span class="token comment">// TxAcceptedNtfnMethod is the method used for notifications from the</span>\n\t<span class="token comment">// chain server that a transaction has been accepted into the mempool.</span>\n\tTxAcceptedNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;txaccepted&quot;</span>\n\n\t<span class="token comment">// TxAcceptedVerboseNtfnMethod is the method used for notifications from</span>\n\t<span class="token comment">// the chain server that a transaction has been accepted into the</span>\n\t<span class="token comment">// mempool.  This differs from TxAcceptedNtfnMethod in that it provides</span>\n\t<span class="token comment">// more details in the notification.</span>\n\tTxAcceptedVerboseNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;txacceptedverbose&quot;</span>\n\n\t<span class="token comment">// RelevantTxAcceptedNtfnMethod is the new method used for notifications</span>\n\t<span class="token comment">// from the chain server that inform a client that a transaction that</span>\n\t<span class="token comment">// matches the loaded filter was accepted by the mempool.</span>\n\tRelevantTxAcceptedNtfnMethod <span class="token operator">=</span> <span class="token string">&quot;relevanttxaccepted&quot;</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div>',19)];e.render=function(a,t,e,c,o,l){return n(),s("div",null,p)};export{t as __pageData,e as default};
