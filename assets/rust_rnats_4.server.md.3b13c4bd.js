import{o as s,c as n,e as a}from"./app.e869f547.js";const p='{"title":"从零实现消息中间件-server","description":"","frontmatter":{"title":"从零实现消息中间件-server","date":"2020-02-06T01:57:03.000Z","draft":false,"tags":["rust"],"categories":["技术相关"]},"headers":[{"level":2,"title":"数据结构定义","slug":"数据结构定义"},{"level":3,"title":"关于channel和mutex","slug":"关于channel和mutex"},{"level":3,"title":"泛型 & async","slug":"泛型-async"},{"level":2,"title":"接口设计","slug":"接口设计"},{"level":3,"title":"如何使用","slug":"如何使用"},{"level":2,"title":"代码实现","slug":"代码实现"},{"level":2,"title":"其他","slug":"其他"}],"relativePath":"rust/rnats/4.server.md","lastUpdated":1641604782000}',t={},e=[a('<p>该部分功能相对比较简单,主要是</p><ul><li>listen &amp; accept</li><li>new client 当然真实的Server中会做其他很多工作,比如配置选项等等,我们这里暂时都不考虑了.</li></ul><h2 id="数据结构定义"><a class="header-anchor" href="#数据结构定义" aria-hidden="true">#</a> 数据结构定义</h2><div class="language-rust line-numbers-mode"><pre><code><span class="token attribute attr-name">#[derive(Debug, Default)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Server</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">SubListTrait</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">ServerState</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token attribute attr-name">#[derive(Debug, Default)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ServerState</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">SubListTrait</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    clients<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">ClientMessageSender</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> sublist<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> gen_cid<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>其中最核心的就是ServerState,注意到他被放在了 Arc&lt;Mutex&gt;中,这也就意味着</p><ol><li>他要多线程访问</li><li>多线程中读写 <strong>如果一个复杂结构体,需要多线程读,我们可以使用Arc包裹,避免多次内存分配</strong><strong>如果一个变量,需要多线程读写,我们必须使用Mutex包裹,否则肯定无法编译</strong> 这里的SubListTrait就是上节课<a href="./3.sublist.html">从零实现消息中间件-sublist</a>中讲到的.</li></ol><h3 id="关于channel和mutex"><a class="header-anchor" href="#关于channel和mutex" aria-hidden="true">#</a> 关于channel和mutex</h3><p>标准库中有channel和mutex,tokio也另外提供了一套,他们的接口使用起来差不多. 最大的区别就是标准库里的阻塞是会导致整个线程阻塞,而tokio提供的只是阻塞当前task. <strong>不要在tokio框架中使用标准库中的channel和mutex</strong></p><h3 id="泛型-async"><a class="header-anchor" href="#泛型-async" aria-hidden="true">#</a> 泛型 &amp; async</h3><p>因为ServerState中的sublist,他需要在多个tokio的task之间传递,所以我们要求他除了实现SubListTrait这个我们要求的功能性trait之外,还要满足tokio的要求. 也就是Send+&#39;static. 顺便说一句&#39;static这个生命周期,简单理解他的意思就是我这个struct中不包含任何借用.</p><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">SubListTrait</span> <span class="token operator">+</span> <span class="token class-name">Send</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">&#39;static</span><span class="token operator">&gt;</span> <span class="token class-name">Server</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="接口设计"><a class="header-anchor" href="#接口设计" aria-hidden="true">#</a> 接口设计</h2><p>从功能上来说,Server这个结构体很简单,就是</p><ol><li>主要任务就是listen &amp; accept</li><li>创建Client实例, 后续需要的时候好利用起来. 这分别对应下面的start和new_client两个函数.</li></ol><div class="language-rust line-numbers-mode"><pre><code> <span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">SubListTrait</span> <span class="token operator">+</span> <span class="token class-name">Send</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">&#39;static</span><span class="token operator">&gt;</span> <span class="token class-name">Server</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">new_client</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> conn<span class="token punctuation">:</span> <span class="token class-name">TcpStream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="如何使用"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用</h3><p>这里用到了tokio的使用方式,为了简化使用,tokio提供了两个宏main和test,他们位于<a href="https://github.com/tokio-rs/tokio/tree/master/tokio-macros" target="_blank" rel="noopener noreferrer">tokio-macros</a>这个crate下面. 有了这两个宏,我们的main函数可以简化很多.看起来就和普通的main函数差别不大,只是多了一个async关键字.</p><div class="language-rust line-numbers-mode"><pre><code><span class="token attribute attr-name">#[tokio::main]</span>\n<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;server start..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token class-name">Server</span><span class="token operator">&lt;</span><span class="token class-name">SimpleSubList</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Server</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    s<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="代码实现"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>client<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>simple_sublist<span class="token punctuation">::</span></span><span class="token class-name">SubListTrait</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Arc</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">TcpListener</span><span class="token punctuation">,</span> <span class="token class-name">TcpStream</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span>\n\n<span class="token attribute attr-name">#[derive(Debug, Default)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Server</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">SubListTrait</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">ServerState</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token attribute attr-name">#[derive(Debug, Default)]</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ServerState</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">SubListTrait</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    clients<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">ClientMessageSender</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> sublist<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> gen_cid<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">SubListTrait</span> <span class="token operator">+</span> <span class="token class-name">Send</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">&#39;static</span><span class="token operator">&gt;</span> <span class="token class-name">Server</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">start</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> addr <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1:4222&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> listener <span class="token operator">=</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n        <span class="token comment">//go func(){}</span>\n        <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> <span class="token punctuation">(</span>conn<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>\n            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">new_client</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">new_client</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> conn<span class="token punctuation">:</span> <span class="token class-name">TcpStream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> cid <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> <span class="token keyword">mut</span> state <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>\n            state<span class="token punctuation">.</span>gen_cid <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            state<span class="token punctuation">.</span>gen_cid\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">process_connection</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span> state<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="其他"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>相关代码都在我的github <a href="https://github.com/nkbai/learnrustbynats" target="_blank" rel="noopener noreferrer">rnats</a> 欢迎围观</p>',22)];t.render=function(a,p,t,o,c,l){return s(),n("div",null,e)};export{p as __pageData,t as default};
