import{o as n,c as s,e as a}from"./app.63f3ffeb.js";const p='{"title":"Rust中enum和整数的互相转换","description":"","frontmatter":{"title":"Rust中enum和整数的互相转换","date":"2020-12-02T23:57:03.000Z","draft":false,"tags":["rust","enum"],"categories":["技术相关"]},"headers":[{"level":3,"title":"在C中将整数转换为项","slug":"在c中将整数转换为项"},{"level":3,"title":"Rust中将整数转换为enum","slug":"rust中将整数转换为enum"},{"level":3,"title":"更好的转换方式","slug":"更好的转换方式"},{"level":3,"title":"Rust让编码更快乐","slug":"rust让编码更快乐"}],"relativePath":"rust/convert_an_integer_to_an_enum.md","lastUpdated":1606871779000}',e={},t=[a('<p>本文参考了<a href="https://enodev.fr/posts/rusticity-convert-an-integer-to-an-enum.html" target="_blank" rel="noopener noreferrer">Rusticity: convert an integer to an enum</a></p><p>我正在学习Rust编程。在Rust中思考是一种令人愉快的体验，我越练习Rust，我越觉得它能更好地让开发人员能够自信地解决复杂的问题。</p><p>然而，我有时却会感到沮丧。例如，有些事情在C或Python中可以轻松完成，但是在Rust中却需要做更多工作。不久前，当我不得不将整数转换为一个enum时，就发生了这种事。让我们看看这在C中通常是如何完成的，以及如何在Rust中完成。</p><h3 id="在c中将整数转换为项"><a class="header-anchor" href="#在c中将整数转换为项" aria-hidden="true">#</a> 在C中将整数转换为项</h3><p>在C中，枚举常量是int类型 。因此，整数值可以直接分配给一个enum.</p><div class="language-c line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token keyword">enum</span> <span class="token class-name">atomic_number</span> <span class="token punctuation">{</span>\n    HYDROGEN <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    HELIUM <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n    IRON <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">enum</span> <span class="token class-name">atomic_number</span> element <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> IRON<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Beware of Rust!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>虽然将整数值分配给一个enum很容易，但C编译器不执行边界检查。没有什么能阻止我们为一个<code>atomic_number</code>分配一个不可能的值。</p><h3 id="rust中将整数转换为enum"><a class="header-anchor" href="#rust中将整数转换为enum" aria-hidden="true">#</a> Rust中将整数转换为enum</h3><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">enum</span> <span class="token type-definition class-name">AtomicNumber</span> <span class="token punctuation">{</span>\n    <span class="token constant">HYDROGEN</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token constant">HELIUM</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n    <span class="token constant">IRON</span> <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> element<span class="token punctuation">:</span> <span class="token class-name">AtomicNumber</span> <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当我们尝试编译和运行程序<code>cargo run</code>时，Rust编译器报告不匹配的类型错误：</p><div class="language-"><pre><code>error[E0308]: mismatched types\n --&gt; src/main.rs:9:34\n  |\n9 |     let element: AtomicNumber = 26;\n  |                                 ^^ expected enum `AtomicNumber`, found integral variable\n  |\n  = note: expected type `AtomicNumber`\n             found type `{integer}`\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编译器错误清楚地指示integer和AtomicNumber是两种不同的类型。</p><p>为了显式将整数转换为AtomicNumber，我们可以编写一个转换函数，该函数以<code>u32</code>作为参数并返回<code>AtomicNumber</code>。</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">enum</span> <span class="token type-definition class-name">AtomicNumber</span> <span class="token punctuation">{</span>\n    <span class="token constant">HYDROGEN</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token constant">HELIUM</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n    <span class="token constant">IRON</span> <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">AtomicNumber</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">from_u32</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">AtomicNumber</span> <span class="token punctuation">{</span>\n        <span class="token keyword">match</span> value <span class="token punctuation">{</span>\n            <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token class-name">AtomicNumber</span><span class="token punctuation">::</span><span class="token constant">HYDROGEN</span><span class="token punctuation">,</span>\n            <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token class-name">AtomicNumber</span><span class="token punctuation">::</span><span class="token constant">HELIUM</span><span class="token punctuation">,</span>\n            <span class="token comment">// ...</span>\n            <span class="token number">26</span> <span class="token operator">=&gt;</span> <span class="token class-name">AtomicNumber</span><span class="token punctuation">::</span><span class="token constant">IRON</span><span class="token punctuation">,</span>\n            _ <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown value: {}&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token class-name">AtomicNumber</span><span class="token punctuation">::</span><span class="token function">from_u32</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><code>from_u32</code>函数的类型是关联函数，因为它仅在此类型的上下文中定义,他第一个参数不是<code>self</code>.</p><p>关于<code>from_u32()</code>有几个问题：</p><ul><li>当给定值与enum中的值不匹配时，使用<code>panic!()</code></li><li>必须针对整数值逐一转换</li><li>如果枚举列表很长，则转换函数将变得很长。</li></ul><p>由于<code>AtomicNumber</code>有100多个成员，实现转换函数很快就会变得枯燥乏味。应该有更好的办法。</p><h3 id="更好的转换方式"><a class="header-anchor" href="#更好的转换方式" aria-hidden="true">#</a> 更好的转换方式</h3><p>更优雅的解决方案是使用<a href="https://crates.io/crates/num_enum" target="_blank" rel="noopener noreferrer">num_enum</a>中的 <code>FromPrimitive</code>特性，以及来自num_enum的语法扩展。</p><p>在<code>Cargo.toml</code>中，添加依赖项：</p><div class="language-toml line-numbers-mode"><pre><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>\n<span class="token key property">num_enum</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.5.1&quot;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后，使用<code>#[derive]</code>属性：</p><div class="language-rust line-numbers-mode"><pre><code><span class="token keyword">use</span> <span class="token namespace">num_enum<span class="token punctuation">::</span></span><span class="token class-name">TryFromPrimitive</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>convert<span class="token punctuation">::</span></span><span class="token class-name">TryFrom</span><span class="token punctuation">;</span>\n\n<span class="token attribute attr-name">#[derive(TryFromPrimitive)]</span>\n<span class="token attribute attr-name">#[repr(u32)]</span>\n<span class="token keyword">enum</span> <span class="token type-definition class-name">AtomicNumber</span> <span class="token punctuation">{</span>\n    <span class="token constant">HYDROGEN</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token constant">HELIUM</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n    <span class="token constant">IRON</span> <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token class-name">AtomicNumber</span><span class="token punctuation">::</span><span class="token function">try_from</span><span class="token punctuation">(</span><span class="token number">26u32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">match</span> element <span class="token punctuation">{</span>\n        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">AtomicNumber</span><span class="token punctuation">::</span><span class="token constant">IRON</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Beware of Rust!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown atomic number&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><code>#[derive(FromPrimitive)]</code>属性指示Rust编译器为enum生成<code>try_from</code>实现。 它的好处是:</p><ul><li>解决了枯燥无味的编码</li><li>不使用panic,而是使用TryFrom,更安全</li></ul><p>有了<code>#[derive(FromPrimitive)]</code>这个属性，我们的Rust程序几乎和用C编写的等效程序一样简洁，并且更加安全。</p><h3 id="rust让编码更快乐"><a class="header-anchor" href="#rust让编码更快乐" aria-hidden="true">#</a> Rust让编码更快乐</h3><p>Rust强大的生态,能够让我们专注解决问题而不是各种语言的细枝末节问题.</p>',29)];e.render=function(a,p,e,o,c,l){return n(),s("div",null,t)};export{p as __pageData,e as default};
