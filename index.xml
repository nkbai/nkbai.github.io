<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://nkbai.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Feb 2019 18:00:33 +0800</lastBuildDate>
    
	<atom:link href="https://nkbai.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2019 02 11 接口变动</title>
      <link>https://nkbai.github.io/post/2019-02-11-%E6%8E%A5%E5%8F%A3%E5%8F%98%E5%8A%A8/</link>
      <pubDate>Tue, 12 Feb 2019 18:00:33 +0800</pubDate>
      
      <guid>https://nkbai.github.io/post/2019-02-11-%E6%8E%A5%E5%8F%A3%E5%8F%98%E5%8A%A8/</guid>
      <description>接口结果由轮询改为主动推送  接口结果由轮询改为主动推送  通道说明  通道结构体 通道状态说明 状态变化推送  接口变化  callID轮询变为主动推送  InfoStruct解释  CallID通道状态推送 通道状态变化推送  通道操作引起的通道状态变化  合作关闭通道    2019-02-11和宇庭沟通以后,觉得在App中轮询调用结果,对于用户体验还是耗电都是一个较差的选择,因此由轮询结果改为异步推送通知.推送接口位于NotifyHandler.OnNotify
通道说明 通道结构体 func (a *API) GetOneChannel(channelIdentifier string) (channel string, err error)
返回示例:
{ &amp;quot;channel_identifier&amp;quot;: &amp;quot;0xa626a3d897e655855505f9a7c8ea482dc690f017c84b5acd9f750bcc201d7f2b&amp;quot;, &amp;quot;open_block_number&amp;quot;: 16020382, &amp;quot;partner_address&amp;quot;: &amp;quot;0x09eaFb85ea83268682317E5ac85A1CCeb3a06064&amp;quot;, &amp;quot;balance&amp;quot;: 3, &amp;quot;partner_balance&amp;quot;: 0, &amp;quot;locked_amount&amp;quot;: 0, &amp;quot;partner_locked_amount&amp;quot;: 0, &amp;quot;token_address&amp;quot;: &amp;quot;0x310e71caA0DE5CC1f7138275E50a11bAd3FB535b&amp;quot;, &amp;quot;state&amp;quot;: 1, &amp;quot;state_string&amp;quot;: &amp;quot;opened&amp;quot;, &amp;quot;settle_timeout&amp;quot;: 300, &amp;quot;reveal_timeout&amp;quot;: 0, &amp;quot;closed_block&amp;quot;: 0, &amp;quot;settled_block&amp;quot;: 0, &amp;quot;our_balance_proof&amp;quot;: { &amp;quot;nonce&amp;quot;: 0, &amp;quot;transfer_amount&amp;quot;: 0, &amp;quot;locks_root&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot;, &amp;quot;channel_identifier&amp;quot;: { &amp;quot;channel_identifier&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot;, &amp;quot;open_block_number&amp;quot;: 0 }, &amp;quot;message_hash&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot;, &amp;quot;contract_transfer_amount&amp;quot;: 0, &amp;quot;contract_locksroot&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot; }, &amp;quot;partner_balance_proof&amp;quot;: { &amp;quot;nonce&amp;quot;: 0, &amp;quot;transfer_amount&amp;quot;: 0, &amp;quot;locks_root&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot;, &amp;quot;channel_identifier&amp;quot;: { &amp;quot;channel_identifier&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot;, &amp;quot;open_block_number&amp;quot;: 0 }, &amp;quot;message_hash&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot;, &amp;quot;contract_transfer_amount&amp;quot;: 0, &amp;quot;contract_locksroot&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot; } }  通道状态说明    State StateString Description     0 inValid 通道不存在   1 opened 通道打开状态，可以正常转账交易,可以CloseChannel,Withdraw和Deposit,不能SettleChannel   2 closed 通道关闭状态，不能再发起交易，还可以接受交易; 等到当前块数(获取当前块数)大于settled_block(通道结构体中有)后可以SettleChannel,不能CloseChannel,Withdraw和Deposit   3 settled 通道结算状态，结算后通道内资金将返还节点链上帐户，通道将不存在,从ChannelList中消失   4 closing 用户发起了关闭通道的请求,正在处理过程中，此时正在进行交易的可以继续,不能新开交易;不能 SettleChannel,CloseChannel,Withdraw和Deposit   5 settling 用户发起了结算请求,正在处理，正常情况下此时不应该还有未完成交易。在这种状态下不能新开交易,正在提交到链上，还没被成功打包;不能 SettleChannel,CloseChannel,Withdraw和Deposit   6 withdrawing 用户收到或者发出了 withdraw 请求后,如恰在此时收到的交易请求，则该交易请求只能立即放弃。不能 SettleChannel,Withdraw和Deposit,可以强制关闭通道(CloseChannel)   7 cooperativeSettling 本地或者通道另一方收到来自用户关闭通道请求(CloseChannel 中force为false),如恰在此刻收到对方节点的交易请求，则该交易只能立即放弃; 不能SettleChannel,Withdraw和Deposit,可以强制关闭通道(CloseChannel,force为true)   8 prepareForCooperativeSettle 用户向photon发起合作关闭通道请求,因为仍存在交易，不能合作关闭通道。但用户如果仍想合作关闭通道，可以等待交易彻底结束后再调用合作关闭通道。为防止在等待期间产生新交易，设置&amp;rsquo;prepareForCooperativeSettle&amp;rsquo;作为标记，不再接受新的交易,等待当前交易完成,再使用合作关闭通道方式结算通道。不能SettleChannel,Withdraw和Deposit,可以强制关闭通道(CloseChannel,force为true)   9 prepareForWithdraw 用户向photon发起 withdraw请求, 但是目前还持有锁,不能合作取钱。但用户仍想取钱，可以等待交易解锁后再调用合作取钱功能。为防止在等待期间产生新交易,设置&amp;rsquo;prepareForWithdraw&amp;rsquo;作为标记，不再接受新的交易。等待当前交易解锁后再进行 withdraw,进行合作取钱。不能SettleChannel,Withdraw和Deposit,但是可以强制关闭通道(CloseChannel,force为true)   10 unkown StateError    其中App能够看到的State只有1-9 9个状态,其他无法直接观察到,是内部使用.</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://nkbai.github.io/post/first/</link>
      <pubDate>Tue, 12 Feb 2019 16:48:59 +0800</pubDate>
      
      <guid>https://nkbai.github.io/post/first/</guid>
      <description>myfirst blog 交易可延展性 虽然交易签名后，签名当前不会覆盖经过哈希处理以创建事务哈希的事务中的所有数据。因此，虽然不常见，但网络上的节点可能会以散列无效的方式更改您发送的事务。请注意，这只会更改哈希值; 交易的输出保持不变，比特币将转到他们的预期收件人。然而，这确实意味着，例如，在任何情况下接受一系列确认块数不够的交易是不安全的，因为后来的交易将取决于先前交易的哈希值，并且这些哈希值可以被更改，直到它们在链上被确认为止。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://nkbai.github.io/about/</link>
      <pubDate>Tue, 12 Feb 2019 16:43:49 +0800</pubDate>
      
      <guid>https://nkbai.github.io/about/</guid>
      <description>#Hi, it&amp;rsquo;s Bai</description>
    </item>
    
  </channel>
</rss>